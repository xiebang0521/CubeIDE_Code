
Serial_Ass_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002e94  08002e94  00003e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  00004020  2**0
                  CONTENTS
  4 .ARM          00000000  08002ecc  08002ecc  00004020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ecc  08002ecc  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ed0  08002ed0  00003ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08002ed4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000020  08002ef4  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002ef4  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090de  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b48  00000000  00000000  0000d126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0000ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000582  00000000  00000000  0000f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019149  00000000  00000000  0000f92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aed9  00000000  00000000  00028a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcd1  00000000  00000000  0003394c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c361d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a4  00000000  00000000  000c3660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c4e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e7c 	.word	0x08002e7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08002e7c 	.word	0x08002e7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000226:	4b10      	ldr	r3, [pc, #64]	@ (8000268 <MX_GPIO_Init+0x48>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <MX_GPIO_Init+0x48>)
 800022c:	2180      	movs	r1, #128	@ 0x80
 800022e:	03c9      	lsls	r1, r1, #15
 8000230:	430a      	orrs	r2, r1
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <MX_GPIO_Init+0x48>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2380      	movs	r3, #128	@ 0x80
 800023a:	03db      	lsls	r3, r3, #15
 800023c:	4013      	ands	r3, r2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <MX_GPIO_Init+0x48>)
 8000244:	695a      	ldr	r2, [r3, #20]
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <MX_GPIO_Init+0x48>)
 8000248:	2180      	movs	r1, #128	@ 0x80
 800024a:	0289      	lsls	r1, r1, #10
 800024c:	430a      	orrs	r2, r1
 800024e:	615a      	str	r2, [r3, #20]
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <MX_GPIO_Init+0x48>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	2380      	movs	r3, #128	@ 0x80
 8000256:	029b      	lsls	r3, r3, #10
 8000258:	4013      	ands	r3, r2
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]

}
 800025e:	46c0      	nop			@ (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	b002      	add	sp, #8
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	40021000 	.word	0x40021000

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 f9ba 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f816 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f7ff ffd2 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800027c:	f000 f904 	bl	8000488 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);// 使能空闲中断
//	  HAL_UART_Receive_IT(&huart1, buf, 1);
	  HAL_UART_Transmit(&huart1, uart_tx, 6, 100);
 8000280:	4906      	ldr	r1, [pc, #24]	@ (800029c <main+0x30>)
 8000282:	4807      	ldr	r0, [pc, #28]	@ (80002a0 <main+0x34>)
 8000284:	2364      	movs	r3, #100	@ 0x64
 8000286:	2206      	movs	r2, #6
 8000288:	f001 fb4e 	bl	8001928 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800028c:	23fa      	movs	r3, #250	@ 0xfa
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fa0d 	bl	80006b0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, uart_tx, 6, 100);
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	e7f2      	b.n	8000280 <main+0x14>
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000140 	.word	0x20000140

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b099      	sub	sp, #100	@ 0x64
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	242c      	movs	r4, #44	@ 0x2c
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	2334      	movs	r3, #52	@ 0x34
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f002 fdb5 	bl	8002e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	231c      	movs	r3, #28
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	0018      	movs	r0, r3
 80002c0:	2310      	movs	r3, #16
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f002 fdad 	bl	8002e24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ca:	003b      	movs	r3, r7
 80002cc:	0018      	movs	r0, r3
 80002ce:	231c      	movs	r3, #28
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f002 fda6 	bl	8002e24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	0021      	movs	r1, r4
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2202      	movs	r2, #2
 80002de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2201      	movs	r2, #1
 80002e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2210      	movs	r2, #16
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2202      	movs	r2, #2
 80002f0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2280      	movs	r2, #128	@ 0x80
 80002f6:	0212      	lsls	r2, r2, #8
 80002f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2280      	movs	r2, #128	@ 0x80
 80002fe:	0352      	lsls	r2, r2, #13
 8000300:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fcc8 	bl	8000ca0 <HAL_RCC_OscConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000314:	f000 f828 	bl	8000368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	211c      	movs	r1, #28
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2207      	movs	r2, #7
 800031e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2202      	movs	r2, #2
 8000324:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2101      	movs	r1, #1
 8000336:	0018      	movs	r0, r3
 8000338:	f001 f838 	bl	80013ac <HAL_RCC_ClockConfig>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000340:	f000 f812 	bl	8000368 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000344:	003b      	movs	r3, r7
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000350:	003b      	movs	r3, r7
 8000352:	0018      	movs	r0, r3
 8000354:	f001 f996 	bl	8001684 <HAL_RCCEx_PeriphCLKConfig>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800035c:	f000 f804 	bl	8000368 <Error_Handler>
  }
}
 8000360:	46c0      	nop			@ (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b019      	add	sp, #100	@ 0x64
 8000366:	bd90      	pop	{r4, r7, pc}

08000368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800036c:	b672      	cpsid	i
}
 800036e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000370:	46c0      	nop			@ (mov r8, r8)
 8000372:	e7fd      	b.n	8000370 <Error_Handler+0x8>

08000374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <HAL_MspInit+0x44>)
 800037c:	699a      	ldr	r2, [r3, #24]
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <HAL_MspInit+0x44>)
 8000380:	2101      	movs	r1, #1
 8000382:	430a      	orrs	r2, r1
 8000384:	619a      	str	r2, [r3, #24]
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <HAL_MspInit+0x44>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	2201      	movs	r2, #1
 800038c:	4013      	ands	r3, r2
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <HAL_MspInit+0x44>)
 8000394:	69da      	ldr	r2, [r3, #28]
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <HAL_MspInit+0x44>)
 8000398:	2180      	movs	r1, #128	@ 0x80
 800039a:	0549      	lsls	r1, r1, #21
 800039c:	430a      	orrs	r2, r1
 800039e:	61da      	str	r2, [r3, #28]
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <HAL_MspInit+0x44>)
 80003a2:	69da      	ldr	r2, [r3, #28]
 80003a4:	2380      	movs	r3, #128	@ 0x80
 80003a6:	055b      	lsls	r3, r3, #21
 80003a8:	4013      	ands	r3, r2
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	40021000 	.word	0x40021000

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003c0:	46c0      	nop			@ (mov r8, r8)
 80003c2:	e7fd      	b.n	80003c0 <NMI_Handler+0x4>

080003c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c8:	46c0      	nop			@ (mov r8, r8)
 80003ca:	e7fd      	b.n	80003c8 <HardFault_Handler+0x4>

080003cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003d0:	46c0      	nop			@ (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003da:	46c0      	nop			@ (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e4:	f000 f948 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e8:	46c0      	nop			@ (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80003f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000468 <USART1_IRQHandler+0x78>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	2210      	movs	r2, #16
 80003fc:	4013      	ands	r3, r2
 80003fe:	2b10      	cmp	r3, #16
 8000400:	d116      	bne.n	8000430 <USART1_IRQHandler+0x40>
	{
		__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_IDLEF);
 8000402:	4b19      	ldr	r3, [pc, #100]	@ (8000468 <USART1_IRQHandler+0x78>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2210      	movs	r2, #16
 8000408:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, uart_buf, len, 1000);
 800040a:	4b18      	ldr	r3, [pc, #96]	@ (800046c <USART1_IRQHandler+0x7c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	001a      	movs	r2, r3
 8000410:	23fa      	movs	r3, #250	@ 0xfa
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	4916      	ldr	r1, [pc, #88]	@ (8000470 <USART1_IRQHandler+0x80>)
 8000416:	4814      	ldr	r0, [pc, #80]	@ (8000468 <USART1_IRQHandler+0x78>)
 8000418:	f001 fa86 	bl	8001928 <HAL_UART_Transmit>
		len = 0;
 800041c:	4b13      	ldr	r3, [pc, #76]	@ (800046c <USART1_IRQHandler+0x7c>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
		memset(uart_buf, 0, sizeof(uart_buf));
 8000422:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <USART1_IRQHandler+0x80>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	2100      	movs	r1, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f002 fcfb 	bl	8002e24 <memset>
 800042e:	e014      	b.n	800045a <USART1_IRQHandler+0x6a>
	}
	else
	{
		uart_buf[len] = USART1->RDR;
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <USART1_IRQHandler+0x84>)
 8000432:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000434:	b299      	uxth	r1, r3
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <USART1_IRQHandler+0x7c>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	001a      	movs	r2, r3
 800043c:	b2c9      	uxtb	r1, r1
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <USART1_IRQHandler+0x80>)
 8000440:	5499      	strb	r1, [r3, r2]
		len++;
 8000442:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <USART1_IRQHandler+0x7c>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3301      	adds	r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b08      	ldr	r3, [pc, #32]	@ (800046c <USART1_IRQHandler+0x7c>)
 800044c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, buf, 1);
 800044e:	490a      	ldr	r1, [pc, #40]	@ (8000478 <USART1_IRQHandler+0x88>)
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <USART1_IRQHandler+0x78>)
 8000452:	2201      	movs	r2, #1
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fb06 	bl	8001a66 <HAL_UART_Receive_IT>
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800045a:	4b03      	ldr	r3, [pc, #12]	@ (8000468 <USART1_IRQHandler+0x78>)
 800045c:	0018      	movs	r0, r3
 800045e:	f001 fb59 	bl	8001b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000140 	.word	0x20000140
 800046c:	2000013c 	.word	0x2000013c
 8000470:	2000003c 	.word	0x2000003c
 8000474:	40013800 	.word	0x40013800
 8000478:	200000bc 	.word	0x200000bc

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800048c:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 800048e:	4a15      	ldr	r2, [pc, #84]	@ (80004e4 <MX_USART1_UART_Init+0x5c>)
 8000490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000492:	4b13      	ldr	r3, [pc, #76]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 8000494:	22e1      	movs	r2, #225	@ 0xe1
 8000496:	0252      	lsls	r2, r2, #9
 8000498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800049a:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b8:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004be:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ca:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <MX_USART1_UART_Init+0x58>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 f9d7 	bl	8001880 <HAL_UART_Init>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004d6:	f7ff ff47 	bl	8000368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000140 	.word	0x20000140
 80004e4:	40013800 	.word	0x40013800

080004e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b08b      	sub	sp, #44	@ 0x2c
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	2414      	movs	r4, #20
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	0018      	movs	r0, r3
 80004f6:	2314      	movs	r3, #20
 80004f8:	001a      	movs	r2, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	f002 fc92 	bl	8002e24 <memset>
  if(uartHandle->Instance==USART1)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a21      	ldr	r2, [pc, #132]	@ (800058c <HAL_UART_MspInit+0xa4>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d13b      	bne.n	8000582 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800050a:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <HAL_UART_MspInit+0xa8>)
 800050c:	699a      	ldr	r2, [r3, #24]
 800050e:	4b20      	ldr	r3, [pc, #128]	@ (8000590 <HAL_UART_MspInit+0xa8>)
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	01c9      	lsls	r1, r1, #7
 8000514:	430a      	orrs	r2, r1
 8000516:	619a      	str	r2, [r3, #24]
 8000518:	4b1d      	ldr	r3, [pc, #116]	@ (8000590 <HAL_UART_MspInit+0xa8>)
 800051a:	699a      	ldr	r2, [r3, #24]
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	01db      	lsls	r3, r3, #7
 8000520:	4013      	ands	r3, r2
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b1a      	ldr	r3, [pc, #104]	@ (8000590 <HAL_UART_MspInit+0xa8>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <HAL_UART_MspInit+0xa8>)
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	0289      	lsls	r1, r1, #10
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <HAL_UART_MspInit+0xa8>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	029b      	lsls	r3, r3, #10
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	22c0      	movs	r2, #192	@ 0xc0
 8000546:	00d2      	lsls	r2, r2, #3
 8000548:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	0021      	movs	r1, r4
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2202      	movs	r2, #2
 8000550:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2203      	movs	r2, #3
 800055c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2201      	movs	r2, #1
 8000562:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	187a      	adds	r2, r7, r1
 8000566:	2390      	movs	r3, #144	@ 0x90
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fa1f 	bl	80009b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	201b      	movs	r0, #27
 8000578:	f000 f96a 	bl	8000850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800057c:	201b      	movs	r0, #27
 800057e:	f000 f97c 	bl	800087a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b00b      	add	sp, #44	@ 0x2c
 8000588:	bd90      	pop	{r4, r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	40013800 	.word	0x40013800
 8000590:	40021000 	.word	0x40021000

08000594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000596:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000598:	f7ff ff70 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800059e:	490d      	ldr	r1, [pc, #52]	@ (80005d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <LoopForever+0xe>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b4:	4c0a      	ldr	r4, [pc, #40]	@ (80005e0 <LoopForever+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c2:	f002 fc37 	bl	8002e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c6:	f7ff fe51 	bl	800026c <main>

080005ca <LoopForever>:

LoopForever:
    b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   r0, =_estack
 80005cc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80005d8:	08002ed4 	.word	0x08002ed4
  ldr r2, =_sbss
 80005dc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80005e0:	200001cc 	.word	0x200001cc

080005e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_COMP_IRQHandler>
	...

080005e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <HAL_Init+0x24>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <HAL_Init+0x24>)
 80005f2:	2110      	movs	r1, #16
 80005f4:	430a      	orrs	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f809 	bl	8000610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005fe:	f7ff feb9 	bl	8000374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	40022000 	.word	0x40022000

08000610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <HAL_InitTick+0x5c>)
 800061a:	681c      	ldr	r4, [r3, #0]
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <HAL_InitTick+0x60>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	0019      	movs	r1, r3
 8000622:	23fa      	movs	r3, #250	@ 0xfa
 8000624:	0098      	lsls	r0, r3, #2
 8000626:	f7ff fd6f 	bl	8000108 <__udivsi3>
 800062a:	0003      	movs	r3, r0
 800062c:	0019      	movs	r1, r3
 800062e:	0020      	movs	r0, r4
 8000630:	f7ff fd6a 	bl	8000108 <__udivsi3>
 8000634:	0003      	movs	r3, r0
 8000636:	0018      	movs	r0, r3
 8000638:	f000 f92f 	bl	800089a <HAL_SYSTICK_Config>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	e00f      	b.n	8000664 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d80b      	bhi.n	8000662 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	2301      	movs	r3, #1
 800064e:	425b      	negs	r3, r3
 8000650:	2200      	movs	r2, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f000 f8fc 	bl	8000850 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_InitTick+0x64>)
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	b003      	add	sp, #12
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	20000014 	.word	0x20000014
 8000670:	2000001c 	.word	0x2000001c
 8000674:	20000018 	.word	0x20000018

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <HAL_IncTick+0x1c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	001a      	movs	r2, r3
 8000682:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_IncTick+0x20>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	18d2      	adds	r2, r2, r3
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <HAL_IncTick+0x20>)
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	2000001c 	.word	0x2000001c
 8000698:	200001c8 	.word	0x200001c8

0800069c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b02      	ldr	r3, [pc, #8]	@ (80006ac <HAL_GetTick+0x10>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	200001c8 	.word	0x200001c8

080006b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b8:	f7ff fff0 	bl	800069c <HAL_GetTick>
 80006bc:	0003      	movs	r3, r0
 80006be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	d005      	beq.n	80006d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_Delay+0x44>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	001a      	movs	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	189b      	adds	r3, r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	f7ff ffe0 	bl	800069c <HAL_GetTick>
 80006dc:	0002      	movs	r2, r0
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d8f7      	bhi.n	80006d8 <HAL_Delay+0x28>
  {
  }
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b004      	add	sp, #16
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	2000001c 	.word	0x2000001c

080006f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b7f      	cmp	r3, #127	@ 0x7f
 800070a:	d809      	bhi.n	8000720 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	001a      	movs	r2, r3
 8000712:	231f      	movs	r3, #31
 8000714:	401a      	ands	r2, r3
 8000716:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__NVIC_EnableIRQ+0x30>)
 8000718:	2101      	movs	r1, #1
 800071a:	4091      	lsls	r1, r2
 800071c:	000a      	movs	r2, r1
 800071e:	601a      	str	r2, [r3, #0]
  }
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	0002      	movs	r2, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000740:	d828      	bhi.n	8000794 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000742:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <__NVIC_SetPriority+0xd4>)
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b25b      	sxtb	r3, r3
 800074a:	089b      	lsrs	r3, r3, #2
 800074c:	33c0      	adds	r3, #192	@ 0xc0
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	589b      	ldr	r3, [r3, r2]
 8000752:	1dfa      	adds	r2, r7, #7
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	0011      	movs	r1, r2
 8000758:	2203      	movs	r2, #3
 800075a:	400a      	ands	r2, r1
 800075c:	00d2      	lsls	r2, r2, #3
 800075e:	21ff      	movs	r1, #255	@ 0xff
 8000760:	4091      	lsls	r1, r2
 8000762:	000a      	movs	r2, r1
 8000764:	43d2      	mvns	r2, r2
 8000766:	401a      	ands	r2, r3
 8000768:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	019b      	lsls	r3, r3, #6
 800076e:	22ff      	movs	r2, #255	@ 0xff
 8000770:	401a      	ands	r2, r3
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	0018      	movs	r0, r3
 8000778:	2303      	movs	r3, #3
 800077a:	4003      	ands	r3, r0
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000780:	481f      	ldr	r0, [pc, #124]	@ (8000800 <__NVIC_SetPriority+0xd4>)
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b25b      	sxtb	r3, r3
 8000788:	089b      	lsrs	r3, r3, #2
 800078a:	430a      	orrs	r2, r1
 800078c:	33c0      	adds	r3, #192	@ 0xc0
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000792:	e031      	b.n	80007f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000794:	4a1b      	ldr	r2, [pc, #108]	@ (8000804 <__NVIC_SetPriority+0xd8>)
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	0019      	movs	r1, r3
 800079c:	230f      	movs	r3, #15
 800079e:	400b      	ands	r3, r1
 80007a0:	3b08      	subs	r3, #8
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	3306      	adds	r3, #6
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	18d3      	adds	r3, r2, r3
 80007aa:	3304      	adds	r3, #4
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	1dfa      	adds	r2, r7, #7
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	0011      	movs	r1, r2
 80007b4:	2203      	movs	r2, #3
 80007b6:	400a      	ands	r2, r1
 80007b8:	00d2      	lsls	r2, r2, #3
 80007ba:	21ff      	movs	r1, #255	@ 0xff
 80007bc:	4091      	lsls	r1, r2
 80007be:	000a      	movs	r2, r1
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	401a      	ands	r2, r3
 80007c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	019b      	lsls	r3, r3, #6
 80007ca:	22ff      	movs	r2, #255	@ 0xff
 80007cc:	401a      	ands	r2, r3
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0018      	movs	r0, r3
 80007d4:	2303      	movs	r3, #3
 80007d6:	4003      	ands	r3, r0
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007dc:	4809      	ldr	r0, [pc, #36]	@ (8000804 <__NVIC_SetPriority+0xd8>)
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	001c      	movs	r4, r3
 80007e4:	230f      	movs	r3, #15
 80007e6:	4023      	ands	r3, r4
 80007e8:	3b08      	subs	r3, #8
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	430a      	orrs	r2, r1
 80007ee:	3306      	adds	r3, #6
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	18c3      	adds	r3, r0, r3
 80007f4:	3304      	adds	r3, #4
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b003      	add	sp, #12
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	e000e100 	.word	0xe000e100
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	045b      	lsls	r3, r3, #17
 8000818:	429a      	cmp	r2, r3
 800081a:	d301      	bcc.n	8000820 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081c:	2301      	movs	r3, #1
 800081e:	e010      	b.n	8000842 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <SysTick_Config+0x44>)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	3a01      	subs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000828:	2301      	movs	r3, #1
 800082a:	425b      	negs	r3, r3
 800082c:	2103      	movs	r1, #3
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff ff7c 	bl	800072c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <SysTick_Config+0x44>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	@ (800084c <SysTick_Config+0x44>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	0018      	movs	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	210f      	movs	r1, #15
 800085c:	187b      	adds	r3, r7, r1
 800085e:	1c02      	adds	r2, r0, #0
 8000860:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	187b      	adds	r3, r7, r1
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b25b      	sxtb	r3, r3
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff ff5d 	bl	800072c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	0002      	movs	r2, r0
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ff33 	bl	80006f8 <__NVIC_EnableIRQ>
}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ffaf 	bl	8000808 <SysTick_Config>
 80008aa:	0003      	movs	r3, r0
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2221      	movs	r2, #33	@ 0x21
 80008c0:	5c9b      	ldrb	r3, [r3, r2]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d008      	beq.n	80008da <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2204      	movs	r2, #4
 80008cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2220      	movs	r2, #32
 80008d2:	2100      	movs	r1, #0
 80008d4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e020      	b.n	800091c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	210e      	movs	r1, #14
 80008e6:	438a      	bics	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2101      	movs	r1, #1
 80008f6:	438a      	bics	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000902:	2101      	movs	r1, #1
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2221      	movs	r2, #33	@ 0x21
 800090e:	2101      	movs	r1, #1
 8000910:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2220      	movs	r2, #32
 8000916:	2100      	movs	r1, #0
 8000918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}

08000924 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800092c:	210f      	movs	r1, #15
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2221      	movs	r2, #33	@ 0x21
 8000938:	5c9b      	ldrb	r3, [r3, r2]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b02      	cmp	r3, #2
 800093e:	d006      	beq.n	800094e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2204      	movs	r2, #4
 8000944:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e028      	b.n	80009a0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	210e      	movs	r1, #14
 800095a:	438a      	bics	r2, r1
 800095c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2101      	movs	r1, #1
 800096a:	438a      	bics	r2, r1
 800096c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000976:	2101      	movs	r1, #1
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2221      	movs	r2, #33	@ 0x21
 8000982:	2101      	movs	r1, #1
 8000984:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2220      	movs	r2, #32
 800098a:	2100      	movs	r1, #0
 800098c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	0010      	movs	r0, r2
 800099e:	4798      	blx	r3
    }
  }
  return status;
 80009a0:	230f      	movs	r3, #15
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	781b      	ldrb	r3, [r3, #0]
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	e155      	b.n	8000c6c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2101      	movs	r1, #1
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4091      	lsls	r1, r2
 80009ca:	000a      	movs	r2, r1
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d100      	bne.n	80009d8 <HAL_GPIO_Init+0x28>
 80009d6:	e146      	b.n	8000c66 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2203      	movs	r2, #3
 80009de:	4013      	ands	r3, r2
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d005      	beq.n	80009f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2203      	movs	r2, #3
 80009ea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d130      	bne.n	8000a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2203      	movs	r2, #3
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	43da      	mvns	r2, r3
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	409a      	lsls	r2, r3
 8000a12:	0013      	movs	r3, r2
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a26:	2201      	movs	r2, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	091b      	lsrs	r3, r3, #4
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2203      	movs	r2, #3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d017      	beq.n	8000a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2203      	movs	r2, #3
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d123      	bne.n	8000ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	08da      	lsrs	r2, r3, #3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3208      	adds	r2, #8
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	58d3      	ldr	r3, [r2, r3]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2207      	movs	r2, #7
 8000aac:	4013      	ands	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2107      	movs	r1, #7
 8000ac6:	400b      	ands	r3, r1
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	08da      	lsrs	r2, r3, #3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	0092      	lsls	r2, r2, #2
 8000ade:	6939      	ldr	r1, [r7, #16]
 8000ae0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	43da      	mvns	r2, r3
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2203      	movs	r2, #3
 8000b00:	401a      	ands	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	23c0      	movs	r3, #192	@ 0xc0
 8000b1c:	029b      	lsls	r3, r3, #10
 8000b1e:	4013      	ands	r3, r2
 8000b20:	d100      	bne.n	8000b24 <HAL_GPIO_Init+0x174>
 8000b22:	e0a0      	b.n	8000c66 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b57      	ldr	r3, [pc, #348]	@ (8000c84 <HAL_GPIO_Init+0x2d4>)
 8000b26:	699a      	ldr	r2, [r3, #24]
 8000b28:	4b56      	ldr	r3, [pc, #344]	@ (8000c84 <HAL_GPIO_Init+0x2d4>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	619a      	str	r2, [r3, #24]
 8000b30:	4b54      	ldr	r3, [pc, #336]	@ (8000c84 <HAL_GPIO_Init+0x2d4>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	2201      	movs	r2, #1
 8000b36:	4013      	ands	r3, r2
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b3c:	4a52      	ldr	r2, [pc, #328]	@ (8000c88 <HAL_GPIO_Init+0x2d8>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3302      	adds	r3, #2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	589b      	ldr	r3, [r3, r2]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	4013      	ands	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	220f      	movs	r2, #15
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	2390      	movs	r3, #144	@ 0x90
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d019      	beq.n	8000b9e <HAL_GPIO_Init+0x1ee>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a47      	ldr	r2, [pc, #284]	@ (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0x1ea>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a46      	ldr	r2, [pc, #280]	@ (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d00d      	beq.n	8000b96 <HAL_GPIO_Init+0x1e6>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a45      	ldr	r2, [pc, #276]	@ (8000c94 <HAL_GPIO_Init+0x2e4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d007      	beq.n	8000b92 <HAL_GPIO_Init+0x1e2>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a44      	ldr	r2, [pc, #272]	@ (8000c98 <HAL_GPIO_Init+0x2e8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_GPIO_Init+0x1de>
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	e008      	b.n	8000ba0 <HAL_GPIO_Init+0x1f0>
 8000b8e:	2305      	movs	r3, #5
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x1f0>
 8000b92:	2303      	movs	r3, #3
 8000b94:	e004      	b.n	8000ba0 <HAL_GPIO_Init+0x1f0>
 8000b96:	2302      	movs	r3, #2
 8000b98:	e002      	b.n	8000ba0 <HAL_GPIO_Init+0x1f0>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <HAL_GPIO_Init+0x1f0>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	0092      	lsls	r2, r2, #2
 8000ba8:	4093      	lsls	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb0:	4935      	ldr	r1, [pc, #212]	@ (8000c88 <HAL_GPIO_Init+0x2d8>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bbe:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	2380      	movs	r3, #128	@ 0x80
 8000bd4:	035b      	lsls	r3, r3, #13
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	039b      	lsls	r3, r3, #14
 8000c00:	4013      	ands	r3, r2
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0c:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c12:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	029b      	lsls	r3, r3, #10
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43da      	mvns	r2, r3
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	4013      	ands	r3, r2
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_GPIO_Init+0x2ec>)
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	40da      	lsrs	r2, r3
 8000c74:	1e13      	subs	r3, r2, #0
 8000c76:	d000      	beq.n	8000c7a <HAL_GPIO_Init+0x2ca>
 8000c78:	e6a2      	b.n	80009c0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b006      	add	sp, #24
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	48000800 	.word	0x48000800
 8000c94:	48000c00 	.word	0x48000c00
 8000c98:	48001000 	.word	0x48001000
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f000 fb76 	bl	80013a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d100      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x20>
 8000cbe:	e08e      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cc0:	4bc5      	ldr	r3, [pc, #788]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d00e      	beq.n	8000cea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	4bc2      	ldr	r3, [pc, #776]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d117      	bne.n	8000d08 <HAL_RCC_OscConfig+0x68>
 8000cd8:	4bbf      	ldr	r3, [pc, #764]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	23c0      	movs	r3, #192	@ 0xc0
 8000cde:	025b      	lsls	r3, r3, #9
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	2380      	movs	r3, #128	@ 0x80
 8000ce4:	025b      	lsls	r3, r3, #9
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d10e      	bne.n	8000d08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cea:	4bbb      	ldr	r3, [pc, #748]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	2380      	movs	r3, #128	@ 0x80
 8000cf0:	029b      	lsls	r3, r3, #10
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d100      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x58>
 8000cf6:	e071      	b.n	8000ddc <HAL_RCC_OscConfig+0x13c>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d000      	beq.n	8000d02 <HAL_RCC_OscConfig+0x62>
 8000d00:	e06c      	b.n	8000ddc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f000 fb4c 	bl	80013a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d107      	bne.n	8000d20 <HAL_RCC_OscConfig+0x80>
 8000d10:	4bb1      	ldr	r3, [pc, #708]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4bb0      	ldr	r3, [pc, #704]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d16:	2180      	movs	r1, #128	@ 0x80
 8000d18:	0249      	lsls	r1, r1, #9
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e02f      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10c      	bne.n	8000d42 <HAL_RCC_OscConfig+0xa2>
 8000d28:	4bab      	ldr	r3, [pc, #684]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4baa      	ldr	r3, [pc, #680]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d2e:	49ab      	ldr	r1, [pc, #684]	@ (8000fdc <HAL_RCC_OscConfig+0x33c>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	4ba8      	ldr	r3, [pc, #672]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4ba7      	ldr	r3, [pc, #668]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d3a:	49a9      	ldr	r1, [pc, #676]	@ (8000fe0 <HAL_RCC_OscConfig+0x340>)
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e01e      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d10e      	bne.n	8000d68 <HAL_RCC_OscConfig+0xc8>
 8000d4a:	4ba3      	ldr	r3, [pc, #652]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4ba2      	ldr	r3, [pc, #648]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d50:	2180      	movs	r1, #128	@ 0x80
 8000d52:	02c9      	lsls	r1, r1, #11
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	4b9f      	ldr	r3, [pc, #636]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	2180      	movs	r1, #128	@ 0x80
 8000d60:	0249      	lsls	r1, r1, #9
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_RCC_OscConfig+0xe0>
 8000d68:	4b9b      	ldr	r3, [pc, #620]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b9a      	ldr	r3, [pc, #616]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d6e:	499b      	ldr	r1, [pc, #620]	@ (8000fdc <HAL_RCC_OscConfig+0x33c>)
 8000d70:	400a      	ands	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	4b98      	ldr	r3, [pc, #608]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b97      	ldr	r3, [pc, #604]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000d7a:	4999      	ldr	r1, [pc, #612]	@ (8000fe0 <HAL_RCC_OscConfig+0x340>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d014      	beq.n	8000db2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fc88 	bl	800069c <HAL_GetTick>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d92:	f7ff fc83 	bl	800069c <HAL_GetTick>
 8000d96:	0002      	movs	r2, r0
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b64      	cmp	r3, #100	@ 0x64
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e2fd      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da4:	4b8c      	ldr	r3, [pc, #560]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	029b      	lsls	r3, r3, #10
 8000dac:	4013      	ands	r3, r2
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0xf2>
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db2:	f7ff fc73 	bl	800069c <HAL_GetTick>
 8000db6:	0003      	movs	r3, r0
 8000db8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fc6e 	bl	800069c <HAL_GetTick>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	@ 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e2e8      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	4b82      	ldr	r3, [pc, #520]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	2380      	movs	r3, #128	@ 0x80
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x11c>
 8000dda:	e000      	b.n	8000dde <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ddc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d100      	bne.n	8000dea <HAL_RCC_OscConfig+0x14a>
 8000de8:	e06c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dea:	4b7b      	ldr	r3, [pc, #492]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	220c      	movs	r2, #12
 8000df0:	4013      	ands	r3, r2
 8000df2:	d00e      	beq.n	8000e12 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000df4:	4b78      	ldr	r3, [pc, #480]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	220c      	movs	r2, #12
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d11f      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1a0>
 8000e00:	4b75      	ldr	r3, [pc, #468]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	23c0      	movs	r3, #192	@ 0xc0
 8000e06:	025b      	lsls	r3, r3, #9
 8000e08:	401a      	ands	r2, r3
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d116      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e12:	4b71      	ldr	r3, [pc, #452]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d005      	beq.n	8000e28 <HAL_RCC_OscConfig+0x188>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d001      	beq.n	8000e28 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e2bb      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e28:	4b6b      	ldr	r3, [pc, #428]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	22f8      	movs	r2, #248	@ 0xf8
 8000e2e:	4393      	bics	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	00da      	lsls	r2, r3, #3
 8000e38:	4b67      	ldr	r3, [pc, #412]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	e041      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d024      	beq.n	8000e92 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e48:	4b63      	ldr	r3, [pc, #396]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b62      	ldr	r3, [pc, #392]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc22 	bl	800069c <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fc1d 	bl	800069c <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e297      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	4b59      	ldr	r3, [pc, #356]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2202      	movs	r2, #2
 8000e76:	4013      	ands	r3, r2
 8000e78:	d0f1      	beq.n	8000e5e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7a:	4b57      	ldr	r3, [pc, #348]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	22f8      	movs	r2, #248	@ 0xf8
 8000e80:	4393      	bics	r3, r2
 8000e82:	0019      	movs	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	00da      	lsls	r2, r3, #3
 8000e8a:	4b53      	ldr	r3, [pc, #332]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e018      	b.n	8000ec4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e92:	4b51      	ldr	r3, [pc, #324]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b50      	ldr	r3, [pc, #320]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fbfd 	bl	800069c <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fbf8 	bl	800069c <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e272      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	4b47      	ldr	r3, [pc, #284]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d1f1      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d036      	beq.n	8000f3c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d019      	beq.n	8000f0a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b40      	ldr	r3, [pc, #256]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eda:	4b3f      	ldr	r3, [pc, #252]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fbdb 	bl	800069c <HAL_GetTick>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fbd6 	bl	800069c <HAL_GetTick>
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e250      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	d0f1      	beq.n	8000eec <HAL_RCC_OscConfig+0x24c>
 8000f08:	e018      	b.n	8000f3c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0a:	4b33      	ldr	r3, [pc, #204]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f0e:	4b32      	ldr	r3, [pc, #200]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	438a      	bics	r2, r1
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fbc1 	bl	800069c <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fbbc 	bl	800069c <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e236      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f32:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d1f1      	bne.n	8000f20 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2204      	movs	r2, #4
 8000f42:	4013      	ands	r3, r2
 8000f44:	d100      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2a8>
 8000f46:	e0b5      	b.n	80010b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f48:	201f      	movs	r0, #31
 8000f4a:	183b      	adds	r3, r7, r0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f50:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f52:	69da      	ldr	r2, [r3, #28]
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	055b      	lsls	r3, r3, #21
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d110      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0549      	lsls	r1, r1, #21
 8000f66:	430a      	orrs	r2, r1
 8000f68:	61da      	str	r2, [r3, #28]
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	055b      	lsls	r3, r3, #21
 8000f72:	4013      	ands	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f78:	183b      	adds	r3, r7, r0
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4013      	ands	r3, r2
 8000f88:	d11a      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	0049      	lsls	r1, r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fb80 	bl	800069c <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fb7b 	bl	800069c <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	@ 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e1f5      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_RCC_OscConfig+0x344>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10f      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x348>
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	4b02      	ldr	r3, [pc, #8]	@ (8000fd8 <HAL_RCC_OscConfig+0x338>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	e036      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	fffeffff 	.word	0xfffeffff
 8000fe0:	fffbffff 	.word	0xfffbffff
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <HAL_RCC_OscConfig+0x36a>
 8000ff0:	4bca      	ldr	r3, [pc, #808]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ff2:	6a1a      	ldr	r2, [r3, #32]
 8000ff4:	4bc9      	ldr	r3, [pc, #804]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	621a      	str	r2, [r3, #32]
 8000ffc:	4bc7      	ldr	r3, [pc, #796]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	4bc6      	ldr	r3, [pc, #792]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001002:	2104      	movs	r1, #4
 8001004:	438a      	bics	r2, r1
 8001006:	621a      	str	r2, [r3, #32]
 8001008:	e01c      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b05      	cmp	r3, #5
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x38c>
 8001012:	4bc2      	ldr	r3, [pc, #776]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	4bc1      	ldr	r3, [pc, #772]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001018:	2104      	movs	r1, #4
 800101a:	430a      	orrs	r2, r1
 800101c:	621a      	str	r2, [r3, #32]
 800101e:	4bbf      	ldr	r3, [pc, #764]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4bbe      	ldr	r3, [pc, #760]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001024:	2101      	movs	r1, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0x3a4>
 800102c:	4bbb      	ldr	r3, [pc, #748]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800102e:	6a1a      	ldr	r2, [r3, #32]
 8001030:	4bba      	ldr	r3, [pc, #744]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001032:	2101      	movs	r1, #1
 8001034:	438a      	bics	r2, r1
 8001036:	621a      	str	r2, [r3, #32]
 8001038:	4bb8      	ldr	r3, [pc, #736]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4bb7      	ldr	r3, [pc, #732]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800103e:	2104      	movs	r1, #4
 8001040:	438a      	bics	r2, r1
 8001042:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d014      	beq.n	8001076 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104c:	f7ff fb26 	bl	800069c <HAL_GetTick>
 8001050:	0003      	movs	r3, r0
 8001052:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	e009      	b.n	800106a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fb21 	bl	800069c <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4aaf      	ldr	r2, [pc, #700]	@ (8001320 <HAL_RCC_OscConfig+0x680>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e19a      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106a:	4bac      	ldr	r3, [pc, #688]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	2202      	movs	r2, #2
 8001070:	4013      	ands	r3, r2
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x3b6>
 8001074:	e013      	b.n	800109e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb11 	bl	800069c <HAL_GetTick>
 800107a:	0003      	movs	r3, r0
 800107c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107e:	e009      	b.n	8001094 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001080:	f7ff fb0c 	bl	800069c <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	4aa5      	ldr	r2, [pc, #660]	@ (8001320 <HAL_RCC_OscConfig+0x680>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e185      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4ba1      	ldr	r3, [pc, #644]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	2202      	movs	r2, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800109e:	231f      	movs	r3, #31
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a8:	4b9c      	ldr	r3, [pc, #624]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	4b9b      	ldr	r3, [pc, #620]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80010ae:	499d      	ldr	r1, [pc, #628]	@ (8001324 <HAL_RCC_OscConfig+0x684>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2210      	movs	r2, #16
 80010ba:	4013      	ands	r3, r2
 80010bc:	d063      	beq.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d12a      	bne.n	800111c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c6:	4b95      	ldr	r3, [pc, #596]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80010c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ca:	4b94      	ldr	r3, [pc, #592]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80010cc:	2104      	movs	r1, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010d2:	4b92      	ldr	r3, [pc, #584]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010d6:	4b91      	ldr	r3, [pc, #580]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fadd 	bl	800069c <HAL_GetTick>
 80010e2:	0003      	movs	r3, r0
 80010e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010e8:	f7ff fad8 	bl	800069c <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e152      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010fa:	4b88      	ldr	r3, [pc, #544]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80010fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	d0f1      	beq.n	80010e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001104:	4b85      	ldr	r3, [pc, #532]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001108:	22f8      	movs	r2, #248	@ 0xf8
 800110a:	4393      	bics	r3, r2
 800110c:	0019      	movs	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	00da      	lsls	r2, r3, #3
 8001114:	4b81      	ldr	r3, [pc, #516]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001116:	430a      	orrs	r2, r1
 8001118:	635a      	str	r2, [r3, #52]	@ 0x34
 800111a:	e034      	b.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	3305      	adds	r3, #5
 8001122:	d111      	bne.n	8001148 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001124:	4b7d      	ldr	r3, [pc, #500]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001128:	4b7c      	ldr	r3, [pc, #496]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800112a:	2104      	movs	r1, #4
 800112c:	438a      	bics	r2, r1
 800112e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001130:	4b7a      	ldr	r3, [pc, #488]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001134:	22f8      	movs	r2, #248	@ 0xf8
 8001136:	4393      	bics	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	00da      	lsls	r2, r3, #3
 8001140:	4b76      	ldr	r3, [pc, #472]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001142:	430a      	orrs	r2, r1
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34
 8001146:	e01e      	b.n	8001186 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001148:	4b74      	ldr	r3, [pc, #464]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800114a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800114c:	4b73      	ldr	r3, [pc, #460]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800114e:	2104      	movs	r1, #4
 8001150:	430a      	orrs	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001154:	4b71      	ldr	r3, [pc, #452]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001158:	4b70      	ldr	r3, [pc, #448]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800115a:	2101      	movs	r1, #1
 800115c:	438a      	bics	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001160:	f7ff fa9c 	bl	800069c <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800116a:	f7ff fa97 	bl	800069c <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e111      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800117c:	4b67      	ldr	r3, [pc, #412]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d1f1      	bne.n	800116a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2220      	movs	r2, #32
 800118c:	4013      	ands	r3, r2
 800118e:	d05c      	beq.n	800124a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001190:	4b62      	ldr	r3, [pc, #392]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	4013      	ands	r3, r2
 8001198:	2b0c      	cmp	r3, #12
 800119a:	d00e      	beq.n	80011ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800119c:	4b5f      	ldr	r3, [pc, #380]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	220c      	movs	r2, #12
 80011a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d114      	bne.n	80011d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011a8:	4b5c      	ldr	r3, [pc, #368]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	23c0      	movs	r3, #192	@ 0xc0
 80011ae:	025b      	lsls	r3, r3, #9
 80011b0:	401a      	ands	r2, r3
 80011b2:	23c0      	movs	r3, #192	@ 0xc0
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011ba:	4b58      	ldr	r3, [pc, #352]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80011bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011be:	2380      	movs	r3, #128	@ 0x80
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	4013      	ands	r3, r2
 80011c4:	d040      	beq.n	8001248 <HAL_RCC_OscConfig+0x5a8>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d03c      	beq.n	8001248 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0e6      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d01b      	beq.n	8001212 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011da:	4b50      	ldr	r3, [pc, #320]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80011dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011de:	4b4f      	ldr	r3, [pc, #316]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	0249      	lsls	r1, r1, #9
 80011e4:	430a      	orrs	r2, r1
 80011e6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fa58 	bl	800069c <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f2:	f7ff fa53 	bl	800069c <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0cd      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001204:	4b45      	ldr	r3, [pc, #276]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	029b      	lsls	r3, r3, #10
 800120c:	4013      	ands	r3, r2
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x552>
 8001210:	e01b      	b.n	800124a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001212:	4b42      	ldr	r3, [pc, #264]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001218:	4943      	ldr	r1, [pc, #268]	@ (8001328 <HAL_RCC_OscConfig+0x688>)
 800121a:	400a      	ands	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fa3d 	bl	800069c <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001228:	f7ff fa38 	bl	800069c <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e0b2      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	029b      	lsls	r3, r3, #10
 8001242:	4013      	ands	r3, r2
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x588>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001248:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <HAL_RCC_OscConfig+0x5b4>
 8001252:	e0a4      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001254:	4b31      	ldr	r3, [pc, #196]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	220c      	movs	r2, #12
 800125a:	4013      	ands	r3, r2
 800125c:	2b08      	cmp	r3, #8
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x5c2>
 8001260:	e078      	b.n	8001354 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001266:	2b02      	cmp	r3, #2
 8001268:	d14c      	bne.n	8001304 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001270:	492e      	ldr	r1, [pc, #184]	@ (800132c <HAL_RCC_OscConfig+0x68c>)
 8001272:	400a      	ands	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fa11 	bl	800069c <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff fa0c 	bl	800069c <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e086      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001292:	4b22      	ldr	r3, [pc, #136]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	@ 0x80
 8001298:	049b      	lsls	r3, r3, #18
 800129a:	4013      	ands	r3, r2
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80012a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a2:	220f      	movs	r2, #15
 80012a4:	4393      	bics	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001330 <HAL_RCC_OscConfig+0x690>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	0019      	movs	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	431a      	orrs	r2, r3
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80012d2:	2180      	movs	r1, #128	@ 0x80
 80012d4:	0449      	lsls	r1, r1, #17
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff f9df 	bl	800069c <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff f9da 	bl	800069c <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e054      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	049b      	lsls	r3, r3, #18
 80012fe:	4013      	ands	r3, r2
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x644>
 8001302:	e04c      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <HAL_RCC_OscConfig+0x67c>)
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <HAL_RCC_OscConfig+0x68c>)
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff f9c4 	bl	800069c <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x6a6>
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	40021000 	.word	0x40021000
 8001320:	00001388 	.word	0x00001388
 8001324:	efffffff 	.word	0xefffffff
 8001328:	fffeffff 	.word	0xfffeffff
 800132c:	feffffff 	.word	0xfeffffff
 8001330:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff f9b2 	bl	800069c <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e02c      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	049b      	lsls	r3, r3, #18
 800134e:	4013      	ands	r3, r2
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x694>
 8001352:	e024      	b.n	800139e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e01f      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_RCC_OscConfig+0x708>)
 8001368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	23c0      	movs	r3, #192	@ 0xc0
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001378:	429a      	cmp	r2, r3
 800137a:	d10e      	bne.n	800139a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	220f      	movs	r2, #15
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d107      	bne.n	800139a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	23f0      	movs	r3, #240	@ 0xf0
 800138e:	039b      	lsls	r3, r3, #14
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b008      	add	sp, #32
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0bf      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b61      	ldr	r3, [pc, #388]	@ (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2201      	movs	r2, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d911      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2201      	movs	r2, #1
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e0:	4b59      	ldr	r3, [pc, #356]	@ (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0a6      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2202      	movs	r2, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	d015      	beq.n	8001428 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2204      	movs	r2, #4
 8001402:	4013      	ands	r3, r2
 8001404:	d006      	beq.n	8001414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001406:	4b51      	ldr	r3, [pc, #324]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4b50      	ldr	r3, [pc, #320]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800140c:	21e0      	movs	r1, #224	@ 0xe0
 800140e:	00c9      	lsls	r1, r1, #3
 8001410:	430a      	orrs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001414:	4b4d      	ldr	r3, [pc, #308]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	22f0      	movs	r2, #240	@ 0xf0
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	4b4a      	ldr	r3, [pc, #296]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	4013      	ands	r3, r2
 8001430:	d04c      	beq.n	80014cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b44      	ldr	r3, [pc, #272]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	d120      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e07a      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	4b3e      	ldr	r3, [pc, #248]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	049b      	lsls	r3, r3, #18
 800145a:	4013      	ands	r3, r2
 800145c:	d114      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e06e      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800146a:	4b38      	ldr	r3, [pc, #224]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	029b      	lsls	r3, r3, #10
 8001472:	4013      	ands	r3, r2
 8001474:	d108      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e062      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b34      	ldr	r3, [pc, #208]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e05b      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001488:	4b30      	ldr	r3, [pc, #192]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800149c:	f7ff f8fe 	bl	800069c <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a4:	e009      	b.n	80014ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a6:	f7ff f8f9 	bl	800069c <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	4a27      	ldr	r2, [pc, #156]	@ (8001550 <HAL_RCC_ClockConfig+0x1a4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e042      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d1ec      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d211      	bcs.n	80014fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4393      	bics	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_RCC_ClockConfig+0x19c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e020      	b.n	8001540 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	d009      	beq.n	800151c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <HAL_RCC_ClockConfig+0x1a8>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800151c:	f000 f820 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8001520:	0001      	movs	r1, r0
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_RCC_ClockConfig+0x1a0>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	220f      	movs	r2, #15
 800152a:	4013      	ands	r3, r2
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_RCC_ClockConfig+0x1ac>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	000a      	movs	r2, r1
 8001532:	40da      	lsrs	r2, r3
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_RCC_ClockConfig+0x1b0>)
 8001536:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001538:	2003      	movs	r0, #3
 800153a:	f7ff f869 	bl	8000610 <HAL_InitTick>
  
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b004      	add	sp, #16
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	00001388 	.word	0x00001388
 8001554:	fffff8ff 	.word	0xfffff8ff
 8001558:	08002e94 	.word	0x08002e94
 800155c:	20000014 	.word	0x20000014

08001560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800157a:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <HAL_RCC_GetSysClockFreq+0xd0>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	220c      	movs	r2, #12
 8001584:	4013      	ands	r3, r2
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d046      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0xb8>
 800158a:	d848      	bhi.n	800161e <HAL_RCC_GetSysClockFreq+0xbe>
 800158c:	2b04      	cmp	r3, #4
 800158e:	d002      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x36>
 8001590:	2b08      	cmp	r3, #8
 8001592:	d003      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x3c>
 8001594:	e043      	b.n	800161e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001596:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001598:	613b      	str	r3, [r7, #16]
      break;
 800159a:	e043      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	0c9b      	lsrs	r3, r3, #18
 80015a0:	220f      	movs	r2, #15
 80015a2:	4013      	ands	r3, r2
 80015a4:	4a24      	ldr	r2, [pc, #144]	@ (8001638 <HAL_RCC_GetSysClockFreq+0xd8>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ae:	220f      	movs	r2, #15
 80015b0:	4013      	ands	r3, r2
 80015b2:	4a22      	ldr	r2, [pc, #136]	@ (800163c <HAL_RCC_GetSysClockFreq+0xdc>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	23c0      	movs	r3, #192	@ 0xc0
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	401a      	ands	r2, r3
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d109      	bne.n	80015dc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	481a      	ldr	r0, [pc, #104]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015cc:	f7fe fd9c 	bl	8000108 <__udivsi3>
 80015d0:	0003      	movs	r3, r0
 80015d2:	001a      	movs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4353      	muls	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e01a      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	23c0      	movs	r3, #192	@ 0xc0
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	401a      	ands	r2, r3
 80015e4:	23c0      	movs	r3, #192	@ 0xc0
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d109      	bne.n	8001600 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	4814      	ldr	r0, [pc, #80]	@ (8001640 <HAL_RCC_GetSysClockFreq+0xe0>)
 80015f0:	f7fe fd8a 	bl	8000108 <__udivsi3>
 80015f4:	0003      	movs	r3, r0
 80015f6:	001a      	movs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4353      	muls	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e008      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	480c      	ldr	r0, [pc, #48]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001604:	f7fe fd80 	bl	8000108 <__udivsi3>
 8001608:	0003      	movs	r3, r0
 800160a:	001a      	movs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4353      	muls	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	613b      	str	r3, [r7, #16]
      break;
 8001616:	e005      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_RCC_GetSysClockFreq+0xe0>)
 800161a:	613b      	str	r3, [r7, #16]
      break;
 800161c:	e002      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800161e:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001620:	613b      	str	r3, [r7, #16]
      break;
 8001622:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001624:	693b      	ldr	r3, [r7, #16]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b006      	add	sp, #24
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	007a1200 	.word	0x007a1200
 8001638:	08002eac 	.word	0x08002eac
 800163c:	08002ebc 	.word	0x08002ebc
 8001640:	02dc6c00 	.word	0x02dc6c00

08001644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001648:	4b02      	ldr	r3, [pc, #8]	@ (8001654 <HAL_RCC_GetHCLKFreq+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	20000014 	.word	0x20000014

08001658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800165c:	f7ff fff2 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001660:	0001      	movs	r1, r0
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	2207      	movs	r2, #7
 800166a:	4013      	ands	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <HAL_RCC_GetPCLK1Freq+0x28>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	40d9      	lsrs	r1, r3
 8001672:	000b      	movs	r3, r1
}    
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	40021000 	.word	0x40021000
 8001680:	08002ea4 	.word	0x08002ea4

08001684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	025b      	lsls	r3, r3, #9
 800169c:	4013      	ands	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016a0:	e08e      	b.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	2017      	movs	r0, #23
 80016a4:	183b      	adds	r3, r7, r0
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b6e      	ldr	r3, [pc, #440]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	055b      	lsls	r3, r3, #21
 80016b2:	4013      	ands	r3, r2
 80016b4:	d110      	bne.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016bc:	2180      	movs	r1, #128	@ 0x80
 80016be:	0549      	lsls	r1, r1, #21
 80016c0:	430a      	orrs	r2, r1
 80016c2:	61da      	str	r2, [r3, #28]
 80016c4:	4b67      	ldr	r3, [pc, #412]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	2380      	movs	r3, #128	@ 0x80
 80016ca:	055b      	lsls	r3, r3, #21
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	4b63      	ldr	r3, [pc, #396]	@ (8001868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4013      	ands	r3, r2
 80016e2:	d11a      	bne.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e4:	4b60      	ldr	r3, [pc, #384]	@ (8001868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	0049      	lsls	r1, r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f2:	f7fe ffd3 	bl	800069c <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	e008      	b.n	800170e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fc:	f7fe ffce 	bl	800069c <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	@ 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0a6      	b.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b56      	ldr	r3, [pc, #344]	@ (8001868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4013      	ands	r3, r2
 8001718:	d0f0      	beq.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800171a:	4b52      	ldr	r3, [pc, #328]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	23c0      	movs	r3, #192	@ 0xc0
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4013      	ands	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d034      	beq.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	23c0      	movs	r3, #192	@ 0xc0
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4013      	ands	r3, r2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d02c      	beq.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800173c:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a4a      	ldr	r2, [pc, #296]	@ (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001746:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	4b46      	ldr	r3, [pc, #280]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	0249      	lsls	r1, r1, #9
 8001750:	430a      	orrs	r2, r1
 8001752:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001754:	4b43      	ldr	r3, [pc, #268]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	4b42      	ldr	r3, [pc, #264]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800175a:	4945      	ldr	r1, [pc, #276]	@ (8001870 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800175c:	400a      	ands	r2, r1
 800175e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001760:	4b40      	ldr	r3, [pc, #256]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	4013      	ands	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7fe ff95 	bl	800069c <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	e009      	b.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7fe ff90 	bl	800069c <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	4a3c      	ldr	r2, [pc, #240]	@ (8001874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e067      	b.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	4b35      	ldr	r3, [pc, #212]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d0f0      	beq.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001796:	4b33      	ldr	r3, [pc, #204]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a34      	ldr	r2, [pc, #208]	@ (800186c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800179c:	4013      	ands	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017aa:	2317      	movs	r3, #23
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017b6:	69da      	ldr	r2, [r3, #28]
 80017b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017ba:	492f      	ldr	r1, [pc, #188]	@ (8001878 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80017bc:	400a      	ands	r2, r1
 80017be:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d009      	beq.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017ca:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	2203      	movs	r2, #3
 80017d0:	4393      	bics	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017da:	430a      	orrs	r2, r1
 80017dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d009      	beq.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	4a23      	ldr	r2, [pc, #140]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	4013      	ands	r3, r2
 8001804:	d009      	beq.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	2210      	movs	r2, #16
 800180c:	4393      	bics	r3, r2
 800180e:	0019      	movs	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001816:	430a      	orrs	r2, r1
 8001818:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	029b      	lsls	r3, r3, #10
 8001822:	4013      	ands	r3, r2
 8001824:	d009      	beq.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001826:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	2280      	movs	r2, #128	@ 0x80
 800182c:	4393      	bics	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699a      	ldr	r2, [r3, #24]
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001836:	430a      	orrs	r2, r1
 8001838:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4013      	ands	r3, r2
 8001844:	d009      	beq.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	2240      	movs	r2, #64	@ 0x40
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001856:	430a      	orrs	r2, r1
 8001858:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b006      	add	sp, #24
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
 800186c:	fffffcff 	.word	0xfffffcff
 8001870:	fffeffff 	.word	0xfffeffff
 8001874:	00001388 	.word	0x00001388
 8001878:	efffffff 	.word	0xefffffff
 800187c:	fffcffff 	.word	0xfffcffff

08001880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e044      	b.n	800191c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2278      	movs	r2, #120	@ 0x78
 800189e:	2100      	movs	r1, #0
 80018a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7fe fe1f 	bl	80004e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2224      	movs	r2, #36	@ 0x24
 80018ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2101      	movs	r1, #1
 80018bc:	438a      	bics	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 fdae 	bl	800242c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fc22 	bl	800211c <UART_SetConfig>
 80018d8:	0003      	movs	r3, r0
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e01c      	b.n	800191c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	490d      	ldr	r1, [pc, #52]	@ (8001924 <HAL_UART_Init+0xa4>)
 80018ee:	400a      	ands	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	212a      	movs	r1, #42	@ 0x2a
 80018fe:	438a      	bics	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fe3d 	bl	8002594 <UART_CheckIdleState>
 800191a:	0003      	movs	r3, r0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	ffffb7ff 	.word	0xffffb7ff

08001928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	1dbb      	adds	r3, r7, #6
 8001936:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800193c:	2b20      	cmp	r3, #32
 800193e:	d000      	beq.n	8001942 <HAL_UART_Transmit+0x1a>
 8001940:	e08c      	b.n	8001a5c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_UART_Transmit+0x28>
 8001948:	1dbb      	adds	r3, r7, #6
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e084      	b.n	8001a5e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	015b      	lsls	r3, r3, #5
 800195c:	429a      	cmp	r2, r3
 800195e:	d109      	bne.n	8001974 <HAL_UART_Transmit+0x4c>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2201      	movs	r2, #1
 800196c:	4013      	ands	r3, r2
 800196e:	d001      	beq.n	8001974 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e074      	b.n	8001a5e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2284      	movs	r2, #132	@ 0x84
 8001978:	2100      	movs	r1, #0
 800197a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2221      	movs	r2, #33	@ 0x21
 8001980:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001982:	f7fe fe8b 	bl	800069c <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1dba      	adds	r2, r7, #6
 800198e:	2150      	movs	r1, #80	@ 0x50
 8001990:	8812      	ldrh	r2, [r2, #0]
 8001992:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1dba      	adds	r2, r7, #6
 8001998:	2152      	movs	r1, #82	@ 0x52
 800199a:	8812      	ldrh	r2, [r2, #0]
 800199c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d108      	bne.n	80019bc <HAL_UART_Transmit+0x94>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d104      	bne.n	80019bc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	61bb      	str	r3, [r7, #24]
 80019ba:	e003      	b.n	80019c4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80019c4:	e02f      	b.n	8001a26 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	0013      	movs	r3, r2
 80019d0:	2200      	movs	r2, #0
 80019d2:	2180      	movs	r1, #128	@ 0x80
 80019d4:	f000 fe86 	bl	80026e4 <UART_WaitOnFlagUntilTimeout>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d004      	beq.n	80019e6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e03b      	b.n	8001a5e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10b      	bne.n	8001a04 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	881a      	ldrh	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	05d2      	lsls	r2, r2, #23
 80019f6:	0dd2      	lsrs	r2, r2, #23
 80019f8:	b292      	uxth	r2, r2
 80019fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3302      	adds	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	e007      	b.n	8001a14 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2252      	movs	r2, #82	@ 0x52
 8001a18:	5a9b      	ldrh	r3, [r3, r2]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2252      	movs	r2, #82	@ 0x52
 8001a24:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2252      	movs	r2, #82	@ 0x52
 8001a2a:	5a9b      	ldrh	r3, [r3, r2]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1c9      	bne.n	80019c6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2140      	movs	r1, #64	@ 0x40
 8001a40:	f000 fe50 	bl	80026e4 <UART_WaitOnFlagUntilTimeout>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d004      	beq.n	8001a52 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e005      	b.n	8001a5e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2220      	movs	r2, #32
 8001a56:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e000      	b.n	8001a5e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
  }
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b008      	add	sp, #32
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b088      	sub	sp, #32
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	1dbb      	adds	r3, r7, #6
 8001a72:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2280      	movs	r2, #128	@ 0x80
 8001a78:	589b      	ldr	r3, [r3, r2]
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d145      	bne.n	8001b0a <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_UART_Receive_IT+0x26>
 8001a84:	1dbb      	adds	r3, r7, #6
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e03d      	b.n	8001b0c <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d109      	bne.n	8001ab0 <HAL_UART_Receive_IT+0x4a>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d001      	beq.n	8001ab0 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e02d      	b.n	8001b0c <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d019      	beq.n	8001af8 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac8:	613b      	str	r3, [r7, #16]
  return(result);
 8001aca:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f383 8810 	msr	PRIMASK, r3
}
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	04c9      	lsls	r1, r1, #19
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f383 8810 	msr	PRIMASK, r3
}
 8001af6:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001af8:	1dbb      	adds	r3, r7, #6
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 fe5f 	bl	80027c4 <UART_Start_Receive_IT>
 8001b06:	0003      	movs	r3, r0
 8001b08:	e000      	b.n	8001b0c <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
  }
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b008      	add	sp, #32
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b0ab      	sub	sp, #172	@ 0xac
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	22a4      	movs	r2, #164	@ 0xa4
 8001b24:	18b9      	adds	r1, r7, r2
 8001b26:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	20a0      	movs	r0, #160	@ 0xa0
 8001b30:	1839      	adds	r1, r7, r0
 8001b32:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	219c      	movs	r1, #156	@ 0x9c
 8001b3c:	1879      	adds	r1, r7, r1
 8001b3e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001b40:	0011      	movs	r1, r2
 8001b42:	18bb      	adds	r3, r7, r2
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a99      	ldr	r2, [pc, #612]	@ (8001dac <HAL_UART_IRQHandler+0x298>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2298      	movs	r2, #152	@ 0x98
 8001b4c:	18bc      	adds	r4, r7, r2
 8001b4e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001b50:	18bb      	adds	r3, r7, r2
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d114      	bne.n	8001b82 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d00f      	beq.n	8001b82 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2220      	movs	r2, #32
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d00a      	beq.n	8001b82 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <HAL_UART_IRQHandler+0x62>
 8001b74:	e29e      	b.n	80020b4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	0010      	movs	r0, r2
 8001b7e:	4798      	blx	r3
      }
      return;
 8001b80:	e298      	b.n	80020b4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001b82:	2398      	movs	r3, #152	@ 0x98
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d100      	bne.n	8001b8e <HAL_UART_IRQHandler+0x7a>
 8001b8c:	e114      	b.n	8001db8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001b8e:	239c      	movs	r3, #156	@ 0x9c
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	d106      	bne.n	8001ba8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001b9a:	23a0      	movs	r3, #160	@ 0xa0
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a83      	ldr	r2, [pc, #524]	@ (8001db0 <HAL_UART_IRQHandler+0x29c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_UART_IRQHandler+0x94>
 8001ba6:	e107      	b.n	8001db8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ba8:	23a4      	movs	r3, #164	@ 0xa4
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d012      	beq.n	8001bda <HAL_UART_IRQHandler+0xc6>
 8001bb4:	23a0      	movs	r3, #160	@ 0xa0
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d00b      	beq.n	8001bda <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2284      	movs	r2, #132	@ 0x84
 8001bce:	589b      	ldr	r3, [r3, r2]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2184      	movs	r1, #132	@ 0x84
 8001bd8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001bda:	23a4      	movs	r3, #164	@ 0xa4
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d011      	beq.n	8001c0a <HAL_UART_IRQHandler+0xf6>
 8001be6:	239c      	movs	r3, #156	@ 0x9c
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d00b      	beq.n	8001c0a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2284      	movs	r2, #132	@ 0x84
 8001bfe:	589b      	ldr	r3, [r3, r2]
 8001c00:	2204      	movs	r2, #4
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2184      	movs	r1, #132	@ 0x84
 8001c08:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c0a:	23a4      	movs	r3, #164	@ 0xa4
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2204      	movs	r2, #4
 8001c12:	4013      	ands	r3, r2
 8001c14:	d011      	beq.n	8001c3a <HAL_UART_IRQHandler+0x126>
 8001c16:	239c      	movs	r3, #156	@ 0x9c
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d00b      	beq.n	8001c3a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2204      	movs	r2, #4
 8001c28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2284      	movs	r2, #132	@ 0x84
 8001c2e:	589b      	ldr	r3, [r3, r2]
 8001c30:	2202      	movs	r2, #2
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2184      	movs	r1, #132	@ 0x84
 8001c38:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001c3a:	23a4      	movs	r3, #164	@ 0xa4
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2208      	movs	r2, #8
 8001c42:	4013      	ands	r3, r2
 8001c44:	d017      	beq.n	8001c76 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c46:	23a0      	movs	r3, #160	@ 0xa0
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d105      	bne.n	8001c5e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001c52:	239c      	movs	r3, #156	@ 0x9c
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c5c:	d00b      	beq.n	8001c76 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2208      	movs	r2, #8
 8001c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2284      	movs	r2, #132	@ 0x84
 8001c6a:	589b      	ldr	r3, [r3, r2]
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2184      	movs	r1, #132	@ 0x84
 8001c74:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001c76:	23a4      	movs	r3, #164	@ 0xa4
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4013      	ands	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_UART_IRQHandler+0x198>
 8001c84:	23a0      	movs	r3, #160	@ 0xa0
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	04db      	lsls	r3, r3, #19
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d00c      	beq.n	8001cac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2284      	movs	r2, #132	@ 0x84
 8001ca0:	589b      	ldr	r3, [r3, r2]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2184      	movs	r1, #132	@ 0x84
 8001caa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2284      	movs	r2, #132	@ 0x84
 8001cb0:	589b      	ldr	r3, [r3, r2]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d100      	bne.n	8001cb8 <HAL_UART_IRQHandler+0x1a4>
 8001cb6:	e1ff      	b.n	80020b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001cb8:	23a4      	movs	r3, #164	@ 0xa4
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d00e      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cc4:	23a0      	movs	r3, #160	@ 0xa0
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d008      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	0010      	movs	r0, r2
 8001ce0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2284      	movs	r2, #132	@ 0x84
 8001ce6:	589b      	ldr	r3, [r3, r2]
 8001ce8:	2194      	movs	r1, #148	@ 0x94
 8001cea:	187a      	adds	r2, r7, r1
 8001cec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2240      	movs	r2, #64	@ 0x40
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b40      	cmp	r3, #64	@ 0x40
 8001cfa:	d004      	beq.n	8001d06 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2228      	movs	r2, #40	@ 0x28
 8001d02:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d04:	d047      	beq.n	8001d96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 fe25 	bl	8002958 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2240      	movs	r2, #64	@ 0x40
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b40      	cmp	r3, #64	@ 0x40
 8001d1a:	d137      	bne.n	8001d8c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d20:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001d22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d24:	2090      	movs	r0, #144	@ 0x90
 8001d26:	183a      	adds	r2, r7, r0
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d30:	f383 8810 	msr	PRIMASK, r3
}
 8001d34:	46c0      	nop			@ (mov r8, r8)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2140      	movs	r1, #64	@ 0x40
 8001d42:	438a      	bics	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d4e:	f383 8810 	msr	PRIMASK, r3
}
 8001d52:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <HAL_UART_IRQHandler+0x2a0>)
 8001d62:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7fe fddb 	bl	8000924 <HAL_DMA_Abort_IT>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d01a      	beq.n	8001da8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d80:	e012      	b.n	8001da8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 f9b5 	bl	80020f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d8a:	e00d      	b.n	8001da8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 f9b0 	bl	80020f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d94:	e008      	b.n	8001da8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 f9ab 	bl	80020f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2284      	movs	r2, #132	@ 0x84
 8001da2:	2100      	movs	r1, #0
 8001da4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001da6:	e187      	b.n	80020b8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	46c0      	nop			@ (mov r8, r8)
    return;
 8001daa:	e185      	b.n	80020b8 <HAL_UART_IRQHandler+0x5a4>
 8001dac:	0000080f 	.word	0x0000080f
 8001db0:	04000120 	.word	0x04000120
 8001db4:	08002a21 	.word	0x08002a21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d000      	beq.n	8001dc2 <HAL_UART_IRQHandler+0x2ae>
 8001dc0:	e139      	b.n	8002036 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001dc2:	23a4      	movs	r3, #164	@ 0xa4
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_UART_IRQHandler+0x2bc>
 8001dce:	e132      	b.n	8002036 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001dd0:	23a0      	movs	r3, #160	@ 0xa0
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d100      	bne.n	8001dde <HAL_UART_IRQHandler+0x2ca>
 8001ddc:	e12b      	b.n	8002036 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2210      	movs	r2, #16
 8001de4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2240      	movs	r2, #64	@ 0x40
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b40      	cmp	r3, #64	@ 0x40
 8001df2:	d000      	beq.n	8001df6 <HAL_UART_IRQHandler+0x2e2>
 8001df4:	e09f      	b.n	8001f36 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	217e      	movs	r1, #126	@ 0x7e
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d100      	bne.n	8001e0e <HAL_UART_IRQHandler+0x2fa>
 8001e0c:	e156      	b.n	80020bc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2258      	movs	r2, #88	@ 0x58
 8001e12:	5a9b      	ldrh	r3, [r3, r2]
 8001e14:	187a      	adds	r2, r7, r1
 8001e16:	8812      	ldrh	r2, [r2, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d300      	bcc.n	8001e1e <HAL_UART_IRQHandler+0x30a>
 8001e1c:	e14e      	b.n	80020bc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	187a      	adds	r2, r7, r1
 8001e22:	215a      	movs	r1, #90	@ 0x5a
 8001e24:	8812      	ldrh	r2, [r2, #0]
 8001e26:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d06f      	beq.n	8001f12 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e32:	f3ef 8310 	mrs	r3, PRIMASK
 8001e36:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e42:	f383 8810 	msr	PRIMASK, r3
}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	499e      	ldr	r1, [pc, #632]	@ (80020cc <HAL_UART_IRQHandler+0x5b8>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e5e:	f383 8810 	msr	PRIMASK, r3
}
 8001e62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e64:	f3ef 8310 	mrs	r3, PRIMASK
 8001e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e6e:	2301      	movs	r3, #1
 8001e70:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e74:	f383 8810 	msr	PRIMASK, r3
}
 8001e78:	46c0      	nop			@ (mov r8, r8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	438a      	bics	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e90:	f383 8810 	msr	PRIMASK, r3
}
 8001e94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e96:	f3ef 8310 	mrs	r3, PRIMASK
 8001e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8001e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ea6:	f383 8810 	msr	PRIMASK, r3
}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2140      	movs	r1, #64	@ 0x40
 8001eb8:	438a      	bics	r2, r1
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ebe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ec2:	f383 8810 	msr	PRIMASK, r3
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	2120      	movs	r1, #32
 8001ece:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eda:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8001edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ee6:	f383 8810 	msr	PRIMASK, r3
}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	438a      	bics	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f02:	f383 8810 	msr	PRIMASK, r3
}
 8001f06:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7fe fcd1 	bl	80008b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2258      	movs	r2, #88	@ 0x58
 8001f1c:	5a9a      	ldrh	r2, [r3, r2]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	215a      	movs	r1, #90	@ 0x5a
 8001f22:	5a5b      	ldrh	r3, [r3, r1]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 f8e8 	bl	8002104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f34:	e0c2      	b.n	80020bc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2258      	movs	r2, #88	@ 0x58
 8001f3a:	5a99      	ldrh	r1, [r3, r2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	225a      	movs	r2, #90	@ 0x5a
 8001f40:	5a9b      	ldrh	r3, [r3, r2]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	208e      	movs	r0, #142	@ 0x8e
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	1a8a      	subs	r2, r1, r2
 8001f4a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	225a      	movs	r2, #90	@ 0x5a
 8001f50:	5a9b      	ldrh	r3, [r3, r2]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d100      	bne.n	8001f5a <HAL_UART_IRQHandler+0x446>
 8001f58:	e0b2      	b.n	80020c0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8001f5a:	183b      	adds	r3, r7, r0
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d100      	bne.n	8001f64 <HAL_UART_IRQHandler+0x450>
 8001f62:	e0ad      	b.n	80020c0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f64:	f3ef 8310 	mrs	r3, PRIMASK
 8001f68:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f6c:	2488      	movs	r4, #136	@ 0x88
 8001f6e:	193a      	adds	r2, r7, r4
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	2301      	movs	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f383 8810 	msr	PRIMASK, r3
}
 8001f7c:	46c0      	nop			@ (mov r8, r8)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4951      	ldr	r1, [pc, #324]	@ (80020d0 <HAL_UART_IRQHandler+0x5bc>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	193b      	adds	r3, r7, r4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f383 8810 	msr	PRIMASK, r3
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001fa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fa2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa4:	2484      	movs	r4, #132	@ 0x84
 8001fa6:	193a      	adds	r2, r7, r4
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f383 8810 	msr	PRIMASK, r3
}
 8001fb4:	46c0      	nop			@ (mov r8, r8)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	438a      	bics	r2, r1
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	193b      	adds	r3, r7, r4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f383 8810 	msr	PRIMASK, r3
}
 8001fd2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2280      	movs	r2, #128	@ 0x80
 8001fd8:	2120      	movs	r1, #32
 8001fda:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ff0:	2480      	movs	r4, #128	@ 0x80
 8001ff2:	193a      	adds	r2, r7, r4
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffc:	f383 8810 	msr	PRIMASK, r3
}
 8002000:	46c0      	nop			@ (mov r8, r8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2110      	movs	r1, #16
 800200e:	438a      	bics	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	193b      	adds	r3, r7, r4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201a:	f383 8810 	msr	PRIMASK, r3
}
 800201e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002026:	183b      	adds	r3, r7, r0
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	0011      	movs	r1, r2
 800202e:	0018      	movs	r0, r3
 8002030:	f000 f868 	bl	8002104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002034:	e044      	b.n	80020c0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002036:	23a4      	movs	r3, #164	@ 0xa4
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	035b      	lsls	r3, r3, #13
 8002040:	4013      	ands	r3, r2
 8002042:	d010      	beq.n	8002066 <HAL_UART_IRQHandler+0x552>
 8002044:	239c      	movs	r3, #156	@ 0x9c
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	@ 0x80
 800204c:	03db      	lsls	r3, r3, #15
 800204e:	4013      	ands	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2280      	movs	r2, #128	@ 0x80
 8002058:	0352      	lsls	r2, r2, #13
 800205a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 fed8 	bl	8002e14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002064:	e02f      	b.n	80020c6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002066:	23a4      	movs	r3, #164	@ 0xa4
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2280      	movs	r2, #128	@ 0x80
 800206e:	4013      	ands	r3, r2
 8002070:	d00f      	beq.n	8002092 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002072:	23a0      	movs	r3, #160	@ 0xa0
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2280      	movs	r2, #128	@ 0x80
 800207a:	4013      	ands	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01e      	beq.n	80020c4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	0010      	movs	r0, r2
 800208e:	4798      	blx	r3
    }
    return;
 8002090:	e018      	b.n	80020c4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002092:	23a4      	movs	r3, #164	@ 0xa4
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2240      	movs	r2, #64	@ 0x40
 800209a:	4013      	ands	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_UART_IRQHandler+0x5b2>
 800209e:	23a0      	movs	r3, #160	@ 0xa0
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2240      	movs	r2, #64	@ 0x40
 80020a6:	4013      	ands	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fcce 	bl	8002a4e <UART_EndTransmit_IT>
    return;
 80020b2:	e008      	b.n	80020c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	e006      	b.n	80020c6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	e004      	b.n	80020c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	e002      	b.n	80020c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80020c0:	46c0      	nop			@ (mov r8, r8)
 80020c2:	e000      	b.n	80020c6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80020c4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b02b      	add	sp, #172	@ 0xac
 80020ca:	bd90      	pop	{r4, r7, pc}
 80020cc:	fffffeff 	.word	0xfffffeff
 80020d0:	fffffedf 	.word	0xfffffedf

080020d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80020ec:	46c0      	nop			@ (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	000a      	movs	r2, r1
 800210e:	1cbb      	adds	r3, r7, #2
 8002110:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002124:	231e      	movs	r3, #30
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4aaf      	ldr	r2, [pc, #700]	@ (8002408 <UART_SetConfig+0x2ec>)
 800214c:	4013      	ands	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4aaa      	ldr	r2, [pc, #680]	@ (800240c <UART_SetConfig+0x2f0>)
 8002162:	4013      	ands	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4aa1      	ldr	r2, [pc, #644]	@ (8002410 <UART_SetConfig+0x2f4>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	430a      	orrs	r2, r1
 8002196:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a9d      	ldr	r2, [pc, #628]	@ (8002414 <UART_SetConfig+0x2f8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d127      	bne.n	80021f2 <UART_SetConfig+0xd6>
 80021a2:	4b9d      	ldr	r3, [pc, #628]	@ (8002418 <UART_SetConfig+0x2fc>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	2203      	movs	r2, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d00d      	beq.n	80021ca <UART_SetConfig+0xae>
 80021ae:	d81b      	bhi.n	80021e8 <UART_SetConfig+0xcc>
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d014      	beq.n	80021de <UART_SetConfig+0xc2>
 80021b4:	d818      	bhi.n	80021e8 <UART_SetConfig+0xcc>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <UART_SetConfig+0xa4>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d00a      	beq.n	80021d4 <UART_SetConfig+0xb8>
 80021be:	e013      	b.n	80021e8 <UART_SetConfig+0xcc>
 80021c0:	231f      	movs	r3, #31
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e065      	b.n	8002296 <UART_SetConfig+0x17a>
 80021ca:	231f      	movs	r3, #31
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	2202      	movs	r2, #2
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e060      	b.n	8002296 <UART_SetConfig+0x17a>
 80021d4:	231f      	movs	r3, #31
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	2204      	movs	r2, #4
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e05b      	b.n	8002296 <UART_SetConfig+0x17a>
 80021de:	231f      	movs	r3, #31
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2208      	movs	r2, #8
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e056      	b.n	8002296 <UART_SetConfig+0x17a>
 80021e8:	231f      	movs	r3, #31
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2210      	movs	r2, #16
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e051      	b.n	8002296 <UART_SetConfig+0x17a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a89      	ldr	r2, [pc, #548]	@ (800241c <UART_SetConfig+0x300>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d134      	bne.n	8002266 <UART_SetConfig+0x14a>
 80021fc:	4b86      	ldr	r3, [pc, #536]	@ (8002418 <UART_SetConfig+0x2fc>)
 80021fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002200:	23c0      	movs	r3, #192	@ 0xc0
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	4013      	ands	r3, r2
 8002206:	22c0      	movs	r2, #192	@ 0xc0
 8002208:	0292      	lsls	r2, r2, #10
 800220a:	4293      	cmp	r3, r2
 800220c:	d017      	beq.n	800223e <UART_SetConfig+0x122>
 800220e:	22c0      	movs	r2, #192	@ 0xc0
 8002210:	0292      	lsls	r2, r2, #10
 8002212:	4293      	cmp	r3, r2
 8002214:	d822      	bhi.n	800225c <UART_SetConfig+0x140>
 8002216:	2280      	movs	r2, #128	@ 0x80
 8002218:	0292      	lsls	r2, r2, #10
 800221a:	4293      	cmp	r3, r2
 800221c:	d019      	beq.n	8002252 <UART_SetConfig+0x136>
 800221e:	2280      	movs	r2, #128	@ 0x80
 8002220:	0292      	lsls	r2, r2, #10
 8002222:	4293      	cmp	r3, r2
 8002224:	d81a      	bhi.n	800225c <UART_SetConfig+0x140>
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <UART_SetConfig+0x118>
 800222a:	2280      	movs	r2, #128	@ 0x80
 800222c:	0252      	lsls	r2, r2, #9
 800222e:	4293      	cmp	r3, r2
 8002230:	d00a      	beq.n	8002248 <UART_SetConfig+0x12c>
 8002232:	e013      	b.n	800225c <UART_SetConfig+0x140>
 8002234:	231f      	movs	r3, #31
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e02b      	b.n	8002296 <UART_SetConfig+0x17a>
 800223e:	231f      	movs	r3, #31
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	2202      	movs	r2, #2
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e026      	b.n	8002296 <UART_SetConfig+0x17a>
 8002248:	231f      	movs	r3, #31
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2204      	movs	r2, #4
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e021      	b.n	8002296 <UART_SetConfig+0x17a>
 8002252:	231f      	movs	r3, #31
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2208      	movs	r2, #8
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e01c      	b.n	8002296 <UART_SetConfig+0x17a>
 800225c:	231f      	movs	r3, #31
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2210      	movs	r2, #16
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e017      	b.n	8002296 <UART_SetConfig+0x17a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6d      	ldr	r2, [pc, #436]	@ (8002420 <UART_SetConfig+0x304>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d104      	bne.n	800227a <UART_SetConfig+0x15e>
 8002270:	231f      	movs	r3, #31
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e00d      	b.n	8002296 <UART_SetConfig+0x17a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a69      	ldr	r2, [pc, #420]	@ (8002424 <UART_SetConfig+0x308>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d104      	bne.n	800228e <UART_SetConfig+0x172>
 8002284:	231f      	movs	r3, #31
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	e003      	b.n	8002296 <UART_SetConfig+0x17a>
 800228e:	231f      	movs	r3, #31
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2210      	movs	r2, #16
 8002294:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	429a      	cmp	r2, r3
 80022a0:	d15c      	bne.n	800235c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80022a2:	231f      	movs	r3, #31
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d015      	beq.n	80022d8 <UART_SetConfig+0x1bc>
 80022ac:	dc18      	bgt.n	80022e0 <UART_SetConfig+0x1c4>
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d00d      	beq.n	80022ce <UART_SetConfig+0x1b2>
 80022b2:	dc15      	bgt.n	80022e0 <UART_SetConfig+0x1c4>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <UART_SetConfig+0x1a2>
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d005      	beq.n	80022c8 <UART_SetConfig+0x1ac>
 80022bc:	e010      	b.n	80022e0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022be:	f7ff f9cb 	bl	8001658 <HAL_RCC_GetPCLK1Freq>
 80022c2:	0003      	movs	r3, r0
 80022c4:	61bb      	str	r3, [r7, #24]
        break;
 80022c6:	e012      	b.n	80022ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022c8:	4b57      	ldr	r3, [pc, #348]	@ (8002428 <UART_SetConfig+0x30c>)
 80022ca:	61bb      	str	r3, [r7, #24]
        break;
 80022cc:	e00f      	b.n	80022ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022ce:	f7ff f947 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 80022d2:	0003      	movs	r3, r0
 80022d4:	61bb      	str	r3, [r7, #24]
        break;
 80022d6:	e00a      	b.n	80022ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	61bb      	str	r3, [r7, #24]
        break;
 80022de:	e006      	b.n	80022ee <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022e4:	231e      	movs	r3, #30
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
        break;
 80022ec:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d100      	bne.n	80022f6 <UART_SetConfig+0x1da>
 80022f4:	e07a      	b.n	80023ec <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	005a      	lsls	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	18d2      	adds	r2, r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0019      	movs	r1, r3
 8002308:	0010      	movs	r0, r2
 800230a:	f7fd fefd 	bl	8000108 <__udivsi3>
 800230e:	0003      	movs	r3, r0
 8002310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d91c      	bls.n	8002352 <UART_SetConfig+0x236>
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	025b      	lsls	r3, r3, #9
 800231e:	429a      	cmp	r2, r3
 8002320:	d217      	bcs.n	8002352 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	b29a      	uxth	r2, r3
 8002326:	200e      	movs	r0, #14
 8002328:	183b      	adds	r3, r7, r0
 800232a:	210f      	movs	r1, #15
 800232c:	438a      	bics	r2, r1
 800232e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	b29b      	uxth	r3, r3
 8002336:	2207      	movs	r2, #7
 8002338:	4013      	ands	r3, r2
 800233a:	b299      	uxth	r1, r3
 800233c:	183b      	adds	r3, r7, r0
 800233e:	183a      	adds	r2, r7, r0
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	183a      	adds	r2, r7, r0
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	e04c      	b.n	80023ec <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002352:	231e      	movs	r3, #30
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e047      	b.n	80023ec <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800235c:	231f      	movs	r3, #31
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b08      	cmp	r3, #8
 8002364:	d015      	beq.n	8002392 <UART_SetConfig+0x276>
 8002366:	dc18      	bgt.n	800239a <UART_SetConfig+0x27e>
 8002368:	2b04      	cmp	r3, #4
 800236a:	d00d      	beq.n	8002388 <UART_SetConfig+0x26c>
 800236c:	dc15      	bgt.n	800239a <UART_SetConfig+0x27e>
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <UART_SetConfig+0x25c>
 8002372:	2b02      	cmp	r3, #2
 8002374:	d005      	beq.n	8002382 <UART_SetConfig+0x266>
 8002376:	e010      	b.n	800239a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002378:	f7ff f96e 	bl	8001658 <HAL_RCC_GetPCLK1Freq>
 800237c:	0003      	movs	r3, r0
 800237e:	61bb      	str	r3, [r7, #24]
        break;
 8002380:	e012      	b.n	80023a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002382:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <UART_SetConfig+0x30c>)
 8002384:	61bb      	str	r3, [r7, #24]
        break;
 8002386:	e00f      	b.n	80023a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002388:	f7ff f8ea 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 800238c:	0003      	movs	r3, r0
 800238e:	61bb      	str	r3, [r7, #24]
        break;
 8002390:	e00a      	b.n	80023a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	61bb      	str	r3, [r7, #24]
        break;
 8002398:	e006      	b.n	80023a8 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800239e:	231e      	movs	r3, #30
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
        break;
 80023a6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01e      	beq.n	80023ec <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	085a      	lsrs	r2, r3, #1
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	18d2      	adds	r2, r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0019      	movs	r1, r3
 80023be:	0010      	movs	r0, r2
 80023c0:	f7fd fea2 	bl	8000108 <__udivsi3>
 80023c4:	0003      	movs	r3, r0
 80023c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	d90a      	bls.n	80023e4 <UART_SetConfig+0x2c8>
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	025b      	lsls	r3, r3, #9
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d205      	bcs.n	80023e4 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	e003      	b.n	80023ec <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80023e4:	231e      	movs	r3, #30
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80023f8:	231e      	movs	r3, #30
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b008      	add	sp, #32
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	efff69f3 	.word	0xefff69f3
 800240c:	ffffcfff 	.word	0xffffcfff
 8002410:	fffff4ff 	.word	0xfffff4ff
 8002414:	40013800 	.word	0x40013800
 8002418:	40021000 	.word	0x40021000
 800241c:	40004400 	.word	0x40004400
 8002420:	40004800 	.word	0x40004800
 8002424:	40004c00 	.word	0x40004c00
 8002428:	007a1200 	.word	0x007a1200

0800242c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	2208      	movs	r2, #8
 800243a:	4013      	ands	r3, r2
 800243c:	d00b      	beq.n	8002456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a4a      	ldr	r2, [pc, #296]	@ (8002570 <UART_AdvFeatureConfig+0x144>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	2201      	movs	r2, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d00b      	beq.n	8002478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a43      	ldr	r2, [pc, #268]	@ (8002574 <UART_AdvFeatureConfig+0x148>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	2202      	movs	r2, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d00b      	beq.n	800249a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a3b      	ldr	r2, [pc, #236]	@ (8002578 <UART_AdvFeatureConfig+0x14c>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	2204      	movs	r2, #4
 80024a0:	4013      	ands	r3, r2
 80024a2:	d00b      	beq.n	80024bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a34      	ldr	r2, [pc, #208]	@ (800257c <UART_AdvFeatureConfig+0x150>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	2210      	movs	r2, #16
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00b      	beq.n	80024de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002580 <UART_AdvFeatureConfig+0x154>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	2220      	movs	r2, #32
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00b      	beq.n	8002500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4a25      	ldr	r2, [pc, #148]	@ (8002584 <UART_AdvFeatureConfig+0x158>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	2240      	movs	r2, #64	@ 0x40
 8002506:	4013      	ands	r3, r2
 8002508:	d01d      	beq.n	8002546 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a1d      	ldr	r2, [pc, #116]	@ (8002588 <UART_AdvFeatureConfig+0x15c>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	035b      	lsls	r3, r3, #13
 800252a:	429a      	cmp	r2, r3
 800252c:	d10b      	bne.n	8002546 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a15      	ldr	r2, [pc, #84]	@ (800258c <UART_AdvFeatureConfig+0x160>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	2280      	movs	r2, #128	@ 0x80
 800254c:	4013      	ands	r3, r2
 800254e:	d00b      	beq.n	8002568 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <UART_AdvFeatureConfig+0x164>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]
  }
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}
 8002570:	ffff7fff 	.word	0xffff7fff
 8002574:	fffdffff 	.word	0xfffdffff
 8002578:	fffeffff 	.word	0xfffeffff
 800257c:	fffbffff 	.word	0xfffbffff
 8002580:	ffffefff 	.word	0xffffefff
 8002584:	ffffdfff 	.word	0xffffdfff
 8002588:	ffefffff 	.word	0xffefffff
 800258c:	ff9fffff 	.word	0xff9fffff
 8002590:	fff7ffff 	.word	0xfff7ffff

08002594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b092      	sub	sp, #72	@ 0x48
 8002598:	af02      	add	r7, sp, #8
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2284      	movs	r2, #132	@ 0x84
 80025a0:	2100      	movs	r1, #0
 80025a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025a4:	f7fe f87a 	bl	800069c <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2208      	movs	r2, #8
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d12c      	bne.n	8002614 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	0391      	lsls	r1, r2, #14
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4a46      	ldr	r2, [pc, #280]	@ (80026dc <UART_CheckIdleState+0x148>)
 80025c4:	9200      	str	r2, [sp, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f000 f88c 	bl	80026e4 <UART_WaitOnFlagUntilTimeout>
 80025cc:	1e03      	subs	r3, r0, #0
 80025ce:	d021      	beq.n	8002614 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d0:	f3ef 8310 	mrs	r3, PRIMASK
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025da:	2301      	movs	r3, #1
 80025dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	f383 8810 	msr	PRIMASK, r3
}
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2180      	movs	r1, #128	@ 0x80
 80025f2:	438a      	bics	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2278      	movs	r2, #120	@ 0x78
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e05f      	b.n	80026d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
 800261e:	2b04      	cmp	r3, #4
 8002620:	d146      	bne.n	80026b0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002624:	2280      	movs	r2, #128	@ 0x80
 8002626:	03d1      	lsls	r1, r2, #15
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4a2c      	ldr	r2, [pc, #176]	@ (80026dc <UART_CheckIdleState+0x148>)
 800262c:	9200      	str	r2, [sp, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	f000 f858 	bl	80026e4 <UART_WaitOnFlagUntilTimeout>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d03b      	beq.n	80026b0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002638:	f3ef 8310 	mrs	r3, PRIMASK
 800263c:	60fb      	str	r3, [r7, #12]
  return(result);
 800263e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002640:	637b      	str	r3, [r7, #52]	@ 0x34
 8002642:	2301      	movs	r3, #1
 8002644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f383 8810 	msr	PRIMASK, r3
}
 800264c:	46c0      	nop			@ (mov r8, r8)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4921      	ldr	r1, [pc, #132]	@ (80026e0 <UART_CheckIdleState+0x14c>)
 800265a:	400a      	ands	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002660:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f383 8810 	msr	PRIMASK, r3
}
 8002668:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266a:	f3ef 8310 	mrs	r3, PRIMASK
 800266e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002670:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002672:	633b      	str	r3, [r7, #48]	@ 0x30
 8002674:	2301      	movs	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f383 8810 	msr	PRIMASK, r3
}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2101      	movs	r1, #1
 800268c:	438a      	bics	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002692:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	f383 8810 	msr	PRIMASK, r3
}
 800269a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	2120      	movs	r1, #32
 80026a2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2278      	movs	r2, #120	@ 0x78
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e011      	b.n	80026d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	2120      	movs	r1, #32
 80026bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2278      	movs	r2, #120	@ 0x78
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b010      	add	sp, #64	@ 0x40
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	01ffffff 	.word	0x01ffffff
 80026e0:	fffffedf 	.word	0xfffffedf

080026e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	1dfb      	adds	r3, r7, #7
 80026f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f4:	e051      	b.n	800279a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	3301      	adds	r3, #1
 80026fa:	d04e      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fc:	f7fd ffce 	bl	800069c <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	429a      	cmp	r2, r3
 800270a:	d302      	bcc.n	8002712 <UART_WaitOnFlagUntilTimeout+0x2e>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e051      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2204      	movs	r2, #4
 800271e:	4013      	ands	r3, r2
 8002720:	d03b      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b80      	cmp	r3, #128	@ 0x80
 8002726:	d038      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b40      	cmp	r3, #64	@ 0x40
 800272c:	d035      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2208      	movs	r2, #8
 8002736:	4013      	ands	r3, r2
 8002738:	2b08      	cmp	r3, #8
 800273a:	d111      	bne.n	8002760 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2208      	movs	r2, #8
 8002742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f906 	bl	8002958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2284      	movs	r2, #132	@ 0x84
 8002750:	2108      	movs	r1, #8
 8002752:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2278      	movs	r2, #120	@ 0x78
 8002758:	2100      	movs	r1, #0
 800275a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e02c      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	401a      	ands	r2, r3
 800276c:	2380      	movs	r3, #128	@ 0x80
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	429a      	cmp	r2, r3
 8002772:	d112      	bne.n	800279a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2280      	movs	r2, #128	@ 0x80
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 f8e9 	bl	8002958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2284      	movs	r2, #132	@ 0x84
 800278a:	2120      	movs	r1, #32
 800278c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2278      	movs	r2, #120	@ 0x78
 8002792:	2100      	movs	r1, #0
 8002794:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e00f      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	4013      	ands	r3, r2
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	425a      	negs	r2, r3
 80027aa:	4153      	adcs	r3, r2
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	001a      	movs	r2, r3
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d09e      	beq.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b004      	add	sp, #16
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b090      	sub	sp, #64	@ 0x40
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	1dbb      	adds	r3, r7, #6
 80027d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1dba      	adds	r2, r7, #6
 80027dc:	2158      	movs	r1, #88	@ 0x58
 80027de:	8812      	ldrh	r2, [r2, #0]
 80027e0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1dba      	adds	r2, r7, #6
 80027e6:	215a      	movs	r1, #90	@ 0x5a
 80027e8:	8812      	ldrh	r2, [r2, #0]
 80027ea:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	015b      	lsls	r3, r3, #5
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d10d      	bne.n	800281a <UART_Start_Receive_IT+0x56>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <UART_Start_Receive_IT+0x4c>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	225c      	movs	r2, #92	@ 0x5c
 800280a:	4950      	ldr	r1, [pc, #320]	@ (800294c <UART_Start_Receive_IT+0x188>)
 800280c:	5299      	strh	r1, [r3, r2]
 800280e:	e02e      	b.n	800286e <UART_Start_Receive_IT+0xaa>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	225c      	movs	r2, #92	@ 0x5c
 8002814:	21ff      	movs	r1, #255	@ 0xff
 8002816:	5299      	strh	r1, [r3, r2]
 8002818:	e029      	b.n	800286e <UART_Start_Receive_IT+0xaa>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <UART_Start_Receive_IT+0x7a>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <UART_Start_Receive_IT+0x70>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	225c      	movs	r2, #92	@ 0x5c
 800282e:	21ff      	movs	r1, #255	@ 0xff
 8002830:	5299      	strh	r1, [r3, r2]
 8002832:	e01c      	b.n	800286e <UART_Start_Receive_IT+0xaa>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	225c      	movs	r2, #92	@ 0x5c
 8002838:	217f      	movs	r1, #127	@ 0x7f
 800283a:	5299      	strh	r1, [r3, r2]
 800283c:	e017      	b.n	800286e <UART_Start_Receive_IT+0xaa>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	055b      	lsls	r3, r3, #21
 8002846:	429a      	cmp	r2, r3
 8002848:	d10d      	bne.n	8002866 <UART_Start_Receive_IT+0xa2>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <UART_Start_Receive_IT+0x98>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	225c      	movs	r2, #92	@ 0x5c
 8002856:	217f      	movs	r1, #127	@ 0x7f
 8002858:	5299      	strh	r1, [r3, r2]
 800285a:	e008      	b.n	800286e <UART_Start_Receive_IT+0xaa>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	225c      	movs	r2, #92	@ 0x5c
 8002860:	213f      	movs	r1, #63	@ 0x3f
 8002862:	5299      	strh	r1, [r3, r2]
 8002864:	e003      	b.n	800286e <UART_Start_Receive_IT+0xaa>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	225c      	movs	r2, #92	@ 0x5c
 800286a:	2100      	movs	r1, #0
 800286c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2284      	movs	r2, #132	@ 0x84
 8002872:	2100      	movs	r1, #0
 8002874:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	2122      	movs	r1, #34	@ 0x22
 800287c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287e:	f3ef 8310 	mrs	r3, PRIMASK
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002888:	2301      	movs	r3, #1
 800288a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288e:	f383 8810 	msr	PRIMASK, r3
}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028aa:	f383 8810 	msr	PRIMASK, r3
}
 80028ae:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	015b      	lsls	r3, r3, #5
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <UART_Start_Receive_IT+0x108>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a22      	ldr	r2, [pc, #136]	@ (8002950 <UART_Start_Receive_IT+0x18c>)
 80028c8:	669a      	str	r2, [r3, #104]	@ 0x68
 80028ca:	e002      	b.n	80028d2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a21      	ldr	r2, [pc, #132]	@ (8002954 <UART_Start_Receive_IT+0x190>)
 80028d0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d019      	beq.n	800290e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028da:	f3ef 8310 	mrs	r3, PRIMASK
 80028de:	61fb      	str	r3, [r7, #28]
  return(result);
 80028e0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e4:	2301      	movs	r3, #1
 80028e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2190      	movs	r1, #144	@ 0x90
 80028fc:	0049      	lsls	r1, r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	f383 8810 	msr	PRIMASK, r3
}
 800290c:	e018      	b.n	8002940 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290e:	f3ef 8310 	mrs	r3, PRIMASK
 8002912:	613b      	str	r3, [r7, #16]
  return(result);
 8002914:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002916:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002918:	2301      	movs	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2120      	movs	r1, #32
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002936:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f383 8810 	msr	PRIMASK, r3
}
 800293e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b010      	add	sp, #64	@ 0x40
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	000001ff 	.word	0x000001ff
 8002950:	08002c5d 	.word	0x08002c5d
 8002954:	08002aa5 	.word	0x08002aa5

08002958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	@ 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002960:	f3ef 8310 	mrs	r3, PRIMASK
 8002964:	617b      	str	r3, [r7, #20]
  return(result);
 8002966:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4926      	ldr	r1, [pc, #152]	@ (8002a1c <UART_EndRxTransfer+0xc4>)
 8002982:	400a      	ands	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	623b      	str	r3, [r7, #32]
  return(result);
 8002998:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
 800299c:	2301      	movs	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	438a      	bics	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d118      	bne.n	80029fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029cc:	f3ef 8310 	mrs	r3, PRIMASK
 80029d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029d6:	2301      	movs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2110      	movs	r1, #16
 80029ee:	438a      	bics	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2280      	movs	r2, #128	@ 0x80
 8002a02:	2120      	movs	r1, #32
 8002a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b00e      	add	sp, #56	@ 0x38
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	fffffedf 	.word	0xfffffedf

08002a20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	225a      	movs	r2, #90	@ 0x5a
 8002a32:	2100      	movs	r1, #0
 8002a34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2252      	movs	r2, #82	@ 0x52
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff fb57 	bl	80020f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a56:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	2301      	movs	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2140      	movs	r1, #64	@ 0x40
 8002a78:	438a      	bics	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f383 8810 	msr	PRIMASK, r3
}
 8002a86:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff fb1c 	bl	80020d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b006      	add	sp, #24
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b094      	sub	sp, #80	@ 0x50
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002aac:	204e      	movs	r0, #78	@ 0x4e
 8002aae:	183b      	adds	r3, r7, r0
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	215c      	movs	r1, #92	@ 0x5c
 8002ab4:	5a52      	ldrh	r2, [r2, r1]
 8002ab6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2280      	movs	r2, #128	@ 0x80
 8002abc:	589b      	ldr	r3, [r3, r2]
 8002abe:	2b22      	cmp	r3, #34	@ 0x22
 8002ac0:	d000      	beq.n	8002ac4 <UART_RxISR_8BIT+0x20>
 8002ac2:	e0ba      	b.n	8002c3a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	214c      	movs	r1, #76	@ 0x4c
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8002ace:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	183b      	adds	r3, r7, r0
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b2d9      	uxtb	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	225a      	movs	r2, #90	@ 0x5a
 8002af4:	5a9b      	ldrh	r3, [r3, r2]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b299      	uxth	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	225a      	movs	r2, #90	@ 0x5a
 8002b00:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	225a      	movs	r2, #90	@ 0x5a
 8002b06:	5a9b      	ldrh	r3, [r3, r2]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d000      	beq.n	8002b10 <UART_RxISR_8BIT+0x6c>
 8002b0e:	e09c      	b.n	8002c4a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b10:	f3ef 8310 	mrs	r3, PRIMASK
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	f383 8810 	msr	PRIMASK, r3
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4948      	ldr	r1, [pc, #288]	@ (8002c54 <UART_RxISR_8BIT+0x1b0>)
 8002b32:	400a      	ands	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3c:	f383 8810 	msr	PRIMASK, r3
}
 8002b40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b42:	f3ef 8310 	mrs	r3, PRIMASK
 8002b46:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b52:	f383 8810 	msr	PRIMASK, r3
}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	438a      	bics	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6e:	f383 8810 	msr	PRIMASK, r3
}
 8002b72:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	2120      	movs	r1, #32
 8002b7a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	2380      	movs	r3, #128	@ 0x80
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	4013      	ands	r3, r2
 8002b94:	d018      	beq.n	8002bc8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b96:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b9c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f383 8810 	msr	PRIMASK, r3
}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4928      	ldr	r1, [pc, #160]	@ (8002c58 <UART_RxISR_8BIT+0x1b4>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f383 8810 	msr	PRIMASK, r3
}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d12f      	bne.n	8002c30 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bda:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bdc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f383 8810 	msr	PRIMASK, r3
}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2110      	movs	r1, #16
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	2210      	movs	r2, #16
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d103      	bne.n	8002c1e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2258      	movs	r2, #88	@ 0x58
 8002c22:	5a9a      	ldrh	r2, [r3, r2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0011      	movs	r1, r2
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff fa6b 	bl	8002104 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c2e:	e00c      	b.n	8002c4a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7ff fa56 	bl	80020e4 <HAL_UART_RxCpltCallback>
}
 8002c38:	e007      	b.n	8002c4a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2108      	movs	r1, #8
 8002c46:	430a      	orrs	r2, r1
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b014      	add	sp, #80	@ 0x50
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	fffffedf 	.word	0xfffffedf
 8002c58:	fbffffff 	.word	0xfbffffff

08002c5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b094      	sub	sp, #80	@ 0x50
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002c64:	204e      	movs	r0, #78	@ 0x4e
 8002c66:	183b      	adds	r3, r7, r0
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	215c      	movs	r1, #92	@ 0x5c
 8002c6c:	5a52      	ldrh	r2, [r2, r1]
 8002c6e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2280      	movs	r2, #128	@ 0x80
 8002c74:	589b      	ldr	r3, [r3, r2]
 8002c76:	2b22      	cmp	r3, #34	@ 0x22
 8002c78:	d000      	beq.n	8002c7c <UART_RxISR_16BIT+0x20>
 8002c7a:	e0ba      	b.n	8002df2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	214c      	movs	r1, #76	@ 0x4c
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8002c86:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	183a      	adds	r2, r7, r0
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	8812      	ldrh	r2, [r2, #0]
 8002c96:	4013      	ands	r3, r2
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca2:	1c9a      	adds	r2, r3, #2
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	225a      	movs	r2, #90	@ 0x5a
 8002cac:	5a9b      	ldrh	r3, [r3, r2]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b299      	uxth	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	225a      	movs	r2, #90	@ 0x5a
 8002cb8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	225a      	movs	r2, #90	@ 0x5a
 8002cbe:	5a9b      	ldrh	r3, [r3, r2]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d000      	beq.n	8002cc8 <UART_RxISR_16BIT+0x6c>
 8002cc6:	e09c      	b.n	8002e02 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ccc:	623b      	str	r3, [r7, #32]
  return(result);
 8002cce:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	f383 8810 	msr	PRIMASK, r3
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4948      	ldr	r1, [pc, #288]	@ (8002e0c <UART_RxISR_16BIT+0x1b0>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	f383 8810 	msr	PRIMASK, r3
}
 8002cf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d04:	2301      	movs	r3, #1
 8002d06:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0a:	f383 8810 	msr	PRIMASK, r3
}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d22:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2280      	movs	r2, #128	@ 0x80
 8002d30:	2120      	movs	r1, #32
 8002d32:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	041b      	lsls	r3, r3, #16
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	617b      	str	r3, [r7, #20]
  return(result);
 8002d54:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d58:	2301      	movs	r3, #1
 8002d5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4928      	ldr	r1, [pc, #160]	@ (8002e10 <UART_RxISR_16BIT+0x1b4>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d12f      	bne.n	8002de8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d92:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d94:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d98:	2301      	movs	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2110      	movs	r1, #16
 8002db0:	438a      	bics	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d103      	bne.n	8002dd6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2258      	movs	r2, #88	@ 0x58
 8002dda:	5a9a      	ldrh	r2, [r3, r2]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff f98f 	bl	8002104 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002de6:	e00c      	b.n	8002e02 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7ff f97a 	bl	80020e4 <HAL_UART_RxCpltCallback>
}
 8002df0:	e007      	b.n	8002e02 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2108      	movs	r1, #8
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b014      	add	sp, #80	@ 0x50
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	fffffedf 	.word	0xfffffedf
 8002e10:	fbffffff 	.word	0xfbffffff

08002e14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b002      	add	sp, #8
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <memset>:
 8002e24:	0003      	movs	r3, r0
 8002e26:	1882      	adds	r2, r0, r2
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <memset+0xa>
 8002e2c:	4770      	bx	lr
 8002e2e:	7019      	strb	r1, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	e7f9      	b.n	8002e28 <memset+0x4>

08002e34 <__libc_init_array>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	2600      	movs	r6, #0
 8002e38:	4c0c      	ldr	r4, [pc, #48]	@ (8002e6c <__libc_init_array+0x38>)
 8002e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e70 <__libc_init_array+0x3c>)
 8002e3c:	1b64      	subs	r4, r4, r5
 8002e3e:	10a4      	asrs	r4, r4, #2
 8002e40:	42a6      	cmp	r6, r4
 8002e42:	d109      	bne.n	8002e58 <__libc_init_array+0x24>
 8002e44:	2600      	movs	r6, #0
 8002e46:	f000 f819 	bl	8002e7c <_init>
 8002e4a:	4c0a      	ldr	r4, [pc, #40]	@ (8002e74 <__libc_init_array+0x40>)
 8002e4c:	4d0a      	ldr	r5, [pc, #40]	@ (8002e78 <__libc_init_array+0x44>)
 8002e4e:	1b64      	subs	r4, r4, r5
 8002e50:	10a4      	asrs	r4, r4, #2
 8002e52:	42a6      	cmp	r6, r4
 8002e54:	d105      	bne.n	8002e62 <__libc_init_array+0x2e>
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	00b3      	lsls	r3, r6, #2
 8002e5a:	58eb      	ldr	r3, [r5, r3]
 8002e5c:	4798      	blx	r3
 8002e5e:	3601      	adds	r6, #1
 8002e60:	e7ee      	b.n	8002e40 <__libc_init_array+0xc>
 8002e62:	00b3      	lsls	r3, r6, #2
 8002e64:	58eb      	ldr	r3, [r5, r3]
 8002e66:	4798      	blx	r3
 8002e68:	3601      	adds	r6, #1
 8002e6a:	e7f2      	b.n	8002e52 <__libc_init_array+0x1e>
 8002e6c:	08002ecc 	.word	0x08002ecc
 8002e70:	08002ecc 	.word	0x08002ecc
 8002e74:	08002ed0 	.word	0x08002ed0
 8002e78:	08002ecc 	.word	0x08002ecc

08002e7c <_init>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e82:	bc08      	pop	{r3}
 8002e84:	469e      	mov	lr, r3
 8002e86:	4770      	bx	lr

08002e88 <_fini>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr
