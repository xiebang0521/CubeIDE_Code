/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include "sys.h"
#include "delay.h"
#include "aht20.h"
#include "hdc1080.h"
#include "led.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
enum I2C_REG_TABLE
{
	I2C_RREG_STATUS = 0,
	I2C_RREG_FRO,
	I2C_RREG_WS,
	I2C_RREG_ADC,
	I2C_WREG_RGB,
	I2C_WREG_STEPPER_MODE,
	I2C_WREG_STEPPER_SPEED_ACCEL,
	I2C_WREG_STEPPER_RUN,
	I2C_RWREG_STEPPER_STATE, // byte1: {bit0: (0->idle, 1->busy)}}, {byte2: {bit7: (0->disable, 1->enable), bit6-0: time(s)},
	I2C_TMCU_REPORT,
	I2C_WREG_STEPPER_STOP,
	I2C_REG_SUM,
};

enum I2C_REG_BYTE
{
	I2C_RREG_STATUS_0 = 0, I2C_RREG_STATUS_1, I2C_RREG_STATUS_2, I2C_RREG_STATUS_3,
	I2C_RREG_FRO_STATE = 0,
	I2C_RREG_ADC_H = 0, I2C_RREG_ADC_L,
	I2C_WREG_RGB_STATE = 0,
	I2C_WREG_STEPPER_MODE_0 = 0, I2C_WREG_STEPPER_MODE_1,
	I2C_WREG_STEPPER_SPEED_H = 0, I2C_WREG_STEPPER_SPEED_L,
	I2C_WREG_STEPPER_ACCEL_H, I2C_WREG_STEPPER_ACCEL_L,
	I2C_WREG_STEPPER_RUN_EN_DIR = 0, I2C_WREG_STEPPER_RUN_DIST_H, I2C_WREG_STEPPER_RUN_DIST_L,
	I2C_RREG_STEPPER_STATE = 0, I2C_WREG_AUTO_DISABLE_MOTOR_0,
};

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MY_I2C_ADDR 0x01
#define MY_I2C_ADDRW (MY_I2C_ADDR<<1)
#define MY_I2C_ADDRR (MY_I2C_ADDR<<1|0x01)

#define TEST_STEPPER_RUN1 (1<<7|0<<6|6<<3|7<<0)
#define TEST_STEPPER_RUN2 (1<<7|1<<6|6<<3|7<<0)

//#define TEST_AHT20 1
#define TEST_STEPPER 1

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef I2C_TR(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
	// if (DevAddress & 0x01 = 1) is Receive else Transmit
	uint8_t tr = DevAddress & 0x01, num = 5;
	uint32_t i2c_error = 0;
	HAL_StatusTypeDef res = HAL_OK;
	char uart_send_str[64];

	do{
		if(tr){
			res = HAL_I2C_Master_Receive(hi2c, DevAddress, pData, Size, Timeout);
		}
		else{
			res = HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, Size, Timeout);
		}

		if(HAL_OK != res)
		{
			i2c_error = HAL_I2C_GetError(hi2c);
			__HAL_I2C_DISABLE(hi2c);
			sprintf(uart_send_str, "-----i2c_error %d, error:0x%x-----\r\n", tr, i2c_error);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), Timeout);
			HAL_Delay(10);
			__HAL_I2C_ENABLE(hi2c);
			HAL_Delay(10);
		}
		num--;
	}while((res!=HAL_OK) && (num));
	return res;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	char uart_send_str[64];
	uint8_t reg_addr = 0, *aht_p;
	uint8_t my_i2c_test_str[10] = {0x02, 0x02, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x09}, my_i2c_rx_str[7];
	uint8_t aht20_get_data[7];
	uint8_t led_mode = 0, stepper_mode = TEST_STEPPER_RUN1;
	uint16_t adc_value = 0;
	uint32_t ws_raw = 0, ws_mp = 0, tmcu = 0/*, hdc_th[2]*/;
	uint32_t run_num = 0, i2c_error=0, start_num = 0;
	HAL_StatusTypeDef i2c_res;
	float humidity, temperature, weight, volt;
	uint32_t colors[6] = {0xFF, 0xFF00, 0xFF0000, 0xFFFF, 0xFFFFFF, 0x0}, color=0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C2_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  led_init();
  delay_init();
  HDC_init();
  delay_ms(3000);
#if defined(TEST_AHT20)
  aht20_get_data[0] = AHT20_Init(&hi2c2);
	sprintf(uart_send_str, "status:0x%x\r\n", aht20_get_data[0]);
	HAL_UART_Transmit(&huart1, (const uint8_t *)uart_send_str, strlen(uart_send_str), 1000);
#else
  sprintf(uart_send_str, "sys_close: %d\r\n", SystemCoreClock);
  HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);

  my_i2c_rx_str[0] = 0x00;
  i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
	i2c_res |= I2C_TR(&hi2c1, MY_I2C_ADDRR, &my_i2c_rx_str[2], 4, 1000);
	if(HAL_OK == i2c_res){
		sprintf(uart_send_str, "my i2c r: 0x%x, 0x%x 0x%x 0x%x 0x%x\r\n", my_i2c_rx_str[0],
						my_i2c_rx_str[2], my_i2c_rx_str[3], my_i2c_rx_str[4], my_i2c_rx_str[5]);
		HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
	}

	my_i2c_rx_str[0] = I2C_RREG_WS;
	i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
	i2c_res |= I2C_TR(&hi2c1, MY_I2C_ADDRR, (uint8_t*)&ws_raw, 4, 1000);
	if(HAL_OK == i2c_res){
		ws_mp = ws_raw;
	}
#endif

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  	delay_ms(2000);
  	delay_ms(50);
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);

#if 0
		HDC_start();
		sprintf(uart_send_str, "HDC: T:%.2f, H:%.2f\r\n", HDC_getTemperature(), HDC_getHumitidy());

		HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		i2c_res = HAL_I2C_Master_Transmit(&hi2c1, MY_I2C_ADDRW, my_i2c_test_str, 2, 1000);
		if(HAL_OK == i2c_res)
		{
//			my_i2c_rx_str[0] = 0x02;
////			my_i2c_rx_str[1] = 0x04;
//			i2c_res = HAL_I2C_Master_Transmit(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
//			i2c_res |= HAL_I2C_Master_Receive(&hi2c1, MY_I2C_ADDRR, &my_i2c_rx_str[2], 4, 1000);
//			if(HAL_OK == i2c_res){
//				sprintf(uart_send_str, "my i2c r: 0x%x, 0x%x 0x%x 0x%x 0x%x\r\n", my_i2c_rx_str[0],
//							  my_i2c_rx_str[2], my_i2c_rx_str[3], my_i2c_rx_str[4], my_i2c_rx_str[5]);
//				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
//			}
//			else{
//				sprintf(uart_send_str, "my i2c r_error: %d\r\n", i2c_res);
//				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
//			}
//			memset(my_i2c_rx_str, 0, sizeof(my_i2c_rx_str));

			my_i2c_rx_str[0] = 0x01;
			i2c_res = HAL_I2C_Master_Transmit(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
			i2c_res |= HAL_I2C_Master_Receive(&hi2c1, MY_I2C_ADDRR, &my_i2c_rx_str[2], 1, 1000);
			if(HAL_OK == i2c_res){
				sprintf(uart_send_str, "my i2c r: 0x%x, 0x%x \r\n", my_i2c_rx_str[0], my_i2c_rx_str[2]);
				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
			}
			else{
				sprintf(uart_send_str, "my i2c r_error: %d\r\n", i2c_res);
				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
			}

			my_i2c_rx_str[0] = 0x03;
			i2c_res = HAL_I2C_Master_Transmit(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
			i2c_res |= HAL_I2C_Master_Receive(&hi2c1, MY_I2C_ADDRR, (uint8_t*)&ws_raw, 4, 1000);
			if(HAL_OK == i2c_res){
//				sprintf(uart_send_str, "my i2c r: 0x%x, 0x%x 0x%x 0x%x 0x%x\r\n", my_i2c_rx_str[0],
//								my_i2c_rx_str[2], my_i2c_rx_str[3], my_i2c_rx_str[4], my_i2c_rx_str[5]);
				weight = ((float)ws_raw-ws_mp)/387;
				sprintf(uart_send_str, "my i2c r: 0x%x, 0x%x->%.2f \r\n", my_i2c_rx_str[0], ws_raw, weight);
				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
			}
			else{
				sprintf(uart_send_str, "my i2c r_error: %d\r\n", i2c_res);
				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
			}

			memset(my_i2c_rx_str, 0, sizeof(my_i2c_rx_str));
		}
		else{
			sprintf(uart_send_str, "my i2c w_error: %d\r\n", i2c_res);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
		my_i2c_test_str[1]++;
		if(my_i2c_test_str[1]>2)
		{
			my_i2c_test_str[1] = 0;
		}

#elif defined(TEST_AHT20)

		AHT20_Start();HDC_start();
		aht_p = AHT20_getStr();
		sprintf(uart_send_str, "\r\nAHT: T:%.2f, H:%.2f\r\nHDC: T:%.2f, H:%.2f\r\n",
				AHT20_getTemperature(), AHT20_getHumitidy(), HDC_getTemperature(), HDC_getHumitidy());
		HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		HAL_Delay(2000);
//
//#elif 0
//
//		my_i2c_rx_str[0] = I2C_TMCU_REPORT;
//		i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
//		if(HAL_OK == i2c_res)
//		{
//			i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRR, &tmcu, 4, 1000);
//			if(HAL_OK == i2c_res){
//				sprintf(uart_send_str, "my i2c status: 0x%x, 0x%x\r\n", my_i2c_rx_str[0], tmcu);
//				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
//			}
//			else{
//				sprintf(uart_send_str, "r_error get status: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
//				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
//			}
//		}
//		else{
//			sprintf(uart_send_str, "w_error get status: res:%d,error:0x%x\r\n", i2c_res, i2c_error);
//			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
//			continue;
//		}
//
//#elif 1
		// get status
		my_i2c_rx_str[0] = I2C_RREG_STATUS;
		i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
		if(HAL_OK == i2c_res)
		{
			i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRR, &my_i2c_rx_str[1], 4, 1000);
			if(HAL_OK == i2c_res){
				sprintf(uart_send_str, "my i2c status: 0x%x, %x%x%x%x \r\n", my_i2c_rx_str[0],
						 	  my_i2c_rx_str[1],my_i2c_rx_str[2], my_i2c_rx_str[3], my_i2c_rx_str[4]);
				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
			}
			else{
				sprintf(uart_send_str, "r_error get status: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
			}
		}
		else{
//			i2c_error = HAL_I2C_GetError(&hi2c1);
//			__HAL_I2C_DISABLE(&hi2c1);
			if(HAL_I2C_ERROR_TIMEOUT == i2c_error)
			{
				__HAL_I2C_CLEAR_FLAG(&hi2c1, I2C_FLAG_TIMEOUT);
				sprintf(uart_send_str, "i2c_error timeout\r\n");
			}
			else{
				sprintf(uart_send_str, "w_error get status: res:%d,error:0x%x\r\n", i2c_res, i2c_error);
			}
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
//			__HAL_I2C_ENABLE(&hi2c1);
			continue;
		}
	  HAL_Delay(200);

		// get filament runout
		my_i2c_rx_str[0] = I2C_RREG_FRO;
		i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
		i2c_res |= I2C_TR(&hi2c1, MY_I2C_ADDRR, (uint8_t*)&my_i2c_rx_str[1], 1, 1000);
		if(HAL_OK == i2c_res)
		{
			sprintf(uart_send_str, "my i2c runout: 0x%x, 0x%x \r\n", my_i2c_rx_str[0],	my_i2c_rx_str[1]);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
		else{
			sprintf(uart_send_str, "error runout: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
	  HAL_Delay(200);

		// get weight
		my_i2c_rx_str[0] = I2C_RREG_WS;
		i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
		i2c_res |= I2C_TR(&hi2c1, MY_I2C_ADDRR, (uint8_t*)&ws_raw, 4, 1000);
		if(HAL_OK == i2c_res){
			weight = ((float)ws_raw-ws_mp)/387;
			sprintf(uart_send_str, "my i2c r weight: 0x%x, 0x%x->%.2f \r\n", my_i2c_rx_str[0], ws_raw, weight);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
		else{
			sprintf(uart_send_str, "error weight: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
	  HAL_Delay(200);

		// get adc
		my_i2c_rx_str[0] = I2C_RREG_ADC;
		i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
		i2c_res |= I2C_TR(&hi2c1, MY_I2C_ADDRR, (uint8_t*)&adc_value, 2, 1000);
		if(HAL_OK == i2c_res){
			volt = 3.3*adc_value/4095;
			sprintf(uart_send_str, "my i2c r adc: 0x%x, 0x%x->%d->%.2f \r\n", my_i2c_rx_str[0], adc_value, adc_value, volt);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
		else{
			sprintf(uart_send_str, "error adc: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
	  HAL_Delay(200);

		// set LED
		my_i2c_rx_str[0] = I2C_WREG_RGB;
		my_i2c_rx_str[1] = led_mode;
		i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 2, 1000);
		if(HAL_OK == i2c_res){
			sprintf(uart_send_str, "my i2c set led: 0x%x, mode:0x%x\r\n", my_i2c_rx_str[0], led_mode);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
		else{
			sprintf(uart_send_str, "error set led: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
		}
	  HAL_Delay(200);

#elif defined(TEST_STEPPER)
		// set stepper mode
	  if(tmcu<3){
	  	my_i2c_rx_str[0] = I2C_RWREG_STEPPER_STATE;
			i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 1, 1000);
			if(HAL_OK != i2c_res)
			{
				sprintf(uart_send_str, "error set stepper: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
				continue;
			}
			i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRR, my_i2c_rx_str, 1, 1000);
			if(HAL_OK != i2c_res)
			{
				sprintf(uart_send_str, "error set stepper: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
				HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
				continue;
			}
			if(!my_i2c_rx_str[0]){
		  	my_i2c_rx_str[0] = I2C_RWREG_STEPPER_STATE;
		  	my_i2c_rx_str[1] = 0;
		  	my_i2c_rx_str[2] = 1<<7 | 5;
		  	i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 3, 1000);

				my_i2c_rx_str[0] = I2C_WREG_STEPPER_MODE;
				my_i2c_rx_str[1] = stepper_mode; // 0xE2
				i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 2, 1000);
				if(HAL_OK == i2c_res){
					sprintf(uart_send_str, "my i2c set stepper: 0x%x, mode:0x%x\r\n", my_i2c_rx_str[0], stepper_mode);
					HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
				}
				else{
					sprintf(uart_send_str, "error set stepper: %d,flag:0x%x\r\n", i2c_res, hi2c1.State);
					HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
				}
				HAL_Delay(200);
				tmcu++;
				start_num = run_num;
				if(stepper_mode == TEST_STEPPER_RUN1) stepper_mode = TEST_STEPPER_RUN2;
				else stepper_mode = TEST_STEPPER_RUN1;
			}
			else{
				if((run_num - start_num) > 10){
			  	my_i2c_rx_str[0] = I2C_WREG_STEPPER_STOP;
			  	my_i2c_rx_str[1] = 0;
					i2c_res = I2C_TR(&hi2c1, MY_I2C_ADDRW, my_i2c_rx_str, 2, 1000);
					HAL_UART_Transmit(&huart1, (const uint8_t*)"stop\r\n", 6, 1000);
				}
				else
					HAL_UART_Transmit(&huart1, (const uint8_t*)"busy\r\n", 6, 1000);
			}
	  }

		led_mode++;run_num++;
		if(led_mode>=3) led_mode = 0;

//		{
			sprintf(uart_send_str, "=============== %d ===============\r\n", run_num);
			HAL_UART_Transmit(&huart1, (const uint8_t*)uart_send_str, strlen(uart_send_str), 1000);
//		}

  	delay_ms(100);
//  	delay_ms(2000);
#endif

//  	delay_ms(2000);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0xF000F3FF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.Timing = 0x20303E5D;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|RGB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : RGB_Pin */
  GPIO_InitStruct.Pin = RGB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(RGB_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
