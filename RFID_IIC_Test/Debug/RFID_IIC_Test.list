
RFID_IIC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003714  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  080037d4  080037d4  000047d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e08  08003e08  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e08  08003e08  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e08  08003e08  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000005c  08003e6c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003e6c  000051d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e12  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b4  00000000  00000000  00015e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00018750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c86  00000000  00000000  00019738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab80  00000000  00000000  0001a3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001562e  00000000  00000000  00034f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a040  00000000  00000000  0004a56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e45ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  000e45f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e7efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037bc 	.word	0x080037bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080037bc 	.word	0x080037bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000226:	4b17      	ldr	r3, [pc, #92]	@ (8000284 <MX_GPIO_Init+0x64>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b16      	ldr	r3, [pc, #88]	@ (8000284 <MX_GPIO_Init+0x64>)
 800022c:	2180      	movs	r1, #128	@ 0x80
 800022e:	03c9      	lsls	r1, r1, #15
 8000230:	430a      	orrs	r2, r1
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	4b13      	ldr	r3, [pc, #76]	@ (8000284 <MX_GPIO_Init+0x64>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2380      	movs	r3, #128	@ 0x80
 800023a:	03db      	lsls	r3, r3, #15
 800023c:	4013      	ands	r3, r2
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b10      	ldr	r3, [pc, #64]	@ (8000284 <MX_GPIO_Init+0x64>)
 8000244:	695a      	ldr	r2, [r3, #20]
 8000246:	4b0f      	ldr	r3, [pc, #60]	@ (8000284 <MX_GPIO_Init+0x64>)
 8000248:	2180      	movs	r1, #128	@ 0x80
 800024a:	0289      	lsls	r1, r1, #10
 800024c:	430a      	orrs	r2, r1
 800024e:	615a      	str	r2, [r3, #20]
 8000250:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <MX_GPIO_Init+0x64>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	2380      	movs	r3, #128	@ 0x80
 8000256:	029b      	lsls	r3, r3, #10
 8000258:	4013      	ands	r3, r2
 800025a:	60bb      	str	r3, [r7, #8]
 800025c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025e:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <MX_GPIO_Init+0x64>)
 8000260:	695a      	ldr	r2, [r3, #20]
 8000262:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <MX_GPIO_Init+0x64>)
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	02c9      	lsls	r1, r1, #11
 8000268:	430a      	orrs	r2, r1
 800026a:	615a      	str	r2, [r3, #20]
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <MX_GPIO_Init+0x64>)
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	02db      	lsls	r3, r3, #11
 8000274:	4013      	ands	r3, r2
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]

}
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b004      	add	sp, #16
 8000280:	bd80      	pop	{r7, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)
 8000284:	40021000 	.word	0x40021000

08000288 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800028c:	4b1b      	ldr	r3, [pc, #108]	@ (80002fc <MX_I2C1_Init+0x74>)
 800028e:	4a1c      	ldr	r2, [pc, #112]	@ (8000300 <MX_I2C1_Init+0x78>)
 8000290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8000292:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <MX_I2C1_Init+0x74>)
 8000294:	4a1b      	ldr	r2, [pc, #108]	@ (8000304 <MX_I2C1_Init+0x7c>)
 8000296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000298:	4b18      	ldr	r3, [pc, #96]	@ (80002fc <MX_I2C1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800029e:	4b17      	ldr	r3, [pc, #92]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a4:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002aa:	4b14      	ldr	r3, [pc, #80]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002b0:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b6:	4b11      	ldr	r3, [pc, #68]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002bc:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fb01 	bl	80018cc <HAL_I2C_Init>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002ce:	f000 f97d 	bl	80005cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002d2:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002d4:	2100      	movs	r1, #0
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 fb9e 	bl	8001a18 <HAL_I2CEx_ConfigAnalogFilter>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002e0:	f000 f974 	bl	80005cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <MX_I2C1_Init+0x74>)
 80002e6:	2100      	movs	r1, #0
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fbe1 	bl	8001ab0 <HAL_I2CEx_ConfigDigitalFilter>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002f2:	f000 f96b 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f6:	46c0      	nop			@ (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000078 	.word	0x20000078
 8000300:	40005400 	.word	0x40005400
 8000304:	10805d88 	.word	0x10805d88

08000308 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b08b      	sub	sp, #44	@ 0x2c
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000310:	2414      	movs	r4, #20
 8000312:	193b      	adds	r3, r7, r4
 8000314:	0018      	movs	r0, r3
 8000316:	2314      	movs	r3, #20
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f003 fa18 	bl	8003750 <memset>
  if(i2cHandle->Instance==I2C1)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a1c      	ldr	r2, [pc, #112]	@ (8000398 <HAL_I2C_MspInit+0x90>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d131      	bne.n	800038e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b1c      	ldr	r3, [pc, #112]	@ (800039c <HAL_I2C_MspInit+0x94>)
 800032c:	695a      	ldr	r2, [r3, #20]
 800032e:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <HAL_I2C_MspInit+0x94>)
 8000330:	2180      	movs	r1, #128	@ 0x80
 8000332:	02c9      	lsls	r1, r1, #11
 8000334:	430a      	orrs	r2, r1
 8000336:	615a      	str	r2, [r3, #20]
 8000338:	4b18      	ldr	r3, [pc, #96]	@ (800039c <HAL_I2C_MspInit+0x94>)
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	2380      	movs	r3, #128	@ 0x80
 800033e:	02db      	lsls	r3, r3, #11
 8000340:	4013      	ands	r3, r2
 8000342:	613b      	str	r3, [r7, #16]
 8000344:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000346:	0021      	movs	r1, r4
 8000348:	187b      	adds	r3, r7, r1
 800034a:	22c0      	movs	r2, #192	@ 0xc0
 800034c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2212      	movs	r2, #18
 8000352:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2203      	movs	r2, #3
 800035e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2201      	movs	r2, #1
 8000364:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	187b      	adds	r3, r7, r1
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <HAL_I2C_MspInit+0x98>)
 800036a:	0019      	movs	r1, r3
 800036c:	0010      	movs	r0, r2
 800036e:	f001 f917 	bl	80015a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <HAL_I2C_MspInit+0x94>)
 8000374:	69da      	ldr	r2, [r3, #28]
 8000376:	4b09      	ldr	r3, [pc, #36]	@ (800039c <HAL_I2C_MspInit+0x94>)
 8000378:	2180      	movs	r1, #128	@ 0x80
 800037a:	0389      	lsls	r1, r1, #14
 800037c:	430a      	orrs	r2, r1
 800037e:	61da      	str	r2, [r3, #28]
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <HAL_I2C_MspInit+0x94>)
 8000382:	69da      	ldr	r2, [r3, #28]
 8000384:	2380      	movs	r3, #128	@ 0x80
 8000386:	039b      	lsls	r3, r3, #14
 8000388:	4013      	ands	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800038e:	46c0      	nop			@ (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b00b      	add	sp, #44	@ 0x2c
 8000394:	bd90      	pop	{r4, r7, pc}
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	40005400 	.word	0x40005400
 800039c:	40021000 	.word	0x40021000
 80003a0:	48000400 	.word	0x48000400

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b099      	sub	sp, #100	@ 0x64
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// 修改密码
  Material_Data write_data;
  Material_Data read_data;

  memcpy(write_data.material_type, "PLA",sizeof("PLA"));
 80003aa:	4945      	ldr	r1, [pc, #276]	@ (80004c0 <main+0x11c>)
 80003ac:	2430      	movs	r4, #48	@ 0x30
 80003ae:	193b      	adds	r3, r7, r4
 80003b0:	2204      	movs	r2, #4
 80003b2:	0018      	movs	r0, r3
 80003b4:	f003 f9f8 	bl	80037a8 <memcpy>
  write_data.rgb[0] = 0xff;
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	22ff      	movs	r2, #255	@ 0xff
 80003bc:	725a      	strb	r2, [r3, #9]
  write_data.rgb[1] = 0xff;
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	22ff      	movs	r2, #255	@ 0xff
 80003c2:	729a      	strb	r2, [r3, #10]
  write_data.rgb[2] = 0xff;
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	22ff      	movs	r2, #255	@ 0xff
 80003c8:	72da      	strb	r2, [r3, #11]
  write_data.produced_date =1731578537;
 80003ca:	193b      	adds	r3, r7, r4
 80003cc:	4a3d      	ldr	r2, [pc, #244]	@ (80004c4 <main+0x120>)
 80003ce:	60da      	str	r2, [r3, #12]
  memcpy(write_data.batch_number, "MD00001",sizeof("MD00001"));
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	4a3d      	ldr	r2, [pc, #244]	@ (80004c8 <main+0x124>)
 80003d4:	3310      	adds	r3, #16
 80003d6:	ca03      	ldmia	r2!, {r0, r1}
 80003d8:	c303      	stmia	r3!, {r0, r1}
  write_data.hot_bed_temp_H = 100;
 80003da:	0021      	movs	r1, r4
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2264      	movs	r2, #100	@ 0x64
 80003e0:	835a      	strh	r2, [r3, #26]
  write_data.hot_bed_temp_L = 40;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2228      	movs	r2, #40	@ 0x28
 80003e6:	831a      	strh	r2, [r3, #24]
  write_data.exthead_temp_L = 150;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2296      	movs	r2, #150	@ 0x96
 80003ec:	839a      	strh	r2, [r3, #28]
  write_data.exthead_temp_H = 400;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	22c8      	movs	r2, #200	@ 0xc8
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	83da      	strh	r2, [r3, #30]
  write_data.init_weight = 2000;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	22fa      	movs	r2, #250	@ 0xfa
 80003fa:	00d2      	lsls	r2, r2, #3
 80003fc:	841a      	strh	r2, [r3, #32]
  write_data.empty_tray_weight = 150;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2296      	movs	r2, #150	@ 0x96
 8000402:	845a      	strh	r2, [r3, #34]	@ 0x22
  write_data.residual_weight = 1500;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	4a31      	ldr	r2, [pc, #196]	@ (80004cc <main+0x128>)
 8000408:	849a      	strh	r2, [r3, #36]	@ 0x24
  write_data.supplier = 0x01;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2201      	movs	r2, #1
 800040e:	84da      	strh	r2, [r3, #38]	@ 0x26
  write_data.material_diameter = 1.75;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	4a2f      	ldr	r2, [pc, #188]	@ (80004d0 <main+0x12c>)
 8000414:	629a      	str	r2, [r3, #40]	@ 0x28
  write_data.material_density = 1.23;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	4a2e      	ldr	r2, [pc, #184]	@ (80004d4 <main+0x130>)
 800041a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 ffbe 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f85c 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f7ff fefc 	bl	8000220 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000428:	f7ff ff2e 	bl	8000288 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800042c:	f000 ff0e 	bl	800124c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 8000430:	f000 fb78 	bl	8000b24 <OLED_Init>
  OLED_Clear();
 8000434:	f000 f9e0 	bl	80007f8 <OLED_Clear>

  RFID_Rc523_Config();
 8000438:	f000 fc94 	bl	8000d64 <RFID_Rc523_Config>
//	  OLED_ShowHexArray((uint8_t*)&write_data + 32, 8, 1);
//	  OLED_ShowHexArray((uint8_t*)&write_data + 40, 8, 2);
//	  HAL_Delay(5000);
//	  OLED_Clear();
//	  rfid_write_channel_data(0x02, &write_data);
	  memset(&read_data,0,sizeof(read_data));
 800043c:	003b      	movs	r3, r7
 800043e:	2230      	movs	r2, #48	@ 0x30
 8000440:	2100      	movs	r1, #0
 8000442:	0018      	movs	r0, r3
 8000444:	f003 f984 	bl	8003750 <memset>
	  rfid_read_channel_data(0x02, &read_data);
 8000448:	003b      	movs	r3, r7
 800044a:	0019      	movs	r1, r3
 800044c:	2002      	movs	r0, #2
 800044e:	f000 fdbb 	bl	8000fc8 <rfid_read_channel_data>
	  OLED_ShowHexArray((uint8_t*)&read_data , 8, 1);
 8000452:	003b      	movs	r3, r7
 8000454:	2201      	movs	r2, #1
 8000456:	2108      	movs	r1, #8
 8000458:	0018      	movs	r0, r3
 800045a:	f000 fb2f 	bl	8000abc <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 8, 8, 2);
 800045e:	003b      	movs	r3, r7
 8000460:	3308      	adds	r3, #8
 8000462:	2202      	movs	r2, #2
 8000464:	2108      	movs	r1, #8
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fb28 	bl	8000abc <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 16, 8, 3);
 800046c:	003b      	movs	r3, r7
 800046e:	3310      	adds	r3, #16
 8000470:	2203      	movs	r2, #3
 8000472:	2108      	movs	r1, #8
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fb21 	bl	8000abc <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 24, 8, 4);
 800047a:	003b      	movs	r3, r7
 800047c:	3318      	adds	r3, #24
 800047e:	2204      	movs	r2, #4
 8000480:	2108      	movs	r1, #8
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fb1a 	bl	8000abc <OLED_ShowHexArray>
	  HAL_Delay(5000);
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <main+0x134>)
 800048a:	0018      	movs	r0, r3
 800048c:	f000 ffb6 	bl	80013fc <HAL_Delay>
	  OLED_Clear();
 8000490:	f000 f9b2 	bl	80007f8 <OLED_Clear>
	  OLED_ShowHexArray((uint8_t*)&read_data + 32, 8, 1);
 8000494:	003b      	movs	r3, r7
 8000496:	3320      	adds	r3, #32
 8000498:	2201      	movs	r2, #1
 800049a:	2108      	movs	r1, #8
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fb0d 	bl	8000abc <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 40, 8, 2);
 80004a2:	003b      	movs	r3, r7
 80004a4:	3328      	adds	r3, #40	@ 0x28
 80004a6:	2202      	movs	r2, #2
 80004a8:	2108      	movs	r1, #8
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fb06 	bl	8000abc <OLED_ShowHexArray>
	  HAL_Delay(5000);
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <main+0x134>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 ffa2 	bl	80013fc <HAL_Delay>
	  OLED_Clear();
 80004b8:	f000 f99e 	bl	80007f8 <OLED_Clear>
	  memset(&read_data,0,sizeof(read_data));
 80004bc:	46c0      	nop			@ (mov r8, r8)
 80004be:	e7bd      	b.n	800043c <main+0x98>
 80004c0:	080037d4 	.word	0x080037d4
 80004c4:	6735caa9 	.word	0x6735caa9
 80004c8:	080037d8 	.word	0x080037d8
 80004cc:	000005dc 	.word	0x000005dc
 80004d0:	3fe00000 	.word	0x3fe00000
 80004d4:	3f9d70a4 	.word	0x3f9d70a4
 80004d8:	00001388 	.word	0x00001388

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b099      	sub	sp, #100	@ 0x64
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	242c      	movs	r4, #44	@ 0x2c
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0018      	movs	r0, r3
 80004e8:	2334      	movs	r3, #52	@ 0x34
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f003 f92f 	bl	8003750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	231c      	movs	r3, #28
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	0018      	movs	r0, r3
 80004f8:	2310      	movs	r3, #16
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f003 f927 	bl	8003750 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000502:	003b      	movs	r3, r7
 8000504:	0018      	movs	r0, r3
 8000506:	231c      	movs	r3, #28
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f003 f920 	bl	8003750 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	0021      	movs	r1, r4
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2202      	movs	r2, #2
 8000516:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2201      	movs	r2, #1
 800051c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2210      	movs	r2, #16
 8000522:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2280      	movs	r2, #128	@ 0x80
 800052e:	0212      	lsls	r2, r2, #8
 8000530:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0352      	lsls	r2, r2, #13
 8000538:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2200      	movs	r2, #0
 800053e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	187b      	adds	r3, r7, r1
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fb00 	bl	8001b48 <HAL_RCC_OscConfig>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800054c:	f000 f83e 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	211c      	movs	r1, #28
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2207      	movs	r2, #7
 8000556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2202      	movs	r2, #2
 800055c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2101      	movs	r1, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fe70 	bl	8002254 <HAL_RCC_ClockConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000578:	f000 f828 	bl	80005cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800057c:	003b      	movs	r3, r7
 800057e:	2221      	movs	r2, #33	@ 0x21
 8000580:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000588:	003b      	movs	r3, r7
 800058a:	2210      	movs	r2, #16
 800058c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fff5 	bl	8002580 <HAL_RCCEx_PeriphCLKConfig>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800059a:	f000 f817 	bl	80005cc <Error_Handler>
  }
}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b019      	add	sp, #100	@ 0x64
 80005a4:	bd90      	pop	{r4, r7, pc}
	...

080005a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ba:	f000 ff03 	bl	80013c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	40012c00 	.word	0x40012c00

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	e7fd      	b.n	80005d4 <Error_Handler+0x8>

080005d8 <OLED_I2C_Init>:
#define OLED_W_SCL(x) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (GPIO_PinState)(x))
#define OLED_W_SDA(x) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09a      	sub	sp, #104	@ 0x68
 80005dc:	af00      	add	r7, sp, #0
	I2C_HandleTypeDef I2cHandle;
	I2cHandle.Instance = I2C1;
 80005de:	2114      	movs	r1, #20
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	4a16      	ldr	r2, [pc, #88]	@ (800063c <OLED_I2C_Init+0x64>)
 80005e4:	601a      	str	r2, [r3, #0]
	HAL_I2C_MspInit(&I2cHandle);
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff fe8d 	bl	8000308 <HAL_I2C_MspInit>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	003b      	movs	r3, r7
 80005f0:	0018      	movs	r0, r3
 80005f2:	2314      	movs	r3, #20
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f003 f8aa 	bl	8003750 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80005fc:	003b      	movs	r3, r7
 80005fe:	22c0      	movs	r2, #192	@ 0xc0
 8000600:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000602:	003b      	movs	r3, r7
 8000604:	2211      	movs	r2, #17
 8000606:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	003b      	movs	r3, r7
 800060a:	2203      	movs	r2, #3
 800060c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	003b      	movs	r3, r7
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <OLED_I2C_Init+0x68>)
 8000612:	0019      	movs	r1, r3
 8000614:	0010      	movs	r0, r2
 8000616:	f000 ffc3 	bl	80015a0 <HAL_GPIO_Init>

	OLED_W_SCL(1);
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <OLED_I2C_Init+0x68>)
 800061c:	2201      	movs	r2, #1
 800061e:	2140      	movs	r1, #64	@ 0x40
 8000620:	0018      	movs	r0, r3
 8000622:	f001 f935 	bl	8001890 <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <OLED_I2C_Init+0x68>)
 8000628:	2201      	movs	r2, #1
 800062a:	2180      	movs	r1, #128	@ 0x80
 800062c:	0018      	movs	r0, r3
 800062e:	f001 f92f 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b01a      	add	sp, #104	@ 0x68
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	40005400 	.word	0x40005400
 8000640:	48000400 	.word	0x48000400

08000644 <OLED_I2C_Start>:
 * @brief  I2C开始
 * @param  无
 * @retval 无
 */
void OLED_I2C_Start(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <OLED_I2C_Start+0x3c>)
 800064a:	2201      	movs	r2, #1
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f91e 	bl	8001890 <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <OLED_I2C_Start+0x3c>)
 8000656:	2201      	movs	r2, #1
 8000658:	2140      	movs	r1, #64	@ 0x40
 800065a:	0018      	movs	r0, r3
 800065c:	f001 f918 	bl	8001890 <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <OLED_I2C_Start+0x3c>)
 8000662:	2200      	movs	r2, #0
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	0018      	movs	r0, r3
 8000668:	f001 f912 	bl	8001890 <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 800066c:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <OLED_I2C_Start+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f90c 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	48000400 	.word	0x48000400

08000684 <OLED_I2C_Stop>:
 * @brief  I2C停止
 * @param  无
 * @retval 无
 */
void OLED_I2C_Stop(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <OLED_I2C_Stop+0x30>)
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	0018      	movs	r0, r3
 8000690:	f001 f8fe 	bl	8001890 <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <OLED_I2C_Stop+0x30>)
 8000696:	2201      	movs	r2, #1
 8000698:	2140      	movs	r1, #64	@ 0x40
 800069a:	0018      	movs	r0, r3
 800069c:	f001 f8f8 	bl	8001890 <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <OLED_I2C_Stop+0x30>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 f8f2 	bl	8001890 <HAL_GPIO_WritePin>
}
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	48000400 	.word	0x48000400

080006b8 <OLED_I2C_SendByte>:
 * @brief  I2C发送一个字节
 * @param  Byte 要发送的一个字节
 * @retval 无
 */
void OLED_I2C_SendByte(uint8_t Byte)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0002      	movs	r2, r0
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 8; i++)
 80006c4:	230f      	movs	r3, #15
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e022      	b.n	8000714 <OLED_I2C_SendByte+0x5c>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 80006ce:	240f      	movs	r4, #15
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	411a      	asrs	r2, r3
 80006d8:	0013      	movs	r3, r2
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	1dfa      	adds	r2, r7, #7
 80006de:	7812      	ldrb	r2, [r2, #0]
 80006e0:	b252      	sxtb	r2, r2
 80006e2:	4013      	ands	r3, r2
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4815      	ldr	r0, [pc, #84]	@ (8000740 <OLED_I2C_SendByte+0x88>)
 80006ea:	001a      	movs	r2, r3
 80006ec:	2180      	movs	r1, #128	@ 0x80
 80006ee:	f001 f8cf 	bl	8001890 <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <OLED_I2C_SendByte+0x88>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	2140      	movs	r1, #64	@ 0x40
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 f8c9 	bl	8001890 <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <OLED_I2C_SendByte+0x88>)
 8000700:	2200      	movs	r2, #0
 8000702:	2140      	movs	r1, #64	@ 0x40
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f8c3 	bl	8001890 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800070a:	193b      	adds	r3, r7, r4
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	193b      	adds	r3, r7, r4
 8000710:	3201      	adds	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	230f      	movs	r3, #15
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d9d7      	bls.n	80006ce <OLED_I2C_SendByte+0x16>
	}
	OLED_W_SCL(1); // 额外的一个时钟，不处理应答信号
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <OLED_I2C_SendByte+0x88>)
 8000720:	2201      	movs	r2, #1
 8000722:	2140      	movs	r1, #64	@ 0x40
 8000724:	0018      	movs	r0, r3
 8000726:	f001 f8b3 	bl	8001890 <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <OLED_I2C_SendByte+0x88>)
 800072c:	2200      	movs	r2, #0
 800072e:	2140      	movs	r1, #64	@ 0x40
 8000730:	0018      	movs	r0, r3
 8000732:	f001 f8ad 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b005      	add	sp, #20
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	48000400 	.word	0x48000400

08000744 <OLED_WriteCommand>:
 * @brief  OLED写命令
 * @param  Command 要写入的命令
 * @retval 无
 */
void OLED_WriteCommand(uint8_t Command)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	0002      	movs	r2, r0
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	701a      	strb	r2, [r3, #0]
	OLED_I2C_Start();
 8000750:	f7ff ff78 	bl	8000644 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78); // 从机地址
 8000754:	2078      	movs	r0, #120	@ 0x78
 8000756:	f7ff ffaf 	bl	80006b8 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00); // 写命令
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffac 	bl	80006b8 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command);
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff ffa7 	bl	80006b8 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 800076a:	f7ff ff8b 	bl	8000684 <OLED_I2C_Stop>
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}

08000776 <OLED_WriteData>:
 * @brief  OLED写数据
 * @param  Data 要写入的数据
 * @retval 无
 */
void OLED_WriteData(uint8_t Data)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	0002      	movs	r2, r0
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	701a      	strb	r2, [r3, #0]
	OLED_I2C_Start();
 8000782:	f7ff ff5f 	bl	8000644 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78); // 从机地址
 8000786:	2078      	movs	r0, #120	@ 0x78
 8000788:	f7ff ff96 	bl	80006b8 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40); // 写数据
 800078c:	2040      	movs	r0, #64	@ 0x40
 800078e:	f7ff ff93 	bl	80006b8 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff ff8e 	bl	80006b8 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 800079c:	f7ff ff72 	bl	8000684 <OLED_I2C_Stop>
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <OLED_SetCursor>:
 * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
 * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
 * @retval 无
 */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	0002      	movs	r2, r0
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	1c0a      	adds	r2, r1, #0
 80007b8:	701a      	strb	r2, [r3, #0]
	OLED_WriteCommand(0xB0 | Y);				 // 设置Y位置
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2250      	movs	r2, #80	@ 0x50
 80007c0:	4252      	negs	r2, r2
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff ffbc 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4)); // 设置X位置高4位
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	091b      	lsrs	r3, r3, #4
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2210      	movs	r2, #16
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff ffb2 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));		 // 设置X位置低4位
 80007e0:	1dbb      	adds	r3, r7, #6
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220f      	movs	r2, #15
 80007e6:	4013      	ands	r3, r2
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff ffaa 	bl	8000744 <OLED_WriteCommand>
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <OLED_Clear>:
 * @brief  OLED清屏
 * @param  无
 * @retval 无
 */
void OLED_Clear(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 80007fe:	1dbb      	adds	r3, r7, #6
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e01b      	b.n	800083e <OLED_Clear+0x46>
	{
		OLED_SetCursor(j, 0);
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2100      	movs	r1, #0
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff ffcb 	bl	80007a8 <OLED_SetCursor>
		for (i = 0; i < 128; i++)
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e007      	b.n	800082a <OLED_Clear+0x32>
		{
			OLED_WriteData(0x00);
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff ffab 	bl	8000776 <OLED_WriteData>
		for (i = 0; i < 128; i++)
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	3201      	adds	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b25b      	sxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	daf2      	bge.n	800081a <OLED_Clear+0x22>
	for (j = 0; j < 8; j++)
 8000834:	1dbb      	adds	r3, r7, #6
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	1dbb      	adds	r3, r7, #6
 800083a:	3201      	adds	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	1dbb      	adds	r3, r7, #6
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b07      	cmp	r3, #7
 8000844:	d9df      	bls.n	8000806 <OLED_Clear+0xe>
		}
	}
}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b002      	add	sp, #8
 800084e:	bd80      	pop	{r7, pc}

08000850 <OLED_ShowChar>:
 * @param  Column 列位置，范围：1~16
 * @param  Char 要显示的一个字符，范围：ASCII可见字符
 * @retval 无
 */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	0004      	movs	r4, r0
 8000858:	0008      	movs	r0, r1
 800085a:	0011      	movs	r1, r2
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	1c22      	adds	r2, r4, #0
 8000860:	701a      	strb	r2, [r3, #0]
 8000862:	1dbb      	adds	r3, r7, #6
 8000864:	1c02      	adds	r2, r0, #0
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	1d7b      	adds	r3, r7, #5
 800086a:	1c0a      	adds	r2, r1, #0
 800086c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); // 设置光标位置在上半部分
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	18db      	adds	r3, r3, r3
 8000878:	b2da      	uxtb	r2, r3
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	3b01      	subs	r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	0019      	movs	r1, r3
 8000888:	0010      	movs	r0, r2
 800088a:	f7ff ff8d 	bl	80007a8 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 800088e:	230f      	movs	r3, #15
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e012      	b.n	80008be <OLED_ShowChar+0x6e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]); // 显示上半部分内容
 8000898:	1d7b      	adds	r3, r7, #5
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	3b20      	subs	r3, #32
 800089e:	001a      	movs	r2, r3
 80008a0:	240f      	movs	r4, #15
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4922      	ldr	r1, [pc, #136]	@ (8000930 <OLED_ShowChar+0xe0>)
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	188a      	adds	r2, r1, r2
 80008ac:	5cd3      	ldrb	r3, [r2, r3]
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff ff61 	bl	8000776 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	3201      	adds	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	240f      	movs	r4, #15
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b07      	cmp	r3, #7
 80008c6:	d9e7      	bls.n	8000898 <OLED_ShowChar+0x48>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); // 设置光标位置在下半部分
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	18db      	adds	r3, r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	1dbb      	adds	r3, r7, #6
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f7ff ff5e 	bl	80007a8 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e013      	b.n	800091c <OLED_ShowChar+0xcc>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]); // 显示下半部分内容
 80008f4:	1d7b      	adds	r3, r7, #5
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	3b20      	subs	r3, #32
 80008fa:	001a      	movs	r2, r3
 80008fc:	240f      	movs	r4, #15
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	3308      	adds	r3, #8
 8000904:	490a      	ldr	r1, [pc, #40]	@ (8000930 <OLED_ShowChar+0xe0>)
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	188a      	adds	r2, r1, r2
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff ff32 	bl	8000776 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8000912:	193b      	adds	r3, r7, r4
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	193b      	adds	r3, r7, r4
 8000918:	3201      	adds	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	230f      	movs	r3, #15
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b07      	cmp	r3, #7
 8000924:	d9e6      	bls.n	80008f4 <OLED_ShowChar+0xa4>
	}
}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b005      	add	sp, #20
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	080037e0 	.word	0x080037e0

08000934 <OLED_Pow>:
/**
 * @brief  OLED次方函数
 * @retval 返回值等于X的Y次方
 */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8000942:	e003      	b.n	800094c <OLED_Pow+0x18>
	{
		Result *= X;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4353      	muls	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
	while (Y--)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	603a      	str	r2, [r7, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f6      	bne.n	8000944 <OLED_Pow+0x10>
	}
	return Result;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b004      	add	sp, #16
 800095e:	bd80      	pop	{r7, pc}

08000960 <OLED_ShowNum>:
 * @param  Number 要显示的数字，范围：0~4294967295
 * @param  Length 要显示数字的长度，范围：1~10
 * @retval 无
 */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	0004      	movs	r4, r0
 8000968:	0008      	movs	r0, r1
 800096a:	603a      	str	r2, [r7, #0]
 800096c:	0019      	movs	r1, r3
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	1c22      	adds	r2, r4, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	1dbb      	adds	r3, r7, #6
 8000976:	1c02      	adds	r2, r0, #0
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	1d7b      	adds	r3, r7, #5
 800097c:	1c0a      	adds	r2, r1, #0
 800097e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < Length; i++)
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e029      	b.n	80009de <OLED_ShowNum+0x7e>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 800098a:	1dba      	adds	r2, r7, #6
 800098c:	250f      	movs	r5, #15
 800098e:	197b      	adds	r3, r7, r5
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	b2dc      	uxtb	r4, r3
 8000998:	1d7b      	adds	r3, r7, #5
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	197b      	adds	r3, r7, r5
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	3b01      	subs	r3, #1
 80009a4:	0019      	movs	r1, r3
 80009a6:	200a      	movs	r0, #10
 80009a8:	f7ff ffc4 	bl	8000934 <OLED_Pow>
 80009ac:	0003      	movs	r3, r0
 80009ae:	0019      	movs	r1, r3
 80009b0:	6838      	ldr	r0, [r7, #0]
 80009b2:	f7ff fba9 	bl	8000108 <__udivsi3>
 80009b6:	0003      	movs	r3, r0
 80009b8:	210a      	movs	r1, #10
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff fc2a 	bl	8000214 <__aeabi_uidivmod>
 80009c0:	000b      	movs	r3, r1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	3330      	adds	r3, #48	@ 0x30
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	0021      	movs	r1, r4
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff ff3e 	bl	8000850 <OLED_ShowChar>
	for (i = 0; i < Length; i++)
 80009d4:	197b      	adds	r3, r7, r5
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	197b      	adds	r3, r7, r5
 80009da:	3201      	adds	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	230f      	movs	r3, #15
 80009e0:	18fa      	adds	r2, r7, r3
 80009e2:	1d7b      	adds	r3, r7, #5
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d3ce      	bcc.n	800098a <OLED_ShowNum+0x2a>
	}
}
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b004      	add	sp, #16
 80009f4:	bdb0      	pop	{r4, r5, r7, pc}

080009f6 <OLED_ShowHexNum>:
 * @param  Number 要显示的数字，范围：0~0xFFFFFFFF
 * @param  Length 要显示数字的长度，范围：1~8
 * @retval 无
 */
void OLED_ShowHexNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 80009f6:	b590      	push	{r4, r7, lr}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	0004      	movs	r4, r0
 80009fe:	0008      	movs	r0, r1
 8000a00:	603a      	str	r2, [r7, #0]
 8000a02:	0019      	movs	r1, r3
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	1c22      	adds	r2, r4, #0
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	1dbb      	adds	r3, r7, #6
 8000a0c:	1c02      	adds	r2, r0, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	1d7b      	adds	r3, r7, #5
 8000a12:	1c0a      	adds	r2, r1, #0
 8000a14:	701a      	strb	r2, [r3, #0]
	uint8_t i, SingleNumber;
	for (i = 0; i < Length; i++)
 8000a16:	230f      	movs	r3, #15
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	e041      	b.n	8000aa4 <OLED_ShowHexNum+0xae>
	{
		SingleNumber = Number / OLED_Pow(16, Length - i - 1) % 16;
 8000a20:	1d7b      	adds	r3, r7, #5
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	240f      	movs	r4, #15
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	0019      	movs	r1, r3
 8000a30:	2010      	movs	r0, #16
 8000a32:	f7ff ff7f 	bl	8000934 <OLED_Pow>
 8000a36:	0003      	movs	r3, r0
 8000a38:	0019      	movs	r1, r3
 8000a3a:	6838      	ldr	r0, [r7, #0]
 8000a3c:	f7ff fb64 	bl	8000108 <__udivsi3>
 8000a40:	0003      	movs	r3, r0
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	200e      	movs	r0, #14
 8000a46:	183b      	adds	r3, r7, r0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
		if (SingleNumber < 10)
 8000a4e:	183b      	adds	r3, r7, r0
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b09      	cmp	r3, #9
 8000a54:	d80f      	bhi.n	8000a76 <OLED_ShowHexNum+0x80>
		{
			OLED_ShowChar(Line, Column + i, SingleNumber + '0');
 8000a56:	1dba      	adds	r2, r7, #6
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	18d3      	adds	r3, r2, r3
 8000a60:	b2d9      	uxtb	r1, r3
 8000a62:	183b      	adds	r3, r7, r0
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	3330      	adds	r3, #48	@ 0x30
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff feee 	bl	8000850 <OLED_ShowChar>
 8000a74:	e010      	b.n	8000a98 <OLED_ShowHexNum+0xa2>
		}
		else
		{
			OLED_ShowChar(Line, Column + i, SingleNumber - 10 + 'A');
 8000a76:	1dba      	adds	r2, r7, #6
 8000a78:	230f      	movs	r3, #15
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	b2d9      	uxtb	r1, r3
 8000a84:	230e      	movs	r3, #14
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	3337      	adds	r3, #55	@ 0x37
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fedc 	bl	8000850 <OLED_ShowChar>
	for (i = 0; i < Length; i++)
 8000a98:	210f      	movs	r1, #15
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	3201      	adds	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fa      	adds	r2, r7, r3
 8000aa8:	1d7b      	adds	r3, r7, #5
 8000aaa:	7812      	ldrb	r2, [r2, #0]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d3b6      	bcc.n	8000a20 <OLED_ShowHexNum+0x2a>
		}
	}
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b005      	add	sp, #20
 8000aba:	bd90      	pop	{r4, r7, pc}

08000abc <OLED_ShowHexArray>:
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(2, Length - i - 1) % 2 + '0');
	}
}

void OLED_ShowHexArray(uint8_t* arr,uint8_t len, uint8_t Line)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	0008      	movs	r0, r1
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	1cfb      	adds	r3, r7, #3
 8000aca:	1c02      	adds	r2, r0, #0
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	1cbb      	adds	r3, r7, #2
 8000ad0:	1c0a      	adds	r2, r1, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++)
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e016      	b.n	8000b0c <OLED_ShowHexArray+0x50>
	{
		OLED_ShowHexNum(Line, 1 + i * 2 , arr[i], 2);
 8000ade:	240f      	movs	r4, #15
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	18db      	adds	r3, r3, r3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2d9      	uxtb	r1, r3
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	18d3      	adds	r3, r2, r3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	001a      	movs	r2, r3
 8000af8:	1cbb      	adds	r3, r7, #2
 8000afa:	7818      	ldrb	r0, [r3, #0]
 8000afc:	2302      	movs	r3, #2
 8000afe:	f7ff ff7a 	bl	80009f6 <OLED_ShowHexNum>
	for (uint8_t i = 0; i < len; i++)
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	3201      	adds	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fa      	adds	r2, r7, r3
 8000b10:	1cfb      	adds	r3, r7, #3
 8000b12:	7812      	ldrb	r2, [r2, #0]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d3e1      	bcc.n	8000ade <OLED_ShowHexArray+0x22>
	}

}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b005      	add	sp, #20
 8000b22:	bd90      	pop	{r4, r7, pc}

08000b24 <OLED_Init>:
 * @brief  OLED初始化
 * @param  无
 * @retval 无
 */
void OLED_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
	uint32_t i, j;

	for (i = 0; i < 1000; i++) // 上电延时
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	e00d      	b.n	8000b4c <OLED_Init+0x28>
	{
		for (j = 0; j < 1000; j++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	e002      	b.n	8000b3c <OLED_Init+0x18>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	23fa      	movs	r3, #250	@ 0xfa
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3f7      	bcc.n	8000b36 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++) // 上电延时
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	23fa      	movs	r3, #250	@ 0xfa
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3ec      	bcc.n	8000b30 <OLED_Init+0xc>
			;
	}

	OLED_I2C_Init(); // 端口初始化
 8000b56:	f7ff fd3f 	bl	80005d8 <OLED_I2C_Init>

	OLED_WriteCommand(0xAE); // 关闭显示
 8000b5a:	20ae      	movs	r0, #174	@ 0xae
 8000b5c:	f7ff fdf2 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 8000b60:	20d5      	movs	r0, #213	@ 0xd5
 8000b62:	f7ff fdef 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8000b66:	2080      	movs	r0, #128	@ 0x80
 8000b68:	f7ff fdec 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xA8); // 设置多路复用率
 8000b6c:	20a8      	movs	r0, #168	@ 0xa8
 8000b6e:	f7ff fde9 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8000b72:	203f      	movs	r0, #63	@ 0x3f
 8000b74:	f7ff fde6 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xD3); // 设置显示偏移
 8000b78:	20d3      	movs	r0, #211	@ 0xd3
 8000b7a:	f7ff fde3 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff fde0 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0x40); // 设置显示开始行
 8000b84:	2040      	movs	r0, #64	@ 0x40
 8000b86:	f7ff fddd 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xA1); // 设置左右方向，0xA1正常 0xA0左右反置
 8000b8a:	20a1      	movs	r0, #161	@ 0xa1
 8000b8c:	f7ff fdda 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xC8); // 设置上下方向，0xC8正常 0xC0上下反置
 8000b90:	20c8      	movs	r0, #200	@ 0xc8
 8000b92:	f7ff fdd7 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA); // 设置COM引脚硬件配置
 8000b96:	20da      	movs	r0, #218	@ 0xda
 8000b98:	f7ff fdd4 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8000b9c:	2012      	movs	r0, #18
 8000b9e:	f7ff fdd1 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0x81); // 设置对比度控制
 8000ba2:	2081      	movs	r0, #129	@ 0x81
 8000ba4:	f7ff fdce 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8000ba8:	20cf      	movs	r0, #207	@ 0xcf
 8000baa:	f7ff fdcb 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9); // 设置预充电周期
 8000bae:	20d9      	movs	r0, #217	@ 0xd9
 8000bb0:	f7ff fdc8 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8000bb4:	20f1      	movs	r0, #241	@ 0xf1
 8000bb6:	f7ff fdc5 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB); // 设置VCOMH取消选择级别
 8000bba:	20db      	movs	r0, #219	@ 0xdb
 8000bbc:	f7ff fdc2 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8000bc0:	2030      	movs	r0, #48	@ 0x30
 8000bc2:	f7ff fdbf 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4); // 设置整个显示打开/关闭
 8000bc6:	20a4      	movs	r0, #164	@ 0xa4
 8000bc8:	f7ff fdbc 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6); // 设置正常/倒转显示
 8000bcc:	20a6      	movs	r0, #166	@ 0xa6
 8000bce:	f7ff fdb9 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D); // 设置充电泵
 8000bd2:	208d      	movs	r0, #141	@ 0x8d
 8000bd4:	f7ff fdb6 	bl	8000744 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000bd8:	2014      	movs	r0, #20
 8000bda:	f7ff fdb3 	bl	8000744 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF); // 开启显示
 8000bde:	20af      	movs	r0, #175	@ 0xaf
 8000be0:	f7ff fdb0 	bl	8000744 <OLED_WriteCommand>

	OLED_Clear(); // OLED清屏
 8000be4:	f7ff fe08 	bl	80007f8 <OLED_Clear>
}
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <Get_Bcc_Value>:
uint8_t ReadData_NOICRespond[7];

/**
 * 获取校验码的值
 */
uint8_t Get_Bcc_Value(uint8_t* arr, uint8_t size) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	000a      	movs	r2, r1
 8000bfa:	1cfb      	adds	r3, r7, #3
 8000bfc:	701a      	strb	r2, [r3, #0]
    uint8_t result = arr[0];
 8000bfe:	230f      	movs	r3, #15
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	701a      	strb	r2, [r3, #0]

    for (int i = 1; i < size; i++) {
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	e00c      	b.n	8000c28 <Get_Bcc_Value+0x38>
        result ^= arr[i];
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	18d3      	adds	r3, r2, r3
 8000c14:	7819      	ldrb	r1, [r3, #0]
 8000c16:	220f      	movs	r2, #15
 8000c18:	18bb      	adds	r3, r7, r2
 8000c1a:	18ba      	adds	r2, r7, r2
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	404a      	eors	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < size; i++) {
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	1cfb      	adds	r3, r7, #3
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	dbed      	blt.n	8000c0e <Get_Bcc_Value+0x1e>
    }

    // 异或取反
    result = ~result;
 8000c32:	210f      	movs	r1, #15
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	187a      	adds	r2, r7, r1
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	43d2      	mvns	r2, r2
 8000c3c:	701a      	strb	r2, [r3, #0]
    return result;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	781b      	ldrb	r3, [r3, #0]
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b004      	add	sp, #16
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <insert_section_key>:
 * @param command_write_data 指向命令写入数据缓冲区的指针，该缓冲区应有足够的空间容纳插入的分区密钥
 * @param section_key 指向分区密钥的指针，该密钥将被插入到命令写入数据中
 * @return null
 */
void insert_section_key(uint8_t* command_write_data, uint8_t* section_key)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
    memcpy(command_write_data + 7, section_key, 6);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3307      	adds	r3, #7
 8000c58:	6839      	ldr	r1, [r7, #0]
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f002 fda3 	bl	80037a8 <memcpy>
}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <USART_SendArray>:

void USART_SendArray(uint8_t* array,uint8_t size)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	000a      	movs	r2, r1
 8000c76:	1cfb      	adds	r3, r7, #3
 8000c78:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, array, size, 100);
 8000c7a:	1cfb      	adds	r3, r7, #3
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <USART_SendArray+0x28>)
 8000c84:	2364      	movs	r3, #100	@ 0x64
 8000c86:	f002 f823 	bl	8002cd0 <HAL_UART_Transmit>
}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	20000148 	.word	0x20000148

08000c98 <USART_ReceiveArray>:

void USART_ReceiveArray(uint8_t* array, uint8_t size)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	000a      	movs	r2, r1
 8000ca2:	1cfb      	adds	r3, r7, #3
 8000ca4:	701a      	strb	r2, [r3, #0]
	memset(array,0,size);
 8000ca6:	1cfb      	adds	r3, r7, #3
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2100      	movs	r1, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 fd4e 	bl	8003750 <memset>
	uint8_t count = 0;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
    while(count < size)
 8000cbc:	e00e      	b.n	8000cdc <USART_ReceiveArray+0x44>
    {
        HAL_UART_Receive(&huart1,array+count, 1, 100);
 8000cbe:	240f      	movs	r4, #15
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	18d1      	adds	r1, r2, r3
 8000cc8:	480a      	ldr	r0, [pc, #40]	@ (8000cf4 <USART_ReceiveArray+0x5c>)
 8000cca:	2364      	movs	r3, #100	@ 0x64
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f002 f89f 	bl	8002e10 <HAL_UART_Receive>
        count++;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	3201      	adds	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
    while(count < size)
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fa      	adds	r2, r7, r3
 8000ce0:	1cfb      	adds	r3, r7, #3
 8000ce2:	7812      	ldrb	r2, [r2, #0]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3e9      	bcc.n	8000cbe <USART_ReceiveArray+0x26>
    }
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b005      	add	sp, #20
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	20000148 	.word	0x20000148

08000cf8 <USART_ReceiveData>:

void USART_ReceiveData(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

    uint8_t size = 0;
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive(&huart1,&size, 1, 100);
 8000d04:	1df9      	adds	r1, r7, #7
 8000d06:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <USART_ReceiveData+0x54>)
 8000d08:	2364      	movs	r3, #100	@ 0x64
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f002 f880 	bl	8002e10 <HAL_UART_Receive>
	if (size == 0x07)
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	d109      	bne.n	8000d2c <USART_ReceiveData+0x34>
    {
        ReadData_NOICRespond[0] = size;
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <USART_ReceiveData+0x58>)
 8000d1e:	701a      	strb	r2, [r3, #0]
        USART_ReceiveArray(ReadData_NOICRespond + 1, 6);
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <USART_ReceiveData+0x5c>)
 8000d22:	2106      	movs	r1, #6
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff ffb7 	bl	8000c98 <USART_ReceiveArray>
    {
        ReadData_HaveICRespond[0] = size;
        USART_ReceiveArray(ReadData_HaveICRespond + 1, 28);
        IsReadDataFlag = 1;
    }
}
 8000d2a:	e00b      	b.n	8000d44 <USART_ReceiveData+0x4c>
        ReadData_HaveICRespond[0] = size;
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781a      	ldrb	r2, [r3, #0]
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <USART_ReceiveData+0x60>)
 8000d32:	701a      	strb	r2, [r3, #0]
        USART_ReceiveArray(ReadData_HaveICRespond + 1, 28);
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <USART_ReceiveData+0x64>)
 8000d36:	211c      	movs	r1, #28
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ffad 	bl	8000c98 <USART_ReceiveArray>
        IsReadDataFlag = 1;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <USART_ReceiveData+0x68>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000148 	.word	0x20000148
 8000d50:	200000f8 	.word	0x200000f8
 8000d54:	200000f9 	.word	0x200000f9
 8000d58:	200000d8 	.word	0x200000d8
 8000d5c:	200000d9 	.word	0x200000d9
 8000d60:	200000cc 	.word	0x200000cc

08000d64 <RFID_Rc523_Config>:

uint8_t RFID_Rc523_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
    uint8_t Config_State = 0;
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]

    USART_SendArray(Config_ModuleAddr,6);
 8000d70:	4b60      	ldr	r3, [pc, #384]	@ (8000ef4 <RFID_Rc523_Config+0x190>)
 8000d72:	2106      	movs	r1, #6
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff ff79 	bl	8000c6c <USART_SendArray>
    OLED_ShowHexArray(Config_ModuleAddr, 6, 1);
 8000d7a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ef4 <RFID_Rc523_Config+0x190>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2106      	movs	r1, #6
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fe9b 	bl	8000abc <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8000d86:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000d88:	2106      	movs	r1, #6
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff ff84 	bl	8000c98 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 2);
 8000d90:	4b59      	ldr	r3, [pc, #356]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	2106      	movs	r1, #6
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff fe90 	bl	8000abc <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8000d9c:	4b56      	ldr	r3, [pc, #344]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000d9e:	78d9      	ldrb	r1, [r3, #3]
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	1dfa      	adds	r2, r7, #7
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]

    USART_SendArray(Config_ICType,6);
 8000daa:	4b54      	ldr	r3, [pc, #336]	@ (8000efc <RFID_Rc523_Config+0x198>)
 8000dac:	2106      	movs	r1, #6
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff ff5c 	bl	8000c6c <USART_SendArray>
    OLED_ShowHexArray(Config_ICType, 6, 3);
 8000db4:	4b51      	ldr	r3, [pc, #324]	@ (8000efc <RFID_Rc523_Config+0x198>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	2106      	movs	r1, #6
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff fe7e 	bl	8000abc <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8000dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000dc2:	2106      	movs	r1, #6
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ff67 	bl	8000c98 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 8000dca:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	2106      	movs	r1, #6
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff fe73 	bl	8000abc <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8000dd6:	4b48      	ldr	r3, [pc, #288]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000dd8:	78d9      	ldrb	r1, [r3, #3]
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	1dfa      	adds	r2, r7, #7
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 8000de4:	4b46      	ldr	r3, [pc, #280]	@ (8000f00 <RFID_Rc523_Config+0x19c>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fb08 	bl	80013fc <HAL_Delay>

    USART_SendArray(Config_AutoReadID,6);
 8000dec:	4b45      	ldr	r3, [pc, #276]	@ (8000f04 <RFID_Rc523_Config+0x1a0>)
 8000dee:	2106      	movs	r1, #6
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff ff3b 	bl	8000c6c <USART_SendArray>
    OLED_ShowHexArray(Config_AutoReadID, 6, 1);
 8000df6:	4b43      	ldr	r3, [pc, #268]	@ (8000f04 <RFID_Rc523_Config+0x1a0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2106      	movs	r1, #6
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fe5d 	bl	8000abc <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8000e02:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e04:	2106      	movs	r1, #6
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff ff46 	bl	8000c98 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 2);
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	2106      	movs	r1, #6
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fe52 	bl	8000abc <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8000e18:	4b37      	ldr	r3, [pc, #220]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e1a:	78d9      	ldrb	r1, [r3, #3]
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	1dfa      	adds	r2, r7, #7
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]


    USART_SendArray(Config_FilterCopyCard,6);
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <RFID_Rc523_Config+0x1a4>)
 8000e28:	2106      	movs	r1, #6
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff ff1e 	bl	8000c6c <USART_SendArray>
    OLED_ShowHexArray(Config_FilterCopyCard, 6, 3);
 8000e30:	4b35      	ldr	r3, [pc, #212]	@ (8000f08 <RFID_Rc523_Config+0x1a4>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	2106      	movs	r1, #6
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff fe40 	bl	8000abc <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e3e:	2106      	movs	r1, #6
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ff29 	bl	8000c98 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 8000e46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e48:	2204      	movs	r2, #4
 8000e4a:	2106      	movs	r1, #6
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fe35 	bl	8000abc <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e54:	78d9      	ldrb	r1, [r3, #3]
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	1dfa      	adds	r2, r7, #7
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 8000e60:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <RFID_Rc523_Config+0x19c>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 faca 	bl	80013fc <HAL_Delay>

    USART_SendArray(Config_ChannelNum,6);
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <RFID_Rc523_Config+0x1a8>)
 8000e6a:	2106      	movs	r1, #6
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fefd 	bl	8000c6c <USART_SendArray>
    OLED_ShowHexArray(Config_ChannelNum, 6, 1);
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <RFID_Rc523_Config+0x1a8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	2106      	movs	r1, #6
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff fe1f 	bl	8000abc <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e80:	2106      	movs	r1, #6
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff ff08 	bl	8000c98 <USART_ReceiveArray>
    Config_State |= config_respond[3];
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e8a:	78d9      	ldrb	r1, [r3, #3]
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
    OLED_ShowHexArray(config_respond, 6, 2);
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff fe0d 	bl	8000abc <OLED_ShowHexArray>

    USART_SendArray(Config_SectionPassward,14);
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <RFID_Rc523_Config+0x1ac>)
 8000ea4:	210e      	movs	r1, #14
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff fee0 	bl	8000c6c <USART_SendArray>
    OLED_ShowHexArray(Config_SectionPassward, 6, 3);
 8000eac:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <RFID_Rc523_Config+0x1ac>)
 8000eae:	2203      	movs	r2, #3
 8000eb0:	2106      	movs	r1, #6
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff fe02 	bl	8000abc <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000eba:	2106      	movs	r1, #6
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff feeb 	bl	8000c98 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	2106      	movs	r1, #6
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fdf7 	bl	8000abc <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <RFID_Rc523_Config+0x194>)
 8000ed0:	78d9      	ldrb	r1, [r3, #3]
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	1dfa      	adds	r2, r7, #7
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <RFID_Rc523_Config+0x19c>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 fa8c 	bl	80013fc <HAL_Delay>
    OLED_Clear();
 8000ee4:	f7ff fc88 	bl	80007f8 <OLED_Clear>
    return Config_State;
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	200000d0 	.word	0x200000d0
 8000efc:	20000010 	.word	0x20000010
 8000f00:	00000bb8 	.word	0x00000bb8
 8000f04:	20000018 	.word	0x20000018
 8000f08:	20000020 	.word	0x20000020
 8000f0c:	20000028 	.word	0x20000028
 8000f10:	20000030 	.word	0x20000030

08000f14 <RFID_Rc523_Read_Block>:
 * @param Channel 通信通道号，用于指定通信信道
 * @param blockaddr 数据块地址，用于指定要读取的数据块
 * @param Data 数据缓冲区指针，用于存储读取到的数据块内容
 */
void RFID_Rc523_Read_Block(uint8_t Channel, uint8_t blockaddr, uint8_t* Data)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	603a      	str	r2, [r7, #0]
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	1c02      	adds	r2, r0, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	1dbb      	adds	r3, r7, #6
 8000f24:	1c0a      	adds	r2, r1, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    uint8_t bcc = 0;
 8000f28:	240f      	movs	r4, #15
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    Command_ReadData[CHANNEL] = Channel;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <RFID_Rc523_Read_Block+0x9c>)
 8000f32:	1dfa      	adds	r2, r7, #7
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	70da      	strb	r2, [r3, #3]
    Command_ReadData[BLOCK] = blockaddr;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <RFID_Rc523_Read_Block+0x9c>)
 8000f3a:	1dba      	adds	r2, r7, #6
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	711a      	strb	r2, [r3, #4]
    insert_section_key(Command_ReadData, section_key);
 8000f40:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb4 <RFID_Rc523_Read_Block+0xa0>)
 8000f42:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <RFID_Rc523_Read_Block+0x9c>)
 8000f44:	0011      	movs	r1, r2
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff fe7f 	bl	8000c4a <insert_section_key>
    bcc = Get_Bcc_Value(Command_ReadData,13);
 8000f4c:	0025      	movs	r5, r4
 8000f4e:	193c      	adds	r4, r7, r4
 8000f50:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <RFID_Rc523_Read_Block+0x9c>)
 8000f52:	210d      	movs	r1, #13
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fe4b 	bl	8000bf0 <Get_Bcc_Value>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	7023      	strb	r3, [r4, #0]
    Command_ReadData[13] = bcc;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <RFID_Rc523_Read_Block+0x9c>)
 8000f60:	197a      	adds	r2, r7, r5
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	735a      	strb	r2, [r3, #13]

    USART_SendArray(Command_ReadData,15);
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <RFID_Rc523_Read_Block+0x9c>)
 8000f68:	210f      	movs	r1, #15
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff fe7e 	bl	8000c6c <USART_SendArray>
    USART_ReceiveData();
 8000f70:	f7ff fec2 	bl	8000cf8 <USART_ReceiveData>




    if (IsReadDataFlag)
 8000f74:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <RFID_Rc523_Read_Block+0xa4>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d009      	beq.n	8000f90 <RFID_Rc523_Read_Block+0x7c>
    {
		memcpy(Data,ReadData_HaveICRespond + 11, 16);
 8000f7c:	490f      	ldr	r1, [pc, #60]	@ (8000fbc <RFID_Rc523_Read_Block+0xa8>)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2210      	movs	r2, #16
 8000f82:	0018      	movs	r0, r3
 8000f84:	f002 fc10 	bl	80037a8 <memcpy>
//	    OLED_ShowHexArray(Data, 8, 1);
//	    OLED_ShowHexArray(Data + 8, 8, 2);
//	    HAL_Delay(5000);
//	    OLED_Clear();
		IsReadDataFlag = 0;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <RFID_Rc523_Read_Block+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
	    OLED_ShowHexArray(ReadData_NOICRespond, 8, 1);
	    HAL_Delay(5000);
	    OLED_Clear();
    }

}
 8000f8e:	e00b      	b.n	8000fa8 <RFID_Rc523_Read_Block+0x94>
	    OLED_ShowHexArray(ReadData_NOICRespond, 8, 1);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <RFID_Rc523_Read_Block+0xac>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	2108      	movs	r1, #8
 8000f96:	0018      	movs	r0, r3
 8000f98:	f7ff fd90 	bl	8000abc <OLED_ShowHexArray>
	    HAL_Delay(5000);
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <RFID_Rc523_Read_Block+0xb0>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fa2c 	bl	80013fc <HAL_Delay>
	    OLED_Clear();
 8000fa4:	f7ff fc28 	bl	80007f8 <OLED_Clear>
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b004      	add	sp, #16
 8000fae:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb0:	20000040 	.word	0x20000040
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	200000cc 	.word	0x200000cc
 8000fbc:	200000e3 	.word	0x200000e3
 8000fc0:	200000f8 	.word	0x200000f8
 8000fc4:	00001388 	.word	0x00001388

08000fc8 <rfid_read_channel_data>:
        RFID_Rc523_Write_Block(channel, 1 + 4 * (i-1), (uint8_t*)data + ((i - 1) * 16));
    }
}

void rfid_read_channel_data(uint8_t channel, Material_Data* data)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	0002      	movs	r2, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 1; i <= 3; i++)
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e055      	b.n	800108c <rfid_read_channel_data+0xc4>
    {
    	OLED_ShowNum(4, 1, i, 1);
 8000fe0:	240f      	movs	r4, #15
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2101      	movs	r1, #1
 8000fea:	2004      	movs	r0, #4
 8000fec:	f7ff fcb8 	bl	8000960 <OLED_ShowNum>
        RFID_Rc523_Read_Block(channel, 1 + 4 * (i - 1), (uint8_t*)data + ((i - 1) * 16));
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b2d9      	uxtb	r1, r3
 8001000:	193b      	adds	r3, r7, r4
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3b01      	subs	r3, #1
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	001a      	movs	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	189a      	adds	r2, r3, r2
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff ff7e 	bl	8000f14 <RFID_Rc523_Read_Block>
	    OLED_ShowHexArray((uint8_t*)data, 8, 1);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2201      	movs	r2, #1
 800101c:	2108      	movs	r1, #8
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fd4c 	bl	8000abc <OLED_ShowHexArray>
	    OLED_ShowHexArray((uint8_t*)data + 8, 8, 2);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	3308      	adds	r3, #8
 8001028:	2202      	movs	r2, #2
 800102a:	2108      	movs	r1, #8
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff fd45 	bl	8000abc <OLED_ShowHexArray>
	    OLED_ShowHexArray((uint8_t*)data + 16, 8, 3);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3310      	adds	r3, #16
 8001036:	2203      	movs	r2, #3
 8001038:	2108      	movs	r1, #8
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff fd3e 	bl	8000abc <OLED_ShowHexArray>
	    OLED_ShowHexArray((uint8_t*)data + 24, 8, 4);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3318      	adds	r3, #24
 8001044:	2204      	movs	r2, #4
 8001046:	2108      	movs	r1, #8
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff fd37 	bl	8000abc <OLED_ShowHexArray>
	    HAL_Delay(5000);
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <rfid_read_channel_data+0xd8>)
 8001050:	0018      	movs	r0, r3
 8001052:	f000 f9d3 	bl	80013fc <HAL_Delay>
	    OLED_Clear();
 8001056:	f7ff fbcf 	bl	80007f8 <OLED_Clear>
	    OLED_ShowHexArray((uint8_t*)data + 32, 8, 1);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3320      	adds	r3, #32
 800105e:	2201      	movs	r2, #1
 8001060:	2108      	movs	r1, #8
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fd2a 	bl	8000abc <OLED_ShowHexArray>
	    OLED_ShowHexArray((uint8_t*)data + 40, 8, 2);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	3328      	adds	r3, #40	@ 0x28
 800106c:	2202      	movs	r2, #2
 800106e:	2108      	movs	r1, #8
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff fd23 	bl	8000abc <OLED_ShowHexArray>
	    HAL_Delay(5000);
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <rfid_read_channel_data+0xd8>)
 8001078:	0018      	movs	r0, r3
 800107a:	f000 f9bf 	bl	80013fc <HAL_Delay>
	    OLED_Clear();
 800107e:	f7ff fbbb 	bl	80007f8 <OLED_Clear>
    for (uint8_t i = 1; i <= 3; i++)
 8001082:	193b      	adds	r3, r7, r4
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	193b      	adds	r3, r7, r4
 8001088:	3201      	adds	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	230f      	movs	r3, #15
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b03      	cmp	r3, #3
 8001094:	d9a4      	bls.n	8000fe0 <rfid_read_channel_data+0x18>
    }
}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b005      	add	sp, #20
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	00001388 	.word	0x00001388

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_MspInit+0x44>)
 80010ac:	699a      	ldr	r2, [r3, #24]
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_MspInit+0x44>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	619a      	str	r2, [r3, #24]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_MspInit+0x44>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_MspInit+0x44>)
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_MspInit+0x44>)
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	0549      	lsls	r1, r1, #21
 80010cc:	430a      	orrs	r2, r1
 80010ce:	61da      	str	r2, [r3, #28]
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <HAL_MspInit+0x44>)
 80010d2:	69da      	ldr	r2, [r3, #28]
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	055b      	lsls	r3, r3, #21
 80010d8:	4013      	ands	r3, r2
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010fc:	4b38      	ldr	r3, [pc, #224]	@ (80011e0 <HAL_InitTick+0xf4>)
 80010fe:	699a      	ldr	r2, [r3, #24]
 8001100:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <HAL_InitTick+0xf4>)
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	0109      	lsls	r1, r1, #4
 8001106:	430a      	orrs	r2, r1
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	4b35      	ldr	r3, [pc, #212]	@ (80011e0 <HAL_InitTick+0xf4>)
 800110c:	699a      	ldr	r2, [r3, #24]
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	4013      	ands	r3, r2
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001118:	230c      	movs	r3, #12
 800111a:	18fa      	adds	r2, r7, r3
 800111c:	2410      	movs	r4, #16
 800111e:	193b      	adds	r3, r7, r4
 8001120:	0011      	movs	r1, r2
 8001122:	0018      	movs	r0, r3
 8001124:	f001 fa02 	bl	800252c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001134:	f001 f9e4 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 8001138:	0003      	movs	r3, r0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800113c:	e004      	b.n	8001148 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800113e:	f001 f9df 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 8001142:	0003      	movs	r3, r0
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800114a:	4926      	ldr	r1, [pc, #152]	@ (80011e4 <HAL_InitTick+0xf8>)
 800114c:	0018      	movs	r0, r3
 800114e:	f7fe ffdb 	bl	8000108 <__udivsi3>
 8001152:	0003      	movs	r3, r0
 8001154:	3b01      	subs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001158:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HAL_InitTick+0xfc>)
 800115a:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <HAL_InitTick+0x100>)
 800115c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800115e:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <HAL_InitTick+0xfc>)
 8001160:	4a23      	ldr	r2, [pc, #140]	@ (80011f0 <HAL_InitTick+0x104>)
 8001162:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001164:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <HAL_InitTick+0xfc>)
 8001166:	6a3a      	ldr	r2, [r7, #32]
 8001168:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <HAL_InitTick+0xfc>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <HAL_InitTick+0xfc>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <HAL_InitTick+0xfc>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800117c:	252b      	movs	r5, #43	@ 0x2b
 800117e:	197c      	adds	r4, r7, r5
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_InitTick+0xfc>)
 8001182:	0018      	movs	r0, r3
 8001184:	f001 fafa 	bl	800277c <HAL_TIM_Base_Init>
 8001188:	0003      	movs	r3, r0
 800118a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800118c:	197b      	adds	r3, r7, r5
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11e      	bne.n	80011d2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001194:	197c      	adds	r4, r7, r5
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_InitTick+0xfc>)
 8001198:	0018      	movs	r0, r3
 800119a:	f001 fb47 	bl	800282c <HAL_TIM_Base_Start_IT>
 800119e:	0003      	movs	r3, r0
 80011a0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80011a2:	197b      	adds	r3, r7, r5
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d113      	bne.n	80011d2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80011aa:	200d      	movs	r0, #13
 80011ac:	f000 f9e7 	bl	800157e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d809      	bhi.n	80011ca <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	0019      	movs	r1, r3
 80011bc:	200d      	movs	r0, #13
 80011be:	f000 f9c9 	bl	8001554 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_InitTick+0x108>)
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e003      	b.n	80011d2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80011ca:	232b      	movs	r3, #43	@ 0x2b
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80011d2:	232b      	movs	r3, #43	@ 0x2b
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	781b      	ldrb	r3, [r3, #0]
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b00c      	add	sp, #48	@ 0x30
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	000f4240 	.word	0x000f4240
 80011e8:	20000100 	.word	0x20000100
 80011ec:	40012c00 	.word	0x40012c00
 80011f0:	000003e7 	.word	0x000003e7
 80011f4:	20000054 	.word	0x20000054

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	e7fd      	b.n	80011fc <NMI_Handler+0x4>

08001200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	e7fd      	b.n	8001204 <HardFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fb4e 	bl	80028d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	20000100 	.word	0x20000100

08001240 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001252:	4a15      	ldr	r2, [pc, #84]	@ (80012a8 <MX_USART1_UART_Init+0x5c>)
 8001254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001258:	22e1      	movs	r2, #225	@ 0xe1
 800125a:	0252      	lsls	r2, r2, #9
 800125c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <MX_USART1_UART_Init+0x58>)
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fcc9 	bl	8002c28 <HAL_UART_Init>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800129a:	f7ff f997 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000148 	.word	0x20000148
 80012a8:	40013800 	.word	0x40013800

080012ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08b      	sub	sp, #44	@ 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	2414      	movs	r4, #20
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	0018      	movs	r0, r3
 80012ba:	2314      	movs	r3, #20
 80012bc:	001a      	movs	r2, r3
 80012be:	2100      	movs	r1, #0
 80012c0:	f002 fa46 	bl	8003750 <memset>
  if(uartHandle->Instance==USART1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_UART_MspInit+0x94>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d133      	bne.n	8001336 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	01c9      	lsls	r1, r1, #7
 80012d8:	430a      	orrs	r2, r1
 80012da:	619a      	str	r2, [r3, #24]
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	01db      	lsls	r3, r3, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	0289      	lsls	r1, r1, #10
 80012f4:	430a      	orrs	r2, r1
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	029b      	lsls	r3, r3, #10
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001306:	193b      	adds	r3, r7, r4
 8001308:	22c0      	movs	r2, #192	@ 0xc0
 800130a:	00d2      	lsls	r2, r2, #3
 800130c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	0021      	movs	r1, r4
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2202      	movs	r2, #2
 8001314:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2203      	movs	r2, #3
 8001320:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2201      	movs	r2, #1
 8001326:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	187a      	adds	r2, r7, r1
 800132a:	2390      	movs	r3, #144	@ 0x90
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f000 f935 	bl	80015a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b00b      	add	sp, #44	@ 0x2c
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	40013800 	.word	0x40013800
 8001344:	40021000 	.word	0x40021000

08001348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001348:	480d      	ldr	r0, [pc, #52]	@ (8001380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800134a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800134c:	f7ff ff78 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopForever+0x6>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopForever+0xe>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopForever+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001376:	f002 f9f3 	bl	8003760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137a:	f7ff f813 	bl	80003a4 <main>

0800137e <LoopForever>:

LoopForever:
    b LoopForever
 800137e:	e7fe      	b.n	800137e <LoopForever>
  ldr   r0, =_estack
 8001380:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800138c:	08003e10 	.word	0x08003e10
  ldr r2, =_sbss
 8001390:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001394:	200001d4 	.word	0x200001d4

08001398 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_COMP_IRQHandler>
	...

0800139c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <HAL_Init+0x24>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_Init+0x24>)
 80013a6:	2110      	movs	r1, #16
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f7ff fe9d 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b2:	f7ff fe77 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_IncTick+0x1c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	001a      	movs	r2, r3
 80013ce:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_IncTick+0x20>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	18d2      	adds	r2, r2, r3
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_IncTick+0x20>)
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	20000058 	.word	0x20000058
 80013e4:	200001d0 	.word	0x200001d0

080013e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b02      	ldr	r3, [pc, #8]	@ (80013f8 <HAL_GetTick+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	200001d0 	.word	0x200001d0

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff fff0 	bl	80013e8 <HAL_GetTick>
 8001408:	0003      	movs	r3, r0
 800140a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	001a      	movs	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	189b      	adds	r3, r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	f7ff ffe0 	bl	80013e8 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	20000058 	.word	0x20000058

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	0002      	movs	r2, r0
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b7f      	cmp	r3, #127	@ 0x7f
 8001456:	d809      	bhi.n	800146c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	001a      	movs	r2, r3
 800145e:	231f      	movs	r3, #31
 8001460:	401a      	ands	r2, r3
 8001462:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <__NVIC_EnableIRQ+0x30>)
 8001464:	2101      	movs	r1, #1
 8001466:	4091      	lsls	r1, r2
 8001468:	000a      	movs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
  }
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	0002      	movs	r2, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b7f      	cmp	r3, #127	@ 0x7f
 800148c:	d828      	bhi.n	80014e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148e:	4a2f      	ldr	r2, [pc, #188]	@ (800154c <__NVIC_SetPriority+0xd4>)
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b25b      	sxtb	r3, r3
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	33c0      	adds	r3, #192	@ 0xc0
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	589b      	ldr	r3, [r3, r2]
 800149e:	1dfa      	adds	r2, r7, #7
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	0011      	movs	r1, r2
 80014a4:	2203      	movs	r2, #3
 80014a6:	400a      	ands	r2, r1
 80014a8:	00d2      	lsls	r2, r2, #3
 80014aa:	21ff      	movs	r1, #255	@ 0xff
 80014ac:	4091      	lsls	r1, r2
 80014ae:	000a      	movs	r2, r1
 80014b0:	43d2      	mvns	r2, r2
 80014b2:	401a      	ands	r2, r3
 80014b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	22ff      	movs	r2, #255	@ 0xff
 80014bc:	401a      	ands	r2, r3
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	0018      	movs	r0, r3
 80014c4:	2303      	movs	r3, #3
 80014c6:	4003      	ands	r3, r0
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014cc:	481f      	ldr	r0, [pc, #124]	@ (800154c <__NVIC_SetPriority+0xd4>)
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	430a      	orrs	r2, r1
 80014d8:	33c0      	adds	r3, #192	@ 0xc0
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014de:	e031      	b.n	8001544 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <__NVIC_SetPriority+0xd8>)
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	0019      	movs	r1, r3
 80014e8:	230f      	movs	r3, #15
 80014ea:	400b      	ands	r3, r1
 80014ec:	3b08      	subs	r3, #8
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3306      	adds	r3, #6
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	3304      	adds	r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	1dfa      	adds	r2, r7, #7
 80014fc:	7812      	ldrb	r2, [r2, #0]
 80014fe:	0011      	movs	r1, r2
 8001500:	2203      	movs	r2, #3
 8001502:	400a      	ands	r2, r1
 8001504:	00d2      	lsls	r2, r2, #3
 8001506:	21ff      	movs	r1, #255	@ 0xff
 8001508:	4091      	lsls	r1, r2
 800150a:	000a      	movs	r2, r1
 800150c:	43d2      	mvns	r2, r2
 800150e:	401a      	ands	r2, r3
 8001510:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	019b      	lsls	r3, r3, #6
 8001516:	22ff      	movs	r2, #255	@ 0xff
 8001518:	401a      	ands	r2, r3
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	0018      	movs	r0, r3
 8001520:	2303      	movs	r3, #3
 8001522:	4003      	ands	r3, r0
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001528:	4809      	ldr	r0, [pc, #36]	@ (8001550 <__NVIC_SetPriority+0xd8>)
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	001c      	movs	r4, r3
 8001530:	230f      	movs	r3, #15
 8001532:	4023      	ands	r3, r4
 8001534:	3b08      	subs	r3, #8
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	430a      	orrs	r2, r1
 800153a:	3306      	adds	r3, #6
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	18c3      	adds	r3, r0, r3
 8001540:	3304      	adds	r3, #4
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	46c0      	nop			@ (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b003      	add	sp, #12
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	210f      	movs	r1, #15
 8001560:	187b      	adds	r3, r7, r1
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	187b      	adds	r3, r7, r1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff81 	bl	8001478 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	0002      	movs	r2, r0
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ff57 	bl	8001444 <__NVIC_EnableIRQ>
}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b002      	add	sp, #8
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ae:	e155      	b.n	800185c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4091      	lsls	r1, r2
 80015ba:	000a      	movs	r2, r1
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d100      	bne.n	80015c8 <HAL_GPIO_Init+0x28>
 80015c6:	e146      	b.n	8001856 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2203      	movs	r2, #3
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d005      	beq.n	80015e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2203      	movs	r2, #3
 80015da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d130      	bne.n	8001642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0013      	movs	r3, r2
 80015f0:	43da      	mvns	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	409a      	lsls	r2, r3
 8001602:	0013      	movs	r3, r2
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001616:	2201      	movs	r2, #1
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	2201      	movs	r2, #1
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2203      	movs	r2, #3
 8001648:	4013      	ands	r3, r2
 800164a:	2b03      	cmp	r3, #3
 800164c:	d017      	beq.n	800167e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	43da      	mvns	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	4013      	ands	r3, r2
 8001686:	2b02      	cmp	r3, #2
 8001688:	d123      	bne.n	80016d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	08da      	lsrs	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3208      	adds	r2, #8
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	58d3      	ldr	r3, [r2, r3]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2207      	movs	r2, #7
 800169c:	4013      	ands	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	409a      	lsls	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2107      	movs	r1, #7
 80016b6:	400b      	ands	r3, r1
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	6939      	ldr	r1, [r7, #16]
 80016d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2203      	movs	r2, #3
 80016f0:	401a      	ands	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	23c0      	movs	r3, #192	@ 0xc0
 800170c:	029b      	lsls	r3, r3, #10
 800170e:	4013      	ands	r3, r2
 8001710:	d100      	bne.n	8001714 <HAL_GPIO_Init+0x174>
 8001712:	e0a0      	b.n	8001856 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001714:	4b57      	ldr	r3, [pc, #348]	@ (8001874 <HAL_GPIO_Init+0x2d4>)
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	4b56      	ldr	r3, [pc, #344]	@ (8001874 <HAL_GPIO_Init+0x2d4>)
 800171a:	2101      	movs	r1, #1
 800171c:	430a      	orrs	r2, r1
 800171e:	619a      	str	r2, [r3, #24]
 8001720:	4b54      	ldr	r3, [pc, #336]	@ (8001874 <HAL_GPIO_Init+0x2d4>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2201      	movs	r2, #1
 8001726:	4013      	ands	r3, r2
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800172c:	4a52      	ldr	r2, [pc, #328]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	589b      	ldr	r3, [r3, r2]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2203      	movs	r2, #3
 800173e:	4013      	ands	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	409a      	lsls	r2, r3
 8001746:	0013      	movs	r3, r2
 8001748:	43da      	mvns	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	2390      	movs	r3, #144	@ 0x90
 8001754:	05db      	lsls	r3, r3, #23
 8001756:	429a      	cmp	r2, r3
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x1ee>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a47      	ldr	r2, [pc, #284]	@ (800187c <HAL_GPIO_Init+0x2dc>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x1ea>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a46      	ldr	r2, [pc, #280]	@ (8001880 <HAL_GPIO_Init+0x2e0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x1e6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a45      	ldr	r2, [pc, #276]	@ (8001884 <HAL_GPIO_Init+0x2e4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x1e2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a44      	ldr	r2, [pc, #272]	@ (8001888 <HAL_GPIO_Init+0x2e8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x1de>
 800177a:	2304      	movs	r3, #4
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x1f0>
 800177e:	2305      	movs	r3, #5
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x1f0>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x1f0>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x1f0>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x1f0>
 800178e:	2300      	movs	r3, #0
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	2103      	movs	r1, #3
 8001794:	400a      	ands	r2, r1
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ae:	4b37      	ldr	r3, [pc, #220]	@ (800188c <HAL_GPIO_Init+0x2ec>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	035b      	lsls	r3, r3, #13
 80017c6:	4013      	ands	r3, r2
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_GPIO_Init+0x2ec>)
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017d8:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <HAL_GPIO_Init+0x2ec>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43da      	mvns	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	039b      	lsls	r3, r3, #14
 80017f0:	4013      	ands	r3, r2
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <HAL_GPIO_Init+0x2ec>)
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <HAL_GPIO_Init+0x2ec>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	029b      	lsls	r3, r3, #10
 800181a:	4013      	ands	r3, r2
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_GPIO_Init+0x2ec>)
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800182c:	4b17      	ldr	r3, [pc, #92]	@ (800188c <HAL_GPIO_Init+0x2ec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43da      	mvns	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	025b      	lsls	r3, r3, #9
 8001844:	4013      	ands	r3, r2
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_GPIO_Init+0x2ec>)
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	40da      	lsrs	r2, r3
 8001864:	1e13      	subs	r3, r2, #0
 8001866:	d000      	beq.n	800186a <HAL_GPIO_Init+0x2ca>
 8001868:	e6a2      	b.n	80015b0 <HAL_GPIO_Init+0x10>
  } 
}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	46c0      	nop			@ (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b006      	add	sp, #24
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000
 800187c:	48000400 	.word	0x48000400
 8001880:	48000800 	.word	0x48000800
 8001884:	48000c00 	.word	0x48000c00
 8001888:	48001000 	.word	0x48001000
 800188c:	40010400 	.word	0x40010400

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	0008      	movs	r0, r1
 800189a:	0011      	movs	r1, r2
 800189c:	1cbb      	adds	r3, r7, #2
 800189e:	1c02      	adds	r2, r0, #0
 80018a0:	801a      	strh	r2, [r3, #0]
 80018a2:	1c7b      	adds	r3, r7, #1
 80018a4:	1c0a      	adds	r2, r1, #0
 80018a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a8:	1c7b      	adds	r3, r7, #1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b0:	1cbb      	adds	r3, r7, #2
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ba:	1cbb      	adds	r3, r7, #2
 80018bc:	881a      	ldrh	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e08f      	b.n	80019fe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2241      	movs	r2, #65	@ 0x41
 80018e2:	5c9b      	ldrb	r3, [r3, r2]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2240      	movs	r2, #64	@ 0x40
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe fd07 	bl	8000308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2241      	movs	r2, #65	@ 0x41
 80018fe:	2124      	movs	r1, #36	@ 0x24
 8001900:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	438a      	bics	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	493b      	ldr	r1, [pc, #236]	@ (8001a08 <HAL_I2C_Init+0x13c>)
 800191c:	400a      	ands	r2, r1
 800191e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4938      	ldr	r1, [pc, #224]	@ (8001a0c <HAL_I2C_Init+0x140>)
 800192c:	400a      	ands	r2, r1
 800192e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d108      	bne.n	800194a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	0209      	lsls	r1, r1, #8
 8001944:	430a      	orrs	r2, r1
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	e007      	b.n	800195a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2184      	movs	r1, #132	@ 0x84
 8001954:	0209      	lsls	r1, r1, #8
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d109      	bne.n	8001976 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2180      	movs	r1, #128	@ 0x80
 800196e:	0109      	lsls	r1, r1, #4
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	e007      	b.n	8001986 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4923      	ldr	r1, [pc, #140]	@ (8001a10 <HAL_I2C_Init+0x144>)
 8001982:	400a      	ands	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4920      	ldr	r1, [pc, #128]	@ (8001a14 <HAL_I2C_Init+0x148>)
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	491a      	ldr	r1, [pc, #104]	@ (8001a0c <HAL_I2C_Init+0x140>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69d9      	ldr	r1, [r3, #28]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1a      	ldr	r2, [r3, #32]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2241      	movs	r2, #65	@ 0x41
 80019ea:	2120      	movs	r1, #32
 80019ec:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2242      	movs	r2, #66	@ 0x42
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	f0ffffff 	.word	0xf0ffffff
 8001a0c:	ffff7fff 	.word	0xffff7fff
 8001a10:	fffff7ff 	.word	0xfffff7ff
 8001a14:	02008000 	.word	0x02008000

08001a18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2241      	movs	r2, #65	@ 0x41
 8001a26:	5c9b      	ldrb	r3, [r3, r2]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d138      	bne.n	8001aa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2240      	movs	r2, #64	@ 0x40
 8001a32:	5c9b      	ldrb	r3, [r3, r2]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e032      	b.n	8001aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2240      	movs	r2, #64	@ 0x40
 8001a40:	2101      	movs	r1, #1
 8001a42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2241      	movs	r2, #65	@ 0x41
 8001a48:	2124      	movs	r1, #36	@ 0x24
 8001a4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	438a      	bics	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4911      	ldr	r1, [pc, #68]	@ (8001aac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6819      	ldr	r1, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2101      	movs	r1, #1
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2241      	movs	r2, #65	@ 0x41
 8001a90:	2120      	movs	r1, #32
 8001a92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2240      	movs	r2, #64	@ 0x40
 8001a98:	2100      	movs	r1, #0
 8001a9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
  }
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	ffffefff 	.word	0xffffefff

08001ab0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2241      	movs	r2, #65	@ 0x41
 8001abe:	5c9b      	ldrb	r3, [r3, r2]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d139      	bne.n	8001b3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2240      	movs	r2, #64	@ 0x40
 8001aca:	5c9b      	ldrb	r3, [r3, r2]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e033      	b.n	8001b3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2240      	movs	r2, #64	@ 0x40
 8001ad8:	2101      	movs	r1, #1
 8001ada:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2241      	movs	r2, #65	@ 0x41
 8001ae0:	2124      	movs	r1, #36	@ 0x24
 8001ae2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2241      	movs	r2, #65	@ 0x41
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2240      	movs	r2, #64	@ 0x40
 8001b32:	2100      	movs	r1, #0
 8001b34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
  }
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	fffff0ff 	.word	0xfffff0ff

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f000 fb76 	bl	8002248 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2201      	movs	r2, #1
 8001b62:	4013      	ands	r3, r2
 8001b64:	d100      	bne.n	8001b68 <HAL_RCC_OscConfig+0x20>
 8001b66:	e08e      	b.n	8001c86 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b68:	4bc5      	ldr	r3, [pc, #788]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d00e      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b74:	4bc2      	ldr	r3, [pc, #776]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	220c      	movs	r2, #12
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d117      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x68>
 8001b80:	4bbf      	ldr	r3, [pc, #764]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	23c0      	movs	r3, #192	@ 0xc0
 8001b86:	025b      	lsls	r3, r3, #9
 8001b88:	401a      	ands	r2, r3
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d10e      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b92:	4bbb      	ldr	r3, [pc, #748]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	029b      	lsls	r3, r3, #10
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d100      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x58>
 8001b9e:	e071      	b.n	8001c84 <HAL_RCC_OscConfig+0x13c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d000      	beq.n	8001baa <HAL_RCC_OscConfig+0x62>
 8001ba8:	e06c      	b.n	8001c84 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f000 fb4c 	bl	8002248 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x80>
 8001bb8:	4bb1      	ldr	r3, [pc, #708]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4bb0      	ldr	r3, [pc, #704]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001bbe:	2180      	movs	r1, #128	@ 0x80
 8001bc0:	0249      	lsls	r1, r1, #9
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e02f      	b.n	8001c28 <HAL_RCC_OscConfig+0xe0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0xa2>
 8001bd0:	4bab      	ldr	r3, [pc, #684]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4baa      	ldr	r3, [pc, #680]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001bd6:	49ab      	ldr	r1, [pc, #684]	@ (8001e84 <HAL_RCC_OscConfig+0x33c>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	4ba8      	ldr	r3, [pc, #672]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4ba7      	ldr	r3, [pc, #668]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001be2:	49a9      	ldr	r1, [pc, #676]	@ (8001e88 <HAL_RCC_OscConfig+0x340>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e01e      	b.n	8001c28 <HAL_RCC_OscConfig+0xe0>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d10e      	bne.n	8001c10 <HAL_RCC_OscConfig+0xc8>
 8001bf2:	4ba3      	ldr	r3, [pc, #652]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4ba2      	ldr	r3, [pc, #648]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001bf8:	2180      	movs	r1, #128	@ 0x80
 8001bfa:	02c9      	lsls	r1, r1, #11
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	4b9f      	ldr	r3, [pc, #636]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b9e      	ldr	r3, [pc, #632]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c06:	2180      	movs	r1, #128	@ 0x80
 8001c08:	0249      	lsls	r1, r1, #9
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0xe0>
 8001c10:	4b9b      	ldr	r3, [pc, #620]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b9a      	ldr	r3, [pc, #616]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c16:	499b      	ldr	r1, [pc, #620]	@ (8001e84 <HAL_RCC_OscConfig+0x33c>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	4b98      	ldr	r3, [pc, #608]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b97      	ldr	r3, [pc, #604]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c22:	4999      	ldr	r1, [pc, #612]	@ (8001e88 <HAL_RCC_OscConfig+0x340>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d014      	beq.n	8001c5a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fbda 	bl	80013e8 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3a:	f7ff fbd5 	bl	80013e8 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	@ 0x64
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e2fd      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	029b      	lsls	r3, r3, #10
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0xf2>
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fbc5 	bl	80013e8 <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fbc0 	bl	80013e8 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	@ 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e2e8      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b82      	ldr	r3, [pc, #520]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	029b      	lsls	r3, r3, #10
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x11c>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <HAL_RCC_OscConfig+0x14a>
 8001c90:	e06c      	b.n	8001d6c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c92:	4b7b      	ldr	r3, [pc, #492]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	220c      	movs	r2, #12
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d00e      	beq.n	8001cba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c9c:	4b78      	ldr	r3, [pc, #480]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	220c      	movs	r2, #12
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d11f      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1a0>
 8001ca8:	4b75      	ldr	r3, [pc, #468]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	23c0      	movs	r3, #192	@ 0xc0
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b71      	ldr	r3, [pc, #452]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x188>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e2bb      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	22f8      	movs	r2, #248	@ 0xf8
 8001cd6:	4393      	bics	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00da      	lsls	r2, r3, #3
 8001ce0:	4b67      	ldr	r3, [pc, #412]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e041      	b.n	8001d6c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d024      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b63      	ldr	r3, [pc, #396]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b62      	ldr	r3, [pc, #392]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fb74 	bl	80013e8 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff fb6f 	bl	80013e8 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e297      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b59      	ldr	r3, [pc, #356]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d0f1      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	22f8      	movs	r2, #248	@ 0xf8
 8001d28:	4393      	bics	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	00da      	lsls	r2, r3, #3
 8001d32:	4b53      	ldr	r3, [pc, #332]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e018      	b.n	8001d6c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b51      	ldr	r3, [pc, #324]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b50      	ldr	r3, [pc, #320]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001d40:	2101      	movs	r1, #1
 8001d42:	438a      	bics	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb4f 	bl	80013e8 <HAL_GetTick>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff fb4a 	bl	80013e8 <HAL_GetTick>
 8001d54:	0002      	movs	r2, r0
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e272      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b47      	ldr	r3, [pc, #284]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d1f1      	bne.n	8001d50 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2208      	movs	r2, #8
 8001d72:	4013      	ands	r3, r2
 8001d74:	d036      	beq.n	8001de4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d019      	beq.n	8001db2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	4b40      	ldr	r3, [pc, #256]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d82:	4b3f      	ldr	r3, [pc, #252]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fb2d 	bl	80013e8 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d94:	f7ff fb28 	bl	80013e8 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e250      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da6:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d0f1      	beq.n	8001d94 <HAL_RCC_OscConfig+0x24c>
 8001db0:	e018      	b.n	8001de4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db2:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001db6:	4b32      	ldr	r3, [pc, #200]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	438a      	bics	r2, r1
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fb13 	bl	80013e8 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fb0e 	bl	80013e8 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e236      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dda:	4b29      	ldr	r3, [pc, #164]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d1f1      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2204      	movs	r2, #4
 8001dea:	4013      	ands	r3, r2
 8001dec:	d100      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2a8>
 8001dee:	e0b5      	b.n	8001f5c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df0:	201f      	movs	r0, #31
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df8:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	055b      	lsls	r3, r3, #21
 8001e00:	4013      	ands	r3, r2
 8001e02:	d110      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	0549      	lsls	r1, r1, #21
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	61da      	str	r2, [r3, #28]
 8001e12:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	055b      	lsls	r3, r3, #21
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e20:	183b      	adds	r3, r7, r0
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <HAL_RCC_OscConfig+0x344>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d11a      	bne.n	8001e68 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_RCC_OscConfig+0x344>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_RCC_OscConfig+0x344>)
 8001e38:	2180      	movs	r1, #128	@ 0x80
 8001e3a:	0049      	lsls	r1, r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e40:	f7ff fad2 	bl	80013e8 <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4a:	f7ff facd 	bl	80013e8 <HAL_GetTick>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b64      	cmp	r3, #100	@ 0x64
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1f5      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <HAL_RCC_OscConfig+0x344>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	@ 0x80
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d10f      	bne.n	8001e90 <HAL_RCC_OscConfig+0x348>
 8001e70:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	4b02      	ldr	r3, [pc, #8]	@ (8001e80 <HAL_RCC_OscConfig+0x338>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	621a      	str	r2, [r3, #32]
 8001e7c:	e036      	b.n	8001eec <HAL_RCC_OscConfig+0x3a4>
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	40021000 	.word	0x40021000
 8001e84:	fffeffff 	.word	0xfffeffff
 8001e88:	fffbffff 	.word	0xfffbffff
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x36a>
 8001e98:	4bca      	ldr	r3, [pc, #808]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	4bc9      	ldr	r3, [pc, #804]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	438a      	bics	r2, r1
 8001ea2:	621a      	str	r2, [r3, #32]
 8001ea4:	4bc7      	ldr	r3, [pc, #796]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	4bc6      	ldr	r3, [pc, #792]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001eaa:	2104      	movs	r1, #4
 8001eac:	438a      	bics	r2, r1
 8001eae:	621a      	str	r2, [r3, #32]
 8001eb0:	e01c      	b.n	8001eec <HAL_RCC_OscConfig+0x3a4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x38c>
 8001eba:	4bc2      	ldr	r3, [pc, #776]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	4bc1      	ldr	r3, [pc, #772]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	621a      	str	r2, [r3, #32]
 8001ec6:	4bbf      	ldr	r3, [pc, #764]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	4bbe      	ldr	r3, [pc, #760]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	621a      	str	r2, [r3, #32]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0x3a4>
 8001ed4:	4bbb      	ldr	r3, [pc, #748]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	4bba      	ldr	r3, [pc, #744]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001eda:	2101      	movs	r1, #1
 8001edc:	438a      	bics	r2, r1
 8001ede:	621a      	str	r2, [r3, #32]
 8001ee0:	4bb8      	ldr	r3, [pc, #736]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ee2:	6a1a      	ldr	r2, [r3, #32]
 8001ee4:	4bb7      	ldr	r3, [pc, #732]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	438a      	bics	r2, r1
 8001eea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d014      	beq.n	8001f1e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fa78 	bl	80013e8 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e009      	b.n	8001f12 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff fa73 	bl	80013e8 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4aaf      	ldr	r2, [pc, #700]	@ (80021c8 <HAL_RCC_OscConfig+0x680>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e19a      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	4bac      	ldr	r3, [pc, #688]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	2202      	movs	r2, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x3b6>
 8001f1c:	e013      	b.n	8001f46 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fa63 	bl	80013e8 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f26:	e009      	b.n	8001f3c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7ff fa5e 	bl	80013e8 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	4aa5      	ldr	r2, [pc, #660]	@ (80021c8 <HAL_RCC_OscConfig+0x680>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e185      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	4ba1      	ldr	r3, [pc, #644]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	2202      	movs	r2, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f46:	231f      	movs	r3, #31
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f50:	4b9c      	ldr	r3, [pc, #624]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	4b9b      	ldr	r3, [pc, #620]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001f56:	499d      	ldr	r1, [pc, #628]	@ (80021cc <HAL_RCC_OscConfig+0x684>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2210      	movs	r2, #16
 8001f62:	4013      	ands	r3, r2
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d12a      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f6e:	4b95      	ldr	r3, [pc, #596]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f72:	4b94      	ldr	r3, [pc, #592]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001f74:	2104      	movs	r1, #4
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f7a:	4b92      	ldr	r3, [pc, #584]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f7e:	4b91      	ldr	r3, [pc, #580]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	430a      	orrs	r2, r1
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fa2f 	bl	80013e8 <HAL_GetTick>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f90:	f7ff fa2a 	bl	80013e8 <HAL_GetTick>
 8001f94:	0002      	movs	r2, r0
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e152      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fa2:	4b88      	ldr	r3, [pc, #544]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d0f1      	beq.n	8001f90 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fac:	4b85      	ldr	r3, [pc, #532]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb0:	22f8      	movs	r2, #248	@ 0xf8
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	00da      	lsls	r2, r3, #3
 8001fbc:	4b81      	ldr	r3, [pc, #516]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fc2:	e034      	b.n	800202e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	3305      	adds	r3, #5
 8001fca:	d111      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fcc:	4b7d      	ldr	r3, [pc, #500]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fd0:	4b7c      	ldr	r3, [pc, #496]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fd8:	4b7a      	ldr	r3, [pc, #488]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fdc:	22f8      	movs	r2, #248	@ 0xf8
 8001fde:	4393      	bics	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	00da      	lsls	r2, r3, #3
 8001fe8:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fee:	e01e      	b.n	800202e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ff0:	4b74      	ldr	r3, [pc, #464]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ff4:	4b73      	ldr	r3, [pc, #460]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ffc:	4b71      	ldr	r3, [pc, #452]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002000:	4b70      	ldr	r3, [pc, #448]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002002:	2101      	movs	r1, #1
 8002004:	438a      	bics	r2, r1
 8002006:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7ff f9ee 	bl	80013e8 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002012:	f7ff f9e9 	bl	80013e8 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e111      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002024:	4b67      	ldr	r3, [pc, #412]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d1f1      	bne.n	8002012 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2220      	movs	r2, #32
 8002034:	4013      	ands	r3, r2
 8002036:	d05c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002038:	4b62      	ldr	r3, [pc, #392]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	220c      	movs	r2, #12
 800203e:	4013      	ands	r3, r2
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d00e      	beq.n	8002062 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002044:	4b5f      	ldr	r3, [pc, #380]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	220c      	movs	r2, #12
 800204a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800204c:	2b08      	cmp	r3, #8
 800204e:	d114      	bne.n	800207a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002050:	4b5c      	ldr	r3, [pc, #368]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	23c0      	movs	r3, #192	@ 0xc0
 8002056:	025b      	lsls	r3, r3, #9
 8002058:	401a      	ands	r2, r3
 800205a:	23c0      	movs	r3, #192	@ 0xc0
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	429a      	cmp	r2, r3
 8002060:	d10b      	bne.n	800207a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002062:	4b58      	ldr	r3, [pc, #352]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002066:	2380      	movs	r3, #128	@ 0x80
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	4013      	ands	r3, r2
 800206c:	d040      	beq.n	80020f0 <HAL_RCC_OscConfig+0x5a8>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d03c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0e6      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01b      	beq.n	80020ba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002082:	4b50      	ldr	r3, [pc, #320]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002086:	4b4f      	ldr	r3, [pc, #316]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	0249      	lsls	r1, r1, #9
 800208c:	430a      	orrs	r2, r1
 800208e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff f9aa 	bl	80013e8 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800209a:	f7ff f9a5 	bl	80013e8 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0cd      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80020ac:	4b45      	ldr	r3, [pc, #276]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020b0:	2380      	movs	r3, #128	@ 0x80
 80020b2:	029b      	lsls	r3, r3, #10
 80020b4:	4013      	ands	r3, r2
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x552>
 80020b8:	e01b      	b.n	80020f2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020ba:	4b42      	ldr	r3, [pc, #264]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 80020bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020be:	4b41      	ldr	r3, [pc, #260]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	4943      	ldr	r1, [pc, #268]	@ (80021d0 <HAL_RCC_OscConfig+0x688>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff f98f 	bl	80013e8 <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7ff f98a 	bl	80013e8 <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0b2      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020e2:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	029b      	lsls	r3, r3, #10
 80020ea:	4013      	ands	r3, r2
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x588>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020f0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <HAL_RCC_OscConfig+0x5b4>
 80020fa:	e0a4      	b.n	8002246 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fc:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	220c      	movs	r2, #12
 8002102:	4013      	ands	r3, r2
 8002104:	2b08      	cmp	r3, #8
 8002106:	d100      	bne.n	800210a <HAL_RCC_OscConfig+0x5c2>
 8002108:	e078      	b.n	80021fc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	2b02      	cmp	r3, #2
 8002110:	d14c      	bne.n	80021ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002118:	492e      	ldr	r1, [pc, #184]	@ (80021d4 <HAL_RCC_OscConfig+0x68c>)
 800211a:	400a      	ands	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff f963 	bl	80013e8 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff f95e 	bl	80013e8 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e086      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213a:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	049b      	lsls	r3, r3, #18
 8002142:	4013      	ands	r3, r2
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002146:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	220f      	movs	r2, #15
 800214c:	4393      	bics	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002156:	430a      	orrs	r2, r1
 8002158:	62da      	str	r2, [r3, #44]	@ 0x2c
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <HAL_RCC_OscConfig+0x690>)
 8002160:	4013      	ands	r3, r2
 8002162:	0019      	movs	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	431a      	orrs	r2, r3
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 800217a:	2180      	movs	r1, #128	@ 0x80
 800217c:	0449      	lsls	r1, r1, #17
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff f931 	bl	80013e8 <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f92c 	bl	80013e8 <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e054      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	049b      	lsls	r3, r3, #18
 80021a6:	4013      	ands	r3, r2
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x644>
 80021aa:	e04c      	b.n	8002246 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <HAL_RCC_OscConfig+0x67c>)
 80021b2:	4908      	ldr	r1, [pc, #32]	@ (80021d4 <HAL_RCC_OscConfig+0x68c>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f916 	bl	80013e8 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x6a6>
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	40021000 	.word	0x40021000
 80021c8:	00001388 	.word	0x00001388
 80021cc:	efffffff 	.word	0xefffffff
 80021d0:	fffeffff 	.word	0xfffeffff
 80021d4:	feffffff 	.word	0xfeffffff
 80021d8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f904 	bl	80013e8 <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e02c      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ee:	4b18      	ldr	r3, [pc, #96]	@ (8002250 <HAL_RCC_OscConfig+0x708>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	049b      	lsls	r3, r3, #18
 80021f6:	4013      	ands	r3, r2
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x694>
 80021fa:	e024      	b.n	8002246 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e01f      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_RCC_OscConfig+0x708>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_RCC_OscConfig+0x708>)
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002212:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	23c0      	movs	r3, #192	@ 0xc0
 8002218:	025b      	lsls	r3, r3, #9
 800221a:	401a      	ands	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	429a      	cmp	r2, r3
 8002222:	d10e      	bne.n	8002242 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	220f      	movs	r2, #15
 8002228:	401a      	ands	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	23f0      	movs	r3, #240	@ 0xf0
 8002236:	039b      	lsls	r3, r3, #14
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b008      	add	sp, #32
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0bf      	b.n	80023e8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002268:	4b61      	ldr	r3, [pc, #388]	@ (80023f0 <HAL_RCC_ClockConfig+0x19c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2201      	movs	r2, #1
 800226e:	4013      	ands	r3, r2
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d911      	bls.n	800229a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b5e      	ldr	r3, [pc, #376]	@ (80023f0 <HAL_RCC_ClockConfig+0x19c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	4393      	bics	r3, r2
 800227e:	0019      	movs	r1, r3
 8002280:	4b5b      	ldr	r3, [pc, #364]	@ (80023f0 <HAL_RCC_ClockConfig+0x19c>)
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002288:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <HAL_RCC_ClockConfig+0x19c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0a6      	b.n	80023e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d015      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2204      	movs	r2, #4
 80022aa:	4013      	ands	r3, r2
 80022ac:	d006      	beq.n	80022bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022ae:	4b51      	ldr	r3, [pc, #324]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4b50      	ldr	r3, [pc, #320]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80022b4:	21e0      	movs	r1, #224	@ 0xe0
 80022b6:	00c9      	lsls	r1, r1, #3
 80022b8:	430a      	orrs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	22f0      	movs	r2, #240	@ 0xf0
 80022c2:	4393      	bics	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	4b4a      	ldr	r3, [pc, #296]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2201      	movs	r2, #1
 80022d6:	4013      	ands	r3, r2
 80022d8:	d04c      	beq.n	8002374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b44      	ldr	r3, [pc, #272]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	029b      	lsls	r3, r3, #10
 80022ea:	4013      	ands	r3, r2
 80022ec:	d120      	bne.n	8002330 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07a      	b.n	80023e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b3e      	ldr	r3, [pc, #248]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	049b      	lsls	r3, r3, #18
 8002302:	4013      	ands	r3, r2
 8002304:	d114      	bne.n	8002330 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06e      	b.n	80023e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002312:	4b38      	ldr	r3, [pc, #224]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	4013      	ands	r3, r2
 800231c:	d108      	bne.n	8002330 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e062      	b.n	80023e8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	4b34      	ldr	r3, [pc, #208]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e05b      	b.n	80023e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002330:	4b30      	ldr	r3, [pc, #192]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	4393      	bics	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4b2d      	ldr	r3, [pc, #180]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002344:	f7ff f850 	bl	80013e8 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234c:	e009      	b.n	8002362 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234e:	f7ff f84b 	bl	80013e8 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	4a27      	ldr	r2, [pc, #156]	@ (80023f8 <HAL_RCC_ClockConfig+0x1a4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e042      	b.n	80023e8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	220c      	movs	r2, #12
 8002368:	401a      	ands	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	429a      	cmp	r2, r3
 8002372:	d1ec      	bne.n	800234e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002374:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <HAL_RCC_ClockConfig+0x19c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2201      	movs	r2, #1
 800237a:	4013      	ands	r3, r2
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d211      	bcs.n	80023a6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <HAL_RCC_ClockConfig+0x19c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2201      	movs	r2, #1
 8002388:	4393      	bics	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <HAL_RCC_ClockConfig+0x19c>)
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002394:	4b16      	ldr	r3, [pc, #88]	@ (80023f0 <HAL_RCC_ClockConfig+0x19c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	4013      	ands	r3, r2
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e020      	b.n	80023e8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2204      	movs	r2, #4
 80023ac:	4013      	ands	r3, r2
 80023ae:	d009      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <HAL_RCC_ClockConfig+0x1a8>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023c4:	f000 f820 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c8:	0001      	movs	r1, r0
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_RCC_ClockConfig+0x1a0>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	220f      	movs	r2, #15
 80023d2:	4013      	ands	r3, r2
 80023d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_RCC_ClockConfig+0x1ac>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	000a      	movs	r2, r1
 80023da:	40da      	lsrs	r2, r3
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x1b0>)
 80023de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f7fe fe83 	bl	80010ec <HAL_InitTick>
  
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40022000 	.word	0x40022000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	00001388 	.word	0x00001388
 80023fc:	fffff8ff 	.word	0xfffff8ff
 8002400:	08003dd0 	.word	0x08003dd0
 8002404:	20000050 	.word	0x20000050

08002408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002422:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	220c      	movs	r2, #12
 800242c:	4013      	ands	r3, r2
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d046      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002432:	d848      	bhi.n	80024c6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002434:	2b04      	cmp	r3, #4
 8002436:	d002      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x36>
 8002438:	2b08      	cmp	r3, #8
 800243a:	d003      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x3c>
 800243c:	e043      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243e:	4b27      	ldr	r3, [pc, #156]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002440:	613b      	str	r3, [r7, #16]
      break;
 8002442:	e043      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	0c9b      	lsrs	r3, r3, #18
 8002448:	220f      	movs	r2, #15
 800244a:	4013      	ands	r3, r2
 800244c:	4a24      	ldr	r2, [pc, #144]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002452:	4b21      	ldr	r3, [pc, #132]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	220f      	movs	r2, #15
 8002458:	4013      	ands	r3, r2
 800245a:	4a22      	ldr	r2, [pc, #136]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
 800245e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	23c0      	movs	r3, #192	@ 0xc0
 8002464:	025b      	lsls	r3, r3, #9
 8002466:	401a      	ands	r2, r3
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	025b      	lsls	r3, r3, #9
 800246c:	429a      	cmp	r2, r3
 800246e:	d109      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	481a      	ldr	r0, [pc, #104]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002474:	f7fd fe48 	bl	8000108 <__udivsi3>
 8002478:	0003      	movs	r3, r0
 800247a:	001a      	movs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4353      	muls	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e01a      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	23c0      	movs	r3, #192	@ 0xc0
 8002488:	025b      	lsls	r3, r3, #9
 800248a:	401a      	ands	r2, r3
 800248c:	23c0      	movs	r3, #192	@ 0xc0
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	429a      	cmp	r2, r3
 8002492:	d109      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	4814      	ldr	r0, [pc, #80]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002498:	f7fd fe36 	bl	8000108 <__udivsi3>
 800249c:	0003      	movs	r3, r0
 800249e:	001a      	movs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4353      	muls	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e008      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	480c      	ldr	r0, [pc, #48]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80024ac:	f7fd fe2c 	bl	8000108 <__udivsi3>
 80024b0:	0003      	movs	r3, r0
 80024b2:	001a      	movs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4353      	muls	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	613b      	str	r3, [r7, #16]
      break;
 80024be:	e005      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80024c2:	613b      	str	r3, [r7, #16]
      break;
 80024c4:	e002      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c6:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80024c8:	613b      	str	r3, [r7, #16]
      break;
 80024ca:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024cc:	693b      	ldr	r3, [r7, #16]
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b006      	add	sp, #24
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	40021000 	.word	0x40021000
 80024dc:	007a1200 	.word	0x007a1200
 80024e0:	08003de8 	.word	0x08003de8
 80024e4:	08003df8 	.word	0x08003df8
 80024e8:	02dc6c00 	.word	0x02dc6c00

080024ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b02      	ldr	r3, [pc, #8]	@ (80024fc <HAL_RCC_GetHCLKFreq+0x10>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	20000050 	.word	0x20000050

08002500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002504:	f7ff fff2 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002508:	0001      	movs	r1, r0
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	2207      	movs	r2, #7
 8002512:	4013      	ands	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	40d9      	lsrs	r1, r3
 800251a:	000b      	movs	r3, r1
}    
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	40021000 	.word	0x40021000
 8002528:	08003de0 	.word	0x08003de0

0800252c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800253c:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <HAL_RCC_GetClockConfig+0x4c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2203      	movs	r2, #3
 8002542:	401a      	ands	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_GetClockConfig+0x4c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	22f0      	movs	r2, #240	@ 0xf0
 800254e:	401a      	ands	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002554:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <HAL_RCC_GetClockConfig+0x4c>)
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	23e0      	movs	r3, #224	@ 0xe0
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_RCC_GetClockConfig+0x50>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	401a      	ands	r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b002      	add	sp, #8
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	40021000 	.word	0x40021000
 800257c:	40022000 	.word	0x40022000

08002580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	4013      	ands	r3, r2
 800259a:	d100      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800259c:	e08e      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2017      	movs	r0, #23
 80025a0:	183b      	adds	r3, r7, r0
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	055b      	lsls	r3, r3, #21
 80025ae:	4013      	ands	r3, r2
 80025b0:	d110      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025b8:	2180      	movs	r1, #128	@ 0x80
 80025ba:	0549      	lsls	r1, r1, #21
 80025bc:	430a      	orrs	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
 80025c0:	4b67      	ldr	r3, [pc, #412]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	055b      	lsls	r3, r3, #21
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	183b      	adds	r3, r7, r0
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b63      	ldr	r3, [pc, #396]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	d11a      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e0:	4b60      	ldr	r3, [pc, #384]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025e6:	2180      	movs	r1, #128	@ 0x80
 80025e8:	0049      	lsls	r1, r1, #1
 80025ea:	430a      	orrs	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fefb 	bl	80013e8 <HAL_GetTick>
 80025f2:	0003      	movs	r3, r0
 80025f4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	e008      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f8:	f7fe fef6 	bl	80013e8 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	@ 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0a6      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b56      	ldr	r3, [pc, #344]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4013      	ands	r3, r2
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002616:	4b52      	ldr	r3, [pc, #328]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002618:	6a1a      	ldr	r2, [r3, #32]
 800261a:	23c0      	movs	r3, #192	@ 0xc0
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4013      	ands	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d034      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	23c0      	movs	r3, #192	@ 0xc0
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4013      	ands	r3, r2
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d02c      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002638:	4b49      	ldr	r3, [pc, #292]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4a4a      	ldr	r2, [pc, #296]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800263e:	4013      	ands	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002642:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	4b46      	ldr	r3, [pc, #280]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002648:	2180      	movs	r1, #128	@ 0x80
 800264a:	0249      	lsls	r1, r1, #9
 800264c:	430a      	orrs	r2, r1
 800264e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002650:	4b43      	ldr	r3, [pc, #268]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002652:	6a1a      	ldr	r2, [r3, #32]
 8002654:	4b42      	ldr	r3, [pc, #264]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002656:	4945      	ldr	r1, [pc, #276]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002658:	400a      	ands	r2, r1
 800265a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800265c:	4b40      	ldr	r3, [pc, #256]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe febd 	bl	80013e8 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	e009      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7fe feb8 	bl	80013e8 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	4a3c      	ldr	r2, [pc, #240]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e067      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b35      	ldr	r3, [pc, #212]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	2202      	movs	r2, #2
 800268e:	4013      	ands	r3, r2
 8002690:	d0f0      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002692:	4b33      	ldr	r3, [pc, #204]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a34      	ldr	r2, [pc, #208]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002698:	4013      	ands	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026a6:	2317      	movs	r3, #23
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026b6:	492f      	ldr	r1, [pc, #188]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80026b8:	400a      	ands	r2, r1
 80026ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	2203      	movs	r2, #3
 80026cc:	4393      	bics	r3, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026d6:	430a      	orrs	r2, r1
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	4a23      	ldr	r2, [pc, #140]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2220      	movs	r2, #32
 80026fe:	4013      	ands	r3, r2
 8002700:	d009      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002702:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	2210      	movs	r2, #16
 8002708:	4393      	bics	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002712:	430a      	orrs	r2, r1
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2380      	movs	r3, #128	@ 0x80
 800271c:	029b      	lsls	r3, r3, #10
 800271e:	4013      	ands	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002722:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	2280      	movs	r2, #128	@ 0x80
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002732:	430a      	orrs	r2, r1
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4013      	ands	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	2240      	movs	r2, #64	@ 0x40
 8002748:	4393      	bics	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002752:	430a      	orrs	r2, r1
 8002754:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b006      	add	sp, #24
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
 8002768:	fffffcff 	.word	0xfffffcff
 800276c:	fffeffff 	.word	0xfffeffff
 8002770:	00001388 	.word	0x00001388
 8002774:	efffffff 	.word	0xefffffff
 8002778:	fffcffff 	.word	0xfffcffff

0800277c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e042      	b.n	8002814 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223d      	movs	r2, #61	@ 0x3d
 8002792:	5c9b      	ldrb	r3, [r3, r2]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	223c      	movs	r2, #60	@ 0x3c
 800279e:	2100      	movs	r1, #0
 80027a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 f839 	bl	800281c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	223d      	movs	r2, #61	@ 0x3d
 80027ae:	2102      	movs	r1, #2
 80027b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	0019      	movs	r1, r3
 80027bc:	0010      	movs	r0, r2
 80027be:	f000 f995 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2246      	movs	r2, #70	@ 0x46
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	223e      	movs	r2, #62	@ 0x3e
 80027ce:	2101      	movs	r1, #1
 80027d0:	5499      	strb	r1, [r3, r2]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	223f      	movs	r2, #63	@ 0x3f
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2240      	movs	r2, #64	@ 0x40
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2241      	movs	r2, #65	@ 0x41
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2242      	movs	r2, #66	@ 0x42
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2243      	movs	r2, #67	@ 0x43
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2244      	movs	r2, #68	@ 0x44
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2245      	movs	r2, #69	@ 0x45
 8002806:	2101      	movs	r1, #1
 8002808:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223d      	movs	r2, #61	@ 0x3d
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002824:	46c0      	nop			@ (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	223d      	movs	r2, #61	@ 0x3d
 8002838:	5c9b      	ldrb	r3, [r3, r2]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d001      	beq.n	8002844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e03b      	b.n	80028bc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	223d      	movs	r2, #61	@ 0x3d
 8002848:	2102      	movs	r1, #2
 800284a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	430a      	orrs	r2, r1
 800285a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <HAL_TIM_Base_Start_IT+0x98>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00f      	beq.n	8002886 <HAL_TIM_Base_Start_IT+0x5a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	05db      	lsls	r3, r3, #23
 800286e:	429a      	cmp	r2, r3
 8002870:	d009      	beq.n	8002886 <HAL_TIM_Base_Start_IT+0x5a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a14      	ldr	r2, [pc, #80]	@ (80028c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_TIM_Base_Start_IT+0x5a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <HAL_TIM_Base_Start_IT+0xa0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d111      	bne.n	80028aa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2207      	movs	r2, #7
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b06      	cmp	r3, #6
 8002896:	d010      	beq.n	80028ba <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2101      	movs	r1, #1
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a8:	e007      	b.n	80028ba <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b004      	add	sp, #16
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40014000 	.word	0x40014000

080028d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2202      	movs	r2, #2
 80028ec:	4013      	ands	r3, r2
 80028ee:	d021      	beq.n	8002934 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2202      	movs	r2, #2
 80028f4:	4013      	ands	r3, r2
 80028f6:	d01d      	beq.n	8002934 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2203      	movs	r2, #3
 80028fe:	4252      	negs	r2, r2
 8002900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2203      	movs	r2, #3
 8002910:	4013      	ands	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f8d0 	bl	8002abc <HAL_TIM_IC_CaptureCallback>
 800291c:	e007      	b.n	800292e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f8c3 	bl	8002aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f000 f8cf 	bl	8002acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2204      	movs	r2, #4
 8002938:	4013      	ands	r3, r2
 800293a:	d022      	beq.n	8002982 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2204      	movs	r2, #4
 8002940:	4013      	ands	r3, r2
 8002942:	d01e      	beq.n	8002982 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2205      	movs	r2, #5
 800294a:	4252      	negs	r2, r2
 800294c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2202      	movs	r2, #2
 8002952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	23c0      	movs	r3, #192	@ 0xc0
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 f8a9 	bl	8002abc <HAL_TIM_IC_CaptureCallback>
 800296a:	e007      	b.n	800297c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 f89c 	bl	8002aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 f8a8 	bl	8002acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2208      	movs	r2, #8
 8002986:	4013      	ands	r3, r2
 8002988:	d021      	beq.n	80029ce <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2208      	movs	r2, #8
 800298e:	4013      	ands	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2209      	movs	r2, #9
 8002998:	4252      	negs	r2, r2
 800299a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2204      	movs	r2, #4
 80029a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2203      	movs	r2, #3
 80029aa:	4013      	ands	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 f883 	bl	8002abc <HAL_TIM_IC_CaptureCallback>
 80029b6:	e007      	b.n	80029c8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f876 	bl	8002aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 f882 	bl	8002acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2210      	movs	r2, #16
 80029d2:	4013      	ands	r3, r2
 80029d4:	d022      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2210      	movs	r2, #16
 80029da:	4013      	ands	r3, r2
 80029dc:	d01e      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2211      	movs	r2, #17
 80029e4:	4252      	negs	r2, r2
 80029e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2208      	movs	r2, #8
 80029ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	23c0      	movs	r3, #192	@ 0xc0
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	d004      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 f85c 	bl	8002abc <HAL_TIM_IC_CaptureCallback>
 8002a04:	e007      	b.n	8002a16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f84f 	bl	8002aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 f85b 	bl	8002acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4013      	ands	r3, r2
 8002a22:	d00c      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d008      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2202      	movs	r2, #2
 8002a32:	4252      	negs	r2, r2
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fd fdb5 	bl	80005a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2280      	movs	r2, #128	@ 0x80
 8002a42:	4013      	ands	r3, r2
 8002a44:	d00c      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2280      	movs	r2, #128	@ 0x80
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d008      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2281      	movs	r2, #129	@ 0x81
 8002a54:	4252      	negs	r2, r2
 8002a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f8dc 	bl	8002c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	4013      	ands	r3, r2
 8002a66:	d00c      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	@ 0x40
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d008      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2241      	movs	r2, #65	@ 0x41
 8002a76:	4252      	negs	r2, r2
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f82d 	bl	8002adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2220      	movs	r2, #32
 8002a86:	4013      	ands	r3, r2
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d008      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2221      	movs	r2, #33	@ 0x21
 8002a98:	4252      	negs	r2, r2
 8002a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f8b2 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3b      	ldr	r2, [pc, #236]	@ (8002bec <TIM_Base_SetConfig+0x100>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d008      	beq.n	8002b16 <TIM_Base_SetConfig+0x2a>
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	05db      	lsls	r3, r3, #23
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d003      	beq.n	8002b16 <TIM_Base_SetConfig+0x2a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a37      	ldr	r2, [pc, #220]	@ (8002bf0 <TIM_Base_SetConfig+0x104>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d108      	bne.n	8002b28 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2270      	movs	r2, #112	@ 0x70
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a30      	ldr	r2, [pc, #192]	@ (8002bec <TIM_Base_SetConfig+0x100>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <TIM_Base_SetConfig+0x76>
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	05db      	lsls	r3, r3, #23
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d013      	beq.n	8002b62 <TIM_Base_SetConfig+0x76>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <TIM_Base_SetConfig+0x104>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00f      	beq.n	8002b62 <TIM_Base_SetConfig+0x76>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf4 <TIM_Base_SetConfig+0x108>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00b      	beq.n	8002b62 <TIM_Base_SetConfig+0x76>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <TIM_Base_SetConfig+0x10c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <TIM_Base_SetConfig+0x76>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <TIM_Base_SetConfig+0x110>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0x76>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a28      	ldr	r2, [pc, #160]	@ (8002c00 <TIM_Base_SetConfig+0x114>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a27      	ldr	r2, [pc, #156]	@ (8002c04 <TIM_Base_SetConfig+0x118>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	4393      	bics	r3, r2
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a13      	ldr	r2, [pc, #76]	@ (8002bec <TIM_Base_SetConfig+0x100>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <TIM_Base_SetConfig+0xce>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <TIM_Base_SetConfig+0x10c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <TIM_Base_SetConfig+0xce>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <TIM_Base_SetConfig+0x110>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_Base_SetConfig+0xce>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <TIM_Base_SetConfig+0x114>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d103      	bne.n	8002bc2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d106      	bne.n	8002be2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4393      	bics	r3, r2
 8002bdc:	001a      	movs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]
  }
}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40002000 	.word	0x40002000
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800
 8002c04:	fffffcff 	.word	0xfffffcff

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e044      	b.n	8002cc4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2278      	movs	r2, #120	@ 0x78
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fe fb2d 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2224      	movs	r2, #36	@ 0x24
 8002c56:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	438a      	bics	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fb3c 	bl	80032f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f000 f9b0 	bl	8002fe0 <UART_SetConfig>
 8002c80:	0003      	movs	r3, r0
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e01c      	b.n	8002cc4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	490d      	ldr	r1, [pc, #52]	@ (8002ccc <HAL_UART_Init+0xa4>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	212a      	movs	r1, #42	@ 0x2a
 8002ca6:	438a      	bics	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 fbcb 	bl	8003458 <UART_CheckIdleState>
 8002cc2:	0003      	movs	r3, r0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	ffffb7ff 	.word	0xffffb7ff

08002cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d000      	beq.n	8002cea <HAL_UART_Transmit+0x1a>
 8002ce8:	e08c      	b.n	8002e04 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_UART_Transmit+0x28>
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e084      	b.n	8002e06 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	015b      	lsls	r3, r3, #5
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d109      	bne.n	8002d1c <HAL_UART_Transmit+0x4c>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e074      	b.n	8002e06 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2284      	movs	r2, #132	@ 0x84
 8002d20:	2100      	movs	r1, #0
 8002d22:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2221      	movs	r2, #33	@ 0x21
 8002d28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fb5d 	bl	80013e8 <HAL_GetTick>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1dba      	adds	r2, r7, #6
 8002d36:	2150      	movs	r1, #80	@ 0x50
 8002d38:	8812      	ldrh	r2, [r2, #0]
 8002d3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1dba      	adds	r2, r7, #6
 8002d40:	2152      	movs	r1, #82	@ 0x52
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	015b      	lsls	r3, r3, #5
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d108      	bne.n	8002d64 <HAL_UART_Transmit+0x94>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	e003      	b.n	8002d6c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d6c:	e02f      	b.n	8002dce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	0013      	movs	r3, r2
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2180      	movs	r1, #128	@ 0x80
 8002d7c:	f000 fc14 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e03b      	b.n	8002e06 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	881a      	ldrh	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	05d2      	lsls	r2, r2, #23
 8002d9e:	0dd2      	lsrs	r2, r2, #23
 8002da0:	b292      	uxth	r2, r2
 8002da2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	3302      	adds	r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e007      	b.n	8002dbc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2252      	movs	r2, #82	@ 0x52
 8002dc0:	5a9b      	ldrh	r3, [r3, r2]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b299      	uxth	r1, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2252      	movs	r2, #82	@ 0x52
 8002dcc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2252      	movs	r2, #82	@ 0x52
 8002dd2:	5a9b      	ldrh	r3, [r3, r2]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1c9      	bne.n	8002d6e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	0013      	movs	r3, r2
 8002de4:	2200      	movs	r2, #0
 8002de6:	2140      	movs	r1, #64	@ 0x40
 8002de8:	f000 fbde 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e005      	b.n	8002e06 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	0018      	movs	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b008      	add	sp, #32
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	@ 0x28
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	1dbb      	adds	r3, r7, #6
 8002e1e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	589b      	ldr	r3, [r3, r2]
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d000      	beq.n	8002e2c <HAL_UART_Receive+0x1c>
 8002e2a:	e0d1      	b.n	8002fd0 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_UART_Receive+0x2a>
 8002e32:	1dbb      	adds	r3, r7, #6
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0c9      	b.n	8002fd2 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	015b      	lsls	r3, r3, #5
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d109      	bne.n	8002e5e <HAL_UART_Receive+0x4e>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0b9      	b.n	8002fd2 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2284      	movs	r2, #132	@ 0x84
 8002e62:	2100      	movs	r1, #0
 8002e64:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2280      	movs	r2, #128	@ 0x80
 8002e6a:	2122      	movs	r1, #34	@ 0x22
 8002e6c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e74:	f7fe fab8 	bl	80013e8 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1dba      	adds	r2, r7, #6
 8002e80:	2158      	movs	r1, #88	@ 0x58
 8002e82:	8812      	ldrh	r2, [r2, #0]
 8002e84:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1dba      	adds	r2, r7, #6
 8002e8a:	215a      	movs	r1, #90	@ 0x5a
 8002e8c:	8812      	ldrh	r2, [r2, #0]
 8002e8e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	2380      	movs	r3, #128	@ 0x80
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_UART_Receive+0xa8>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <HAL_UART_Receive+0x9e>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	225c      	movs	r2, #92	@ 0x5c
 8002ea8:	494c      	ldr	r1, [pc, #304]	@ (8002fdc <HAL_UART_Receive+0x1cc>)
 8002eaa:	5299      	strh	r1, [r3, r2]
 8002eac:	e02e      	b.n	8002f0c <HAL_UART_Receive+0xfc>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	225c      	movs	r2, #92	@ 0x5c
 8002eb2:	21ff      	movs	r1, #255	@ 0xff
 8002eb4:	5299      	strh	r1, [r3, r2]
 8002eb6:	e029      	b.n	8002f0c <HAL_UART_Receive+0xfc>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_UART_Receive+0xcc>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <HAL_UART_Receive+0xc2>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	225c      	movs	r2, #92	@ 0x5c
 8002ecc:	21ff      	movs	r1, #255	@ 0xff
 8002ece:	5299      	strh	r1, [r3, r2]
 8002ed0:	e01c      	b.n	8002f0c <HAL_UART_Receive+0xfc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	225c      	movs	r2, #92	@ 0x5c
 8002ed6:	217f      	movs	r1, #127	@ 0x7f
 8002ed8:	5299      	strh	r1, [r3, r2]
 8002eda:	e017      	b.n	8002f0c <HAL_UART_Receive+0xfc>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	055b      	lsls	r3, r3, #21
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d10d      	bne.n	8002f04 <HAL_UART_Receive+0xf4>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d104      	bne.n	8002efa <HAL_UART_Receive+0xea>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	225c      	movs	r2, #92	@ 0x5c
 8002ef4:	217f      	movs	r1, #127	@ 0x7f
 8002ef6:	5299      	strh	r1, [r3, r2]
 8002ef8:	e008      	b.n	8002f0c <HAL_UART_Receive+0xfc>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	225c      	movs	r2, #92	@ 0x5c
 8002efe:	213f      	movs	r1, #63	@ 0x3f
 8002f00:	5299      	strh	r1, [r3, r2]
 8002f02:	e003      	b.n	8002f0c <HAL_UART_Receive+0xfc>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	225c      	movs	r2, #92	@ 0x5c
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002f0c:	2312      	movs	r3, #18
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	215c      	movs	r1, #92	@ 0x5c
 8002f14:	5a52      	ldrh	r2, [r2, r1]
 8002f16:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	015b      	lsls	r3, r3, #5
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d108      	bne.n	8002f36 <HAL_UART_Receive+0x126>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e003      	b.n	8002f3e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f3e:	e03b      	b.n	8002fb8 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	0013      	movs	r3, r2
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	f000 fb2b 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 8002f52:	1e03      	subs	r3, r0, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	2120      	movs	r1, #32
 8002f5c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e037      	b.n	8002fd2 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10e      	bne.n	8002f86 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2212      	movs	r2, #18
 8002f72:	18ba      	adds	r2, r7, r2
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3302      	adds	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e00f      	b.n	8002fa6 <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2212      	movs	r2, #18
 8002f92:	18ba      	adds	r2, r7, r2
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	225a      	movs	r2, #90	@ 0x5a
 8002faa:	5a9b      	ldrh	r3, [r3, r2]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b299      	uxth	r1, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	225a      	movs	r2, #90	@ 0x5a
 8002fb6:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	225a      	movs	r2, #90	@ 0x5a
 8002fbc:	5a9b      	ldrh	r3, [r3, r2]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1bd      	bne.n	8002f40 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2280      	movs	r2, #128	@ 0x80
 8002fc8:	2120      	movs	r1, #32
 8002fca:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b008      	add	sp, #32
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	000001ff 	.word	0x000001ff

08002fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe8:	231e      	movs	r3, #30
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4aaf      	ldr	r2, [pc, #700]	@ (80032cc <UART_SetConfig+0x2ec>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4aaa      	ldr	r2, [pc, #680]	@ (80032d0 <UART_SetConfig+0x2f0>)
 8003026:	4013      	ands	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4aa1      	ldr	r2, [pc, #644]	@ (80032d4 <UART_SetConfig+0x2f4>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a9d      	ldr	r2, [pc, #628]	@ (80032d8 <UART_SetConfig+0x2f8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d127      	bne.n	80030b6 <UART_SetConfig+0xd6>
 8003066:	4b9d      	ldr	r3, [pc, #628]	@ (80032dc <UART_SetConfig+0x2fc>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	2203      	movs	r2, #3
 800306c:	4013      	ands	r3, r2
 800306e:	2b03      	cmp	r3, #3
 8003070:	d00d      	beq.n	800308e <UART_SetConfig+0xae>
 8003072:	d81b      	bhi.n	80030ac <UART_SetConfig+0xcc>
 8003074:	2b02      	cmp	r3, #2
 8003076:	d014      	beq.n	80030a2 <UART_SetConfig+0xc2>
 8003078:	d818      	bhi.n	80030ac <UART_SetConfig+0xcc>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <UART_SetConfig+0xa4>
 800307e:	2b01      	cmp	r3, #1
 8003080:	d00a      	beq.n	8003098 <UART_SetConfig+0xb8>
 8003082:	e013      	b.n	80030ac <UART_SetConfig+0xcc>
 8003084:	231f      	movs	r3, #31
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e065      	b.n	800315a <UART_SetConfig+0x17a>
 800308e:	231f      	movs	r3, #31
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2202      	movs	r2, #2
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e060      	b.n	800315a <UART_SetConfig+0x17a>
 8003098:	231f      	movs	r3, #31
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2204      	movs	r2, #4
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e05b      	b.n	800315a <UART_SetConfig+0x17a>
 80030a2:	231f      	movs	r3, #31
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2208      	movs	r2, #8
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e056      	b.n	800315a <UART_SetConfig+0x17a>
 80030ac:	231f      	movs	r3, #31
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2210      	movs	r2, #16
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e051      	b.n	800315a <UART_SetConfig+0x17a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a89      	ldr	r2, [pc, #548]	@ (80032e0 <UART_SetConfig+0x300>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d134      	bne.n	800312a <UART_SetConfig+0x14a>
 80030c0:	4b86      	ldr	r3, [pc, #536]	@ (80032dc <UART_SetConfig+0x2fc>)
 80030c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030c4:	23c0      	movs	r3, #192	@ 0xc0
 80030c6:	029b      	lsls	r3, r3, #10
 80030c8:	4013      	ands	r3, r2
 80030ca:	22c0      	movs	r2, #192	@ 0xc0
 80030cc:	0292      	lsls	r2, r2, #10
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d017      	beq.n	8003102 <UART_SetConfig+0x122>
 80030d2:	22c0      	movs	r2, #192	@ 0xc0
 80030d4:	0292      	lsls	r2, r2, #10
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d822      	bhi.n	8003120 <UART_SetConfig+0x140>
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	0292      	lsls	r2, r2, #10
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <UART_SetConfig+0x136>
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	0292      	lsls	r2, r2, #10
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d81a      	bhi.n	8003120 <UART_SetConfig+0x140>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <UART_SetConfig+0x118>
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	0252      	lsls	r2, r2, #9
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00a      	beq.n	800310c <UART_SetConfig+0x12c>
 80030f6:	e013      	b.n	8003120 <UART_SetConfig+0x140>
 80030f8:	231f      	movs	r3, #31
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e02b      	b.n	800315a <UART_SetConfig+0x17a>
 8003102:	231f      	movs	r3, #31
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e026      	b.n	800315a <UART_SetConfig+0x17a>
 800310c:	231f      	movs	r3, #31
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2204      	movs	r2, #4
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e021      	b.n	800315a <UART_SetConfig+0x17a>
 8003116:	231f      	movs	r3, #31
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2208      	movs	r2, #8
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e01c      	b.n	800315a <UART_SetConfig+0x17a>
 8003120:	231f      	movs	r3, #31
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2210      	movs	r2, #16
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e017      	b.n	800315a <UART_SetConfig+0x17a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6d      	ldr	r2, [pc, #436]	@ (80032e4 <UART_SetConfig+0x304>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d104      	bne.n	800313e <UART_SetConfig+0x15e>
 8003134:	231f      	movs	r3, #31
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e00d      	b.n	800315a <UART_SetConfig+0x17a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a69      	ldr	r2, [pc, #420]	@ (80032e8 <UART_SetConfig+0x308>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d104      	bne.n	8003152 <UART_SetConfig+0x172>
 8003148:	231f      	movs	r3, #31
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e003      	b.n	800315a <UART_SetConfig+0x17a>
 8003152:	231f      	movs	r3, #31
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2210      	movs	r2, #16
 8003158:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	2380      	movs	r3, #128	@ 0x80
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	429a      	cmp	r2, r3
 8003164:	d15c      	bne.n	8003220 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003166:	231f      	movs	r3, #31
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d015      	beq.n	800319c <UART_SetConfig+0x1bc>
 8003170:	dc18      	bgt.n	80031a4 <UART_SetConfig+0x1c4>
 8003172:	2b04      	cmp	r3, #4
 8003174:	d00d      	beq.n	8003192 <UART_SetConfig+0x1b2>
 8003176:	dc15      	bgt.n	80031a4 <UART_SetConfig+0x1c4>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <UART_SetConfig+0x1a2>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d005      	beq.n	800318c <UART_SetConfig+0x1ac>
 8003180:	e010      	b.n	80031a4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003182:	f7ff f9bd 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 8003186:	0003      	movs	r3, r0
 8003188:	61bb      	str	r3, [r7, #24]
        break;
 800318a:	e012      	b.n	80031b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b57      	ldr	r3, [pc, #348]	@ (80032ec <UART_SetConfig+0x30c>)
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e00f      	b.n	80031b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7ff f939 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 8003196:	0003      	movs	r3, r0
 8003198:	61bb      	str	r3, [r7, #24]
        break;
 800319a:	e00a      	b.n	80031b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319c:	2380      	movs	r3, #128	@ 0x80
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	61bb      	str	r3, [r7, #24]
        break;
 80031a2:	e006      	b.n	80031b2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031a8:	231e      	movs	r3, #30
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
        break;
 80031b0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d100      	bne.n	80031ba <UART_SetConfig+0x1da>
 80031b8:	e07a      	b.n	80032b0 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	005a      	lsls	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	18d2      	adds	r2, r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	0019      	movs	r1, r3
 80031cc:	0010      	movs	r0, r2
 80031ce:	f7fc ff9b 	bl	8000108 <__udivsi3>
 80031d2:	0003      	movs	r3, r0
 80031d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d91c      	bls.n	8003216 <UART_SetConfig+0x236>
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d217      	bcs.n	8003216 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	200e      	movs	r0, #14
 80031ec:	183b      	adds	r3, r7, r0
 80031ee:	210f      	movs	r1, #15
 80031f0:	438a      	bics	r2, r1
 80031f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2207      	movs	r2, #7
 80031fc:	4013      	ands	r3, r2
 80031fe:	b299      	uxth	r1, r3
 8003200:	183b      	adds	r3, r7, r0
 8003202:	183a      	adds	r2, r7, r0
 8003204:	8812      	ldrh	r2, [r2, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	183a      	adds	r2, r7, r0
 8003210:	8812      	ldrh	r2, [r2, #0]
 8003212:	60da      	str	r2, [r3, #12]
 8003214:	e04c      	b.n	80032b0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003216:	231e      	movs	r3, #30
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e047      	b.n	80032b0 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003220:	231f      	movs	r3, #31
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b08      	cmp	r3, #8
 8003228:	d015      	beq.n	8003256 <UART_SetConfig+0x276>
 800322a:	dc18      	bgt.n	800325e <UART_SetConfig+0x27e>
 800322c:	2b04      	cmp	r3, #4
 800322e:	d00d      	beq.n	800324c <UART_SetConfig+0x26c>
 8003230:	dc15      	bgt.n	800325e <UART_SetConfig+0x27e>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <UART_SetConfig+0x25c>
 8003236:	2b02      	cmp	r3, #2
 8003238:	d005      	beq.n	8003246 <UART_SetConfig+0x266>
 800323a:	e010      	b.n	800325e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800323c:	f7ff f960 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 8003240:	0003      	movs	r3, r0
 8003242:	61bb      	str	r3, [r7, #24]
        break;
 8003244:	e012      	b.n	800326c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003246:	4b29      	ldr	r3, [pc, #164]	@ (80032ec <UART_SetConfig+0x30c>)
 8003248:	61bb      	str	r3, [r7, #24]
        break;
 800324a:	e00f      	b.n	800326c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324c:	f7ff f8dc 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 8003250:	0003      	movs	r3, r0
 8003252:	61bb      	str	r3, [r7, #24]
        break;
 8003254:	e00a      	b.n	800326c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	61bb      	str	r3, [r7, #24]
        break;
 800325c:	e006      	b.n	800326c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003262:	231e      	movs	r3, #30
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
        break;
 800326a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01e      	beq.n	80032b0 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	085a      	lsrs	r2, r3, #1
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	18d2      	adds	r2, r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	0019      	movs	r1, r3
 8003282:	0010      	movs	r0, r2
 8003284:	f7fc ff40 	bl	8000108 <__udivsi3>
 8003288:	0003      	movs	r3, r0
 800328a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	d90a      	bls.n	80032a8 <UART_SetConfig+0x2c8>
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	2380      	movs	r3, #128	@ 0x80
 8003296:	025b      	lsls	r3, r3, #9
 8003298:	429a      	cmp	r2, r3
 800329a:	d205      	bcs.n	80032a8 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	b29a      	uxth	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	e003      	b.n	80032b0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80032a8:	231e      	movs	r3, #30
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032bc:	231e      	movs	r3, #30
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	781b      	ldrb	r3, [r3, #0]
}
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b008      	add	sp, #32
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	efff69f3 	.word	0xefff69f3
 80032d0:	ffffcfff 	.word	0xffffcfff
 80032d4:	fffff4ff 	.word	0xfffff4ff
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40004400 	.word	0x40004400
 80032e4:	40004800 	.word	0x40004800
 80032e8:	40004c00 	.word	0x40004c00
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	2208      	movs	r2, #8
 80032fe:	4013      	ands	r3, r2
 8003300:	d00b      	beq.n	800331a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a4a      	ldr	r2, [pc, #296]	@ (8003434 <UART_AdvFeatureConfig+0x144>)
 800330a:	4013      	ands	r3, r2
 800330c:	0019      	movs	r1, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	2201      	movs	r2, #1
 8003320:	4013      	ands	r3, r2
 8003322:	d00b      	beq.n	800333c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a43      	ldr	r2, [pc, #268]	@ (8003438 <UART_AdvFeatureConfig+0x148>)
 800332c:	4013      	ands	r3, r2
 800332e:	0019      	movs	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	2202      	movs	r2, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d00b      	beq.n	800335e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a3b      	ldr	r2, [pc, #236]	@ (800343c <UART_AdvFeatureConfig+0x14c>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	2204      	movs	r2, #4
 8003364:	4013      	ands	r3, r2
 8003366:	d00b      	beq.n	8003380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4a34      	ldr	r2, [pc, #208]	@ (8003440 <UART_AdvFeatureConfig+0x150>)
 8003370:	4013      	ands	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	2210      	movs	r2, #16
 8003386:	4013      	ands	r3, r2
 8003388:	d00b      	beq.n	80033a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a2c      	ldr	r2, [pc, #176]	@ (8003444 <UART_AdvFeatureConfig+0x154>)
 8003392:	4013      	ands	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	2220      	movs	r2, #32
 80033a8:	4013      	ands	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <UART_AdvFeatureConfig+0x158>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2240      	movs	r2, #64	@ 0x40
 80033ca:	4013      	ands	r3, r2
 80033cc:	d01d      	beq.n	800340a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <UART_AdvFeatureConfig+0x15c>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	0019      	movs	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	035b      	lsls	r3, r3, #13
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d10b      	bne.n	800340a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a15      	ldr	r2, [pc, #84]	@ (8003450 <UART_AdvFeatureConfig+0x160>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	0019      	movs	r1, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2280      	movs	r2, #128	@ 0x80
 8003410:	4013      	ands	r3, r2
 8003412:	d00b      	beq.n	800342c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a0e      	ldr	r2, [pc, #56]	@ (8003454 <UART_AdvFeatureConfig+0x164>)
 800341c:	4013      	ands	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }
}
 800342c:	46c0      	nop			@ (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}
 8003434:	ffff7fff 	.word	0xffff7fff
 8003438:	fffdffff 	.word	0xfffdffff
 800343c:	fffeffff 	.word	0xfffeffff
 8003440:	fffbffff 	.word	0xfffbffff
 8003444:	ffffefff 	.word	0xffffefff
 8003448:	ffffdfff 	.word	0xffffdfff
 800344c:	ffefffff 	.word	0xffefffff
 8003450:	ff9fffff 	.word	0xff9fffff
 8003454:	fff7ffff 	.word	0xfff7ffff

08003458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b092      	sub	sp, #72	@ 0x48
 800345c:	af02      	add	r7, sp, #8
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2284      	movs	r2, #132	@ 0x84
 8003464:	2100      	movs	r1, #0
 8003466:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003468:	f7fd ffbe 	bl	80013e8 <HAL_GetTick>
 800346c:	0003      	movs	r3, r0
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2208      	movs	r2, #8
 8003478:	4013      	ands	r3, r2
 800347a:	2b08      	cmp	r3, #8
 800347c:	d12c      	bne.n	80034d8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003480:	2280      	movs	r2, #128	@ 0x80
 8003482:	0391      	lsls	r1, r2, #14
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4a46      	ldr	r2, [pc, #280]	@ (80035a0 <UART_CheckIdleState+0x148>)
 8003488:	9200      	str	r2, [sp, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	f000 f88c 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 8003490:	1e03      	subs	r3, r0, #0
 8003492:	d021      	beq.n	80034d8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003494:	f3ef 8310 	mrs	r3, PRIMASK
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800349c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800349e:	2301      	movs	r3, #1
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	f383 8810 	msr	PRIMASK, r3
}
 80034a8:	46c0      	nop			@ (mov r8, r8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2180      	movs	r1, #128	@ 0x80
 80034b6:	438a      	bics	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2278      	movs	r2, #120	@ 0x78
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e05f      	b.n	8003598 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2204      	movs	r2, #4
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d146      	bne.n	8003574 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e8:	2280      	movs	r2, #128	@ 0x80
 80034ea:	03d1      	lsls	r1, r2, #15
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4a2c      	ldr	r2, [pc, #176]	@ (80035a0 <UART_CheckIdleState+0x148>)
 80034f0:	9200      	str	r2, [sp, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f000 f858 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 80034f8:	1e03      	subs	r3, r0, #0
 80034fa:	d03b      	beq.n	8003574 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003500:	60fb      	str	r3, [r7, #12]
  return(result);
 8003502:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003504:	637b      	str	r3, [r7, #52]	@ 0x34
 8003506:	2301      	movs	r3, #1
 8003508:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f383 8810 	msr	PRIMASK, r3
}
 8003510:	46c0      	nop			@ (mov r8, r8)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4921      	ldr	r1, [pc, #132]	@ (80035a4 <UART_CheckIdleState+0x14c>)
 800351e:	400a      	ands	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f383 8810 	msr	PRIMASK, r3
}
 800352c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352e:	f3ef 8310 	mrs	r3, PRIMASK
 8003532:	61bb      	str	r3, [r7, #24]
  return(result);
 8003534:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	633b      	str	r3, [r7, #48]	@ 0x30
 8003538:	2301      	movs	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f383 8810 	msr	PRIMASK, r3
}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	438a      	bics	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2280      	movs	r2, #128	@ 0x80
 8003564:	2120      	movs	r1, #32
 8003566:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2278      	movs	r2, #120	@ 0x78
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e011      	b.n	8003598 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	2120      	movs	r1, #32
 8003580:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2278      	movs	r2, #120	@ 0x78
 8003592:	2100      	movs	r1, #0
 8003594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b010      	add	sp, #64	@ 0x40
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	01ffffff 	.word	0x01ffffff
 80035a4:	fffffedf 	.word	0xfffffedf

080035a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	1dfb      	adds	r3, r7, #7
 80035b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b8:	e051      	b.n	800365e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	3301      	adds	r3, #1
 80035be:	d04e      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fd ff12 	bl	80013e8 <HAL_GetTick>
 80035c4:	0002      	movs	r2, r0
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e051      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2204      	movs	r2, #4
 80035e2:	4013      	ands	r3, r2
 80035e4:	d03b      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb6>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b80      	cmp	r3, #128	@ 0x80
 80035ea:	d038      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb6>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b40      	cmp	r3, #64	@ 0x40
 80035f0:	d035      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	2208      	movs	r2, #8
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d111      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2208      	movs	r2, #8
 8003606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	0018      	movs	r0, r3
 800360c:	f000 f83c 	bl	8003688 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2284      	movs	r2, #132	@ 0x84
 8003614:	2108      	movs	r1, #8
 8003616:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2278      	movs	r2, #120	@ 0x78
 800361c:	2100      	movs	r1, #0
 800361e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e02c      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	401a      	ands	r2, r3
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	429a      	cmp	r2, r3
 8003636:	d112      	bne.n	800365e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2280      	movs	r2, #128	@ 0x80
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0018      	movs	r0, r3
 8003646:	f000 f81f 	bl	8003688 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2284      	movs	r2, #132	@ 0x84
 800364e:	2120      	movs	r1, #32
 8003650:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2278      	movs	r2, #120	@ 0x78
 8003656:	2100      	movs	r1, #0
 8003658:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e00f      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	425a      	negs	r2, r3
 800366e:	4153      	adcs	r3, r2
 8003670:	b2db      	uxtb	r3, r3
 8003672:	001a      	movs	r2, r3
 8003674:	1dfb      	adds	r3, r7, #7
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d09e      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b004      	add	sp, #16
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08e      	sub	sp, #56	@ 0x38
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003690:	f3ef 8310 	mrs	r3, PRIMASK
 8003694:	617b      	str	r3, [r7, #20]
  return(result);
 8003696:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003698:	637b      	str	r3, [r7, #52]	@ 0x34
 800369a:	2301      	movs	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4926      	ldr	r1, [pc, #152]	@ (800374c <UART_EndRxTransfer+0xc4>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	623b      	str	r3, [r7, #32]
  return(result);
 80036c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80036cc:	2301      	movs	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2101      	movs	r1, #1
 80036e4:	438a      	bics	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d118      	bne.n	800372e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	60bb      	str	r3, [r7, #8]
  return(result);
 8003702:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003706:	2301      	movs	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			@ (mov r8, r8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2110      	movs	r1, #16
 800371e:	438a      	bics	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f383 8810 	msr	PRIMASK, r3
}
 800372c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2280      	movs	r2, #128	@ 0x80
 8003732:	2120      	movs	r1, #32
 8003734:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b00e      	add	sp, #56	@ 0x38
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	fffffedf 	.word	0xfffffedf

08003750 <memset>:
 8003750:	0003      	movs	r3, r0
 8003752:	1882      	adds	r2, r0, r2
 8003754:	4293      	cmp	r3, r2
 8003756:	d100      	bne.n	800375a <memset+0xa>
 8003758:	4770      	bx	lr
 800375a:	7019      	strb	r1, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	e7f9      	b.n	8003754 <memset+0x4>

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	2600      	movs	r6, #0
 8003764:	4c0c      	ldr	r4, [pc, #48]	@ (8003798 <__libc_init_array+0x38>)
 8003766:	4d0d      	ldr	r5, [pc, #52]	@ (800379c <__libc_init_array+0x3c>)
 8003768:	1b64      	subs	r4, r4, r5
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	42a6      	cmp	r6, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	2600      	movs	r6, #0
 8003772:	f000 f823 	bl	80037bc <_init>
 8003776:	4c0a      	ldr	r4, [pc, #40]	@ (80037a0 <__libc_init_array+0x40>)
 8003778:	4d0a      	ldr	r5, [pc, #40]	@ (80037a4 <__libc_init_array+0x44>)
 800377a:	1b64      	subs	r4, r4, r5
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	42a6      	cmp	r6, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	00b3      	lsls	r3, r6, #2
 8003786:	58eb      	ldr	r3, [r5, r3]
 8003788:	4798      	blx	r3
 800378a:	3601      	adds	r6, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	00b3      	lsls	r3, r6, #2
 8003790:	58eb      	ldr	r3, [r5, r3]
 8003792:	4798      	blx	r3
 8003794:	3601      	adds	r6, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	08003e08 	.word	0x08003e08
 800379c:	08003e08 	.word	0x08003e08
 80037a0:	08003e0c 	.word	0x08003e0c
 80037a4:	08003e08 	.word	0x08003e08

080037a8 <memcpy>:
 80037a8:	2300      	movs	r3, #0
 80037aa:	b510      	push	{r4, lr}
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d100      	bne.n	80037b2 <memcpy+0xa>
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	5ccc      	ldrb	r4, [r1, r3]
 80037b4:	54c4      	strb	r4, [r0, r3]
 80037b6:	3301      	adds	r3, #1
 80037b8:	e7f8      	b.n	80037ac <memcpy+0x4>
	...

080037bc <_init>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr

080037c8 <_fini>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr
