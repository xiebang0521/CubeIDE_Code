
RFID_IIC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08003f58  08003f58  00004f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  080047c0  080047c0  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c0  080047c0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c0  080047c0  000057c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047c4  080047c4  000057c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080047c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000070  08004838  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004838  000062a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115de  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a81  00000000  00000000  00017676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce4  00000000  00000000  0001b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b23d  00000000  00000000  0001be3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016429  00000000  00000000  00037079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a81b  00000000  00000000  0004d4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7cbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  000e7d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000eb7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f40 	.word	0x08003f40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003f40 	.word	0x08003f40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <keyExpansion>:
 * @param key 秘钥
 * @param roundkey 秘钥扩展后的秘钥
 * @return null
 */
static void keyExpansion(const uint8_t *key, uint8_t *roundkey)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    uint8_t i, j, k;

    // 第一轮的秘钥就是key
    for (i = 0; i < NK; i++)
 800022a:	2317      	movs	r3, #23
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e03d      	b.n	80002b0 <keyExpansion+0x90>
    {
        roundkey[(4 * i) + 0] = key[(4 * i) + 0];
 8000234:	2017      	movs	r0, #23
 8000236:	183b      	adds	r3, r7, r0
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	001a      	movs	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	189a      	adds	r2, r3, r2
 8000242:	183b      	adds	r3, r7, r0
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	0019      	movs	r1, r3
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	185b      	adds	r3, r3, r1
 800024e:	7812      	ldrb	r2, [r2, #0]
 8000250:	701a      	strb	r2, [r3, #0]
        roundkey[(4 * i) + 1] = key[(4 * i) + 1];
 8000252:	183b      	adds	r3, r7, r0
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	3301      	adds	r3, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	18d2      	adds	r2, r2, r3
 800025e:	183b      	adds	r3, r7, r0
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	3301      	adds	r3, #1
 8000266:	6839      	ldr	r1, [r7, #0]
 8000268:	18cb      	adds	r3, r1, r3
 800026a:	7812      	ldrb	r2, [r2, #0]
 800026c:	701a      	strb	r2, [r3, #0]
        roundkey[(4 * i) + 2] = key[(4 * i) + 2];
 800026e:	183b      	adds	r3, r7, r0
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	3302      	adds	r3, #2
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	18d2      	adds	r2, r2, r3
 800027a:	183b      	adds	r3, r7, r0
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	3302      	adds	r3, #2
 8000282:	6839      	ldr	r1, [r7, #0]
 8000284:	18cb      	adds	r3, r1, r3
 8000286:	7812      	ldrb	r2, [r2, #0]
 8000288:	701a      	strb	r2, [r3, #0]
        roundkey[(4 * i) + 3] = key[(4 * i) + 3];
 800028a:	183b      	adds	r3, r7, r0
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	3303      	adds	r3, #3
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	18d2      	adds	r2, r2, r3
 8000296:	183b      	adds	r3, r7, r0
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	3303      	adds	r3, #3
 800029e:	6839      	ldr	r1, [r7, #0]
 80002a0:	18cb      	adds	r3, r1, r3
 80002a2:	7812      	ldrb	r2, [r2, #0]
 80002a4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NK; i++)
 80002a6:	183b      	adds	r3, r7, r0
 80002a8:	781a      	ldrb	r2, [r3, #0]
 80002aa:	183b      	adds	r3, r7, r0
 80002ac:	3201      	adds	r2, #1
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	2217      	movs	r2, #23
 80002b2:	18bb      	adds	r3, r7, r2
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b03      	cmp	r3, #3
 80002b8:	d9bc      	bls.n	8000234 <keyExpansion+0x14>
    // 后面秘钥的过程：
    // （i % 4） == 0 就是前一列的秘钥经过，左位移，字节替换，
    // 第一个数据与RCon数组中的值进行异或，数组下标由第几轮的秘钥扩展决定,在与前四列的秘钥进行异或操作得到。
    // 若 （i % 4） != 0,就是前列的秘钥与前四列的秘钥异或。
    // i 秘钥扩展的列
    for (i = NK; i < 4 * (NR + 1); i++)
 80002ba:	18bb      	adds	r3, r7, r2
 80002bc:	2204      	movs	r2, #4
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	e0d1      	b.n	8000466 <keyExpansion+0x246>
    {
        j = (i - 1) * 4;
 80002c2:	2417      	movs	r4, #23
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	2115      	movs	r1, #21
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	0092      	lsls	r2, r2, #2
 80002d2:	701a      	strb	r2, [r3, #0]

        temp[0] = RoundKey[j + 0];
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4a68      	ldr	r2, [pc, #416]	@ (800047c <keyExpansion+0x25c>)
 80002da:	5cd2      	ldrb	r2, [r2, r3]
 80002dc:	200c      	movs	r0, #12
 80002de:	183b      	adds	r3, r7, r0
 80002e0:	701a      	strb	r2, [r3, #0]
        temp[1] = RoundKey[j + 1];
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	4a64      	ldr	r2, [pc, #400]	@ (800047c <keyExpansion+0x25c>)
 80002ea:	5cd2      	ldrb	r2, [r2, r3]
 80002ec:	183b      	adds	r3, r7, r0
 80002ee:	705a      	strb	r2, [r3, #1]
        temp[2] = RoundKey[j + 2];
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	3302      	adds	r3, #2
 80002f6:	4a61      	ldr	r2, [pc, #388]	@ (800047c <keyExpansion+0x25c>)
 80002f8:	5cd2      	ldrb	r2, [r2, r3]
 80002fa:	183b      	adds	r3, r7, r0
 80002fc:	709a      	strb	r2, [r3, #2]
        temp[3] = RoundKey[j + 3];
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	3303      	adds	r3, #3
 8000304:	4a5d      	ldr	r2, [pc, #372]	@ (800047c <keyExpansion+0x25c>)
 8000306:	5cd2      	ldrb	r2, [r2, r3]
 8000308:	0001      	movs	r1, r0
 800030a:	187b      	adds	r3, r7, r1
 800030c:	70da      	strb	r2, [r3, #3]

        if (i % NK == 0)
 800030e:	193b      	adds	r3, r7, r4
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2203      	movs	r2, #3
 8000314:	4013      	ands	r3, r2
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <keyExpansion+0x19a>
        {
            uint8_t ret = temp[0];
 800031c:	2314      	movs	r3, #20
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	187a      	adds	r2, r7, r1
 8000322:	7812      	ldrb	r2, [r2, #0]
 8000324:	701a      	strb	r2, [r3, #0]
            for (uint8_t l = 0; l < 3; l++)
 8000326:	2316      	movs	r3, #22
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	e00f      	b.n	8000350 <keyExpansion+0x130>
            {
                temp[l] = temp[l + 1];
 8000330:	2016      	movs	r0, #22
 8000332:	183b      	adds	r3, r7, r0
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	183b      	adds	r3, r7, r0
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	240c      	movs	r4, #12
 800033e:	1939      	adds	r1, r7, r4
 8000340:	5c89      	ldrb	r1, [r1, r2]
 8000342:	193a      	adds	r2, r7, r4
 8000344:	54d1      	strb	r1, [r2, r3]
            for (uint8_t l = 0; l < 3; l++)
 8000346:	183b      	adds	r3, r7, r0
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	183b      	adds	r3, r7, r0
 800034c:	3201      	adds	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	2316      	movs	r3, #22
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d9ea      	bls.n	8000330 <keyExpansion+0x110>
            }
            temp[3] = ret;
 800035a:	200c      	movs	r0, #12
 800035c:	183b      	adds	r3, r7, r0
 800035e:	2214      	movs	r2, #20
 8000360:	18ba      	adds	r2, r7, r2
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	70da      	strb	r2, [r3, #3]

            temp[0] = sbox[temp[0]];
 8000366:	183b      	adds	r3, r7, r0
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	001a      	movs	r2, r3
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <keyExpansion+0x260>)
 800036e:	5c9a      	ldrb	r2, [r3, r2]
 8000370:	183b      	adds	r3, r7, r0
 8000372:	701a      	strb	r2, [r3, #0]
            temp[1] = sbox[temp[1]];
 8000374:	183b      	adds	r3, r7, r0
 8000376:	785b      	ldrb	r3, [r3, #1]
 8000378:	001a      	movs	r2, r3
 800037a:	4b41      	ldr	r3, [pc, #260]	@ (8000480 <keyExpansion+0x260>)
 800037c:	5c9a      	ldrb	r2, [r3, r2]
 800037e:	183b      	adds	r3, r7, r0
 8000380:	705a      	strb	r2, [r3, #1]
            temp[2] = sbox[temp[2]];
 8000382:	183b      	adds	r3, r7, r0
 8000384:	789b      	ldrb	r3, [r3, #2]
 8000386:	001a      	movs	r2, r3
 8000388:	4b3d      	ldr	r3, [pc, #244]	@ (8000480 <keyExpansion+0x260>)
 800038a:	5c9a      	ldrb	r2, [r3, r2]
 800038c:	183b      	adds	r3, r7, r0
 800038e:	709a      	strb	r2, [r3, #2]
            temp[3] = sbox[temp[3]];
 8000390:	183b      	adds	r3, r7, r0
 8000392:	78db      	ldrb	r3, [r3, #3]
 8000394:	001a      	movs	r2, r3
 8000396:	4b3a      	ldr	r3, [pc, #232]	@ (8000480 <keyExpansion+0x260>)
 8000398:	5c9a      	ldrb	r2, [r3, r2]
 800039a:	183b      	adds	r3, r7, r0
 800039c:	70da      	strb	r2, [r3, #3]

            temp[0] ^= rcon[i / NK];
 800039e:	183b      	adds	r3, r7, r0
 80003a0:	781a      	ldrb	r2, [r3, #0]
 80003a2:	2317      	movs	r3, #23
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	0019      	movs	r1, r3
 80003ae:	4b35      	ldr	r3, [pc, #212]	@ (8000484 <keyExpansion+0x264>)
 80003b0:	5c5b      	ldrb	r3, [r3, r1]
 80003b2:	4053      	eors	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	183b      	adds	r3, r7, r0
 80003b8:	701a      	strb	r2, [r3, #0]
        }
        // 前四列的下标
        j = (i - NK) * 4;
 80003ba:	2617      	movs	r6, #23
 80003bc:	19bb      	adds	r3, r7, r6
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3b04      	subs	r3, #4
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	2415      	movs	r4, #21
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	701a      	strb	r2, [r3, #0]
        k = i * 4;
 80003cc:	2513      	movs	r5, #19
 80003ce:	197b      	adds	r3, r7, r5
 80003d0:	19ba      	adds	r2, r7, r6
 80003d2:	7812      	ldrb	r2, [r2, #0]
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	701a      	strb	r2, [r3, #0]

        roundkey[k + 0] = roundkey[j + 0] ^ temp[0];
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	18d3      	adds	r3, r2, r3
 80003e0:	7819      	ldrb	r1, [r3, #0]
 80003e2:	230c      	movs	r3, #12
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	781a      	ldrb	r2, [r3, #0]
 80003e8:	197b      	adds	r3, r7, r5
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	6838      	ldr	r0, [r7, #0]
 80003ee:	18c3      	adds	r3, r0, r3
 80003f0:	404a      	eors	r2, r1
 80003f2:	b2d2      	uxtb	r2, r2
 80003f4:	701a      	strb	r2, [r3, #0]
        roundkey[k + 1] = roundkey[j + 1] ^ temp[1];
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3301      	adds	r3, #1
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	18d3      	adds	r3, r2, r3
 8000400:	7819      	ldrb	r1, [r3, #0]
 8000402:	230c      	movs	r3, #12
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	785a      	ldrb	r2, [r3, #1]
 8000408:	197b      	adds	r3, r7, r5
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	3301      	adds	r3, #1
 800040e:	6838      	ldr	r0, [r7, #0]
 8000410:	18c3      	adds	r3, r0, r3
 8000412:	404a      	eors	r2, r1
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	701a      	strb	r2, [r3, #0]
        roundkey[k + 2] = roundkey[j + 2] ^ temp[2];
 8000418:	193b      	adds	r3, r7, r4
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3302      	adds	r3, #2
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	18d3      	adds	r3, r2, r3
 8000422:	7819      	ldrb	r1, [r3, #0]
 8000424:	230c      	movs	r3, #12
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	789a      	ldrb	r2, [r3, #2]
 800042a:	197b      	adds	r3, r7, r5
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	3302      	adds	r3, #2
 8000430:	6838      	ldr	r0, [r7, #0]
 8000432:	18c3      	adds	r3, r0, r3
 8000434:	404a      	eors	r2, r1
 8000436:	b2d2      	uxtb	r2, r2
 8000438:	701a      	strb	r2, [r3, #0]
        roundkey[k + 3] = roundkey[j + 3] ^ temp[3];
 800043a:	193b      	adds	r3, r7, r4
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	3303      	adds	r3, #3
 8000440:	683a      	ldr	r2, [r7, #0]
 8000442:	18d3      	adds	r3, r2, r3
 8000444:	7819      	ldrb	r1, [r3, #0]
 8000446:	230c      	movs	r3, #12
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	78da      	ldrb	r2, [r3, #3]
 800044c:	197b      	adds	r3, r7, r5
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	3303      	adds	r3, #3
 8000452:	6838      	ldr	r0, [r7, #0]
 8000454:	18c3      	adds	r3, r0, r3
 8000456:	404a      	eors	r2, r1
 8000458:	b2d2      	uxtb	r2, r2
 800045a:	701a      	strb	r2, [r3, #0]
    for (i = NK; i < 4 * (NR + 1); i++)
 800045c:	19bb      	adds	r3, r7, r6
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	19bb      	adds	r3, r7, r6
 8000462:	3201      	adds	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
 8000466:	2317      	movs	r3, #23
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b2b      	cmp	r3, #43	@ 0x2b
 800046e:	d800      	bhi.n	8000472 <keyExpansion+0x252>
 8000470:	e727      	b.n	80002c2 <keyExpansion+0xa2>
    }
}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b007      	add	sp, #28
 800047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800047c:	2000008c 	.word	0x2000008c
 8000480:	08003f7c 	.word	0x08003f7c
 8000484:	0800417c 	.word	0x0800417c

08000488 <addRoundKey>:
 * @param state: 状态数组
 * @param roundkey 轮秘钥数组
 * @param round 轮密钥加轮次
 */
static void addRoundKey(uint8_t *state, uint8_t *roundkey, uint8_t round)
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	701a      	strb	r2, [r3, #0]
    uint8_t i, j;
    for (i = 0; i < 4; i++)
 8000496:	2317      	movs	r3, #23
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	e03b      	b.n	8000518 <addRoundKey+0x90>
    {
        for (j = 0; j < 4; j++)
 80004a0:	2316      	movs	r3, #22
 80004a2:	18fb      	adds	r3, r7, r3
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e02b      	b.n	8000502 <addRoundKey+0x7a>
        {
            state[i * 4 + j] ^= roundkey[(round * 16) + (i * 4) + j];
 80004aa:	2517      	movs	r5, #23
 80004ac:	197b      	adds	r3, r7, r5
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	009a      	lsls	r2, r3, #2
 80004b2:	2016      	movs	r0, #22
 80004b4:	183b      	adds	r3, r7, r0
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	18d3      	adds	r3, r2, r3
 80004ba:	001a      	movs	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	189b      	adds	r3, r3, r2
 80004c0:	7819      	ldrb	r1, [r3, #0]
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	009a      	lsls	r2, r3, #2
 80004c8:	197b      	adds	r3, r7, r5
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	18d3      	adds	r3, r2, r3
 80004ce:	009a      	lsls	r2, r3, #2
 80004d0:	0004      	movs	r4, r0
 80004d2:	183b      	adds	r3, r7, r0
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	18d3      	adds	r3, r2, r3
 80004d8:	001a      	movs	r2, r3
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	189b      	adds	r3, r3, r2
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	197b      	adds	r3, r7, r5
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	0098      	lsls	r0, r3, #2
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	18c3      	adds	r3, r0, r3
 80004ec:	0018      	movs	r0, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	181b      	adds	r3, r3, r0
 80004f2:	404a      	eors	r2, r1
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 4; j++)
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	3201      	adds	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	2316      	movs	r3, #22
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d9ce      	bls.n	80004aa <addRoundKey+0x22>
    for (i = 0; i < 4; i++)
 800050c:	2117      	movs	r1, #23
 800050e:	187b      	adds	r3, r7, r1
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	187b      	adds	r3, r7, r1
 8000514:	3201      	adds	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	2317      	movs	r3, #23
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b03      	cmp	r3, #3
 8000520:	d9be      	bls.n	80004a0 <addRoundKey+0x18>
        }
    }
}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b006      	add	sp, #24
 800052a:	bdb0      	pop	{r4, r5, r7, pc}

0800052c <GF2>:
    }
}

// GF(2，M)伽罗华域乘法运算
static uint8_t GF2(uint8_t x)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	701a      	strb	r2, [r3, #0]
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	b25a      	sxtb	r2, r3
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	09db      	lsrs	r3, r3, #7
 8000546:	b2db      	uxtb	r3, r3
 8000548:	1c19      	adds	r1, r3, #0
 800054a:	1c0b      	adds	r3, r1, #0
 800054c:	18db      	adds	r3, r3, r3
 800054e:	185b      	adds	r3, r3, r1
 8000550:	1c19      	adds	r1, r3, #0
 8000552:	00c8      	lsls	r0, r1, #3
 8000554:	1c19      	adds	r1, r3, #0
 8000556:	1c03      	adds	r3, r0, #0
 8000558:	18cb      	adds	r3, r1, r3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	b25b      	sxtb	r3, r3
 800055e:	4053      	eors	r3, r2
 8000560:	b25b      	sxtb	r3, r3
 8000562:	b2db      	uxtb	r3, r3
}
 8000564:	0018      	movs	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}

0800056c <GFMul>:

static uint8_t GFMul(uint8_t x, uint8_t y)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	0002      	movs	r2, r0
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	1dbb      	adds	r3, r7, #6
 800057a:	1c0a      	adds	r2, r1, #0
 800057c:	701a      	strb	r2, [r3, #0]
    uint8_t ret = 0;
 800057e:	230f      	movs	r3, #15
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 8; i++)
 8000586:	230e      	movs	r3, #14
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	e01f      	b.n	80005d0 <GFMul+0x64>
    {
        if (y & 0x01)
 8000590:	1dbb      	adds	r3, r7, #6
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2201      	movs	r2, #1
 8000596:	4013      	ands	r3, r2
 8000598:	d007      	beq.n	80005aa <GFMul+0x3e>
        {
            ret ^= x;
 800059a:	220f      	movs	r2, #15
 800059c:	18bb      	adds	r3, r7, r2
 800059e:	18b9      	adds	r1, r7, r2
 80005a0:	1dfa      	adds	r2, r7, #7
 80005a2:	7809      	ldrb	r1, [r1, #0]
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	404a      	eors	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
        }

        x = GF2(x);
 80005aa:	1dfc      	adds	r4, r7, #7
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ffbb 	bl	800052c <GF2>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
        y >>= 1;
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	1dba      	adds	r2, r7, #6
 80005be:	7812      	ldrb	r2, [r2, #0]
 80005c0:	0852      	lsrs	r2, r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 80005c4:	210e      	movs	r1, #14
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	781a      	ldrb	r2, [r3, #0]
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	3201      	adds	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	230e      	movs	r3, #14
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	d9da      	bls.n	8000590 <GFMul+0x24>
    }
    return ret;
 80005da:	230f      	movs	r3, #15
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	781b      	ldrb	r3, [r3, #0]
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b005      	add	sp, #20
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <invSubByte>:
 * @brief  逆字节替换
 * @param  state: 状态数组
 * @return null
 */
static void invSubByte(uint8_t *state)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 16; i++)
 80005f0:	230f      	movs	r3, #15
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e012      	b.n	8000620 <invSubByte+0x38>
    {
        *(state + i) = invsbox[*(state + i)];
 80005fa:	200f      	movs	r0, #15
 80005fc:	183b      	adds	r3, r7, r0
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	18d3      	adds	r3, r2, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	0019      	movs	r1, r3
 8000608:	183b      	adds	r3, r7, r0
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	18d3      	adds	r3, r2, r3
 8000610:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <invSubByte+0x4c>)
 8000612:	5c52      	ldrb	r2, [r2, r1]
 8000614:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 16; i++)
 8000616:	183b      	adds	r3, r7, r0
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	183b      	adds	r3, r7, r0
 800061c:	3201      	adds	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	230f      	movs	r3, #15
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0f      	cmp	r3, #15
 8000628:	d9e7      	bls.n	80005fa <invSubByte+0x12>
    }
}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b004      	add	sp, #16
 8000632:	bd80      	pop	{r7, pc}
 8000634:	0800407c 	.word	0x0800407c

08000638 <invShiftRow>:
 * @brief  逆行移位
 * @param  state: 状态数组
 * @return null
 */
static void invShiftRow(uint8_t *state)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	@ 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    uint8_t temp[4][4];

    for (uint8_t i = 0; i < 4; i++)
 8000640:	231f      	movs	r3, #31
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e038      	b.n	80006bc <invShiftRow+0x84>
    {
        for (uint8_t j = 0; j < 4; j++)
 800064a:	231e      	movs	r3, #30
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e028      	b.n	80006a6 <invShiftRow+0x6e>
        {
            temp[i][j] = state[(4 * ((j - i + 4) % 4)) + i];
 8000654:	231e      	movs	r3, #30
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	231f      	movs	r3, #31
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	3304      	adds	r3, #4
 8000664:	4a34      	ldr	r2, [pc, #208]	@ (8000738 <invShiftRow+0x100>)
 8000666:	4013      	ands	r3, r2
 8000668:	d504      	bpl.n	8000674 <invShiftRow+0x3c>
 800066a:	3b01      	subs	r3, #1
 800066c:	2204      	movs	r2, #4
 800066e:	4252      	negs	r2, r2
 8000670:	4313      	orrs	r3, r2
 8000672:	3301      	adds	r3, #1
 8000674:	009a      	lsls	r2, r3, #2
 8000676:	201f      	movs	r0, #31
 8000678:	183b      	adds	r3, r7, r0
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	001a      	movs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	1899      	adds	r1, r3, r2
 8000684:	183b      	adds	r3, r7, r0
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	241e      	movs	r4, #30
 800068a:	193b      	adds	r3, r7, r4
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	7808      	ldrb	r0, [r1, #0]
 8000690:	210c      	movs	r1, #12
 8000692:	1879      	adds	r1, r7, r1
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	188a      	adds	r2, r1, r2
 8000698:	1c01      	adds	r1, r0, #0
 800069a:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < 4; j++)
 800069c:	193b      	adds	r3, r7, r4
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	3201      	adds	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	231e      	movs	r3, #30
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d9d1      	bls.n	8000654 <invShiftRow+0x1c>
    for (uint8_t i = 0; i < 4; i++)
 80006b0:	211f      	movs	r1, #31
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	3201      	adds	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	231f      	movs	r3, #31
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	d9c1      	bls.n	800064a <invShiftRow+0x12>
        }
    }

    for (uint8_t i = 0; i < 4; i++)
 80006c6:	231d      	movs	r3, #29
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e029      	b.n	8000724 <invShiftRow+0xec>
    {
        for (uint8_t j = 0; j < 4; j++)
 80006d0:	231c      	movs	r3, #28
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e019      	b.n	800070e <invShiftRow+0xd6>
        {
            state[(4 * i) + j] = temp[j][i];
 80006da:	241c      	movs	r4, #28
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	7819      	ldrb	r1, [r3, #0]
 80006e0:	201d      	movs	r0, #29
 80006e2:	183b      	adds	r3, r7, r0
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	183b      	adds	r3, r7, r0
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	0098      	lsls	r0, r3, #2
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	18c3      	adds	r3, r0, r3
 80006f2:	0018      	movs	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	181b      	adds	r3, r3, r0
 80006f8:	200c      	movs	r0, #12
 80006fa:	1838      	adds	r0, r7, r0
 80006fc:	0089      	lsls	r1, r1, #2
 80006fe:	1841      	adds	r1, r0, r1
 8000700:	5c8a      	ldrb	r2, [r1, r2]
 8000702:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 4; j++)
 8000704:	193b      	adds	r3, r7, r4
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	193b      	adds	r3, r7, r4
 800070a:	3201      	adds	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	231c      	movs	r3, #28
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d9e0      	bls.n	80006da <invShiftRow+0xa2>
    for (uint8_t i = 0; i < 4; i++)
 8000718:	211d      	movs	r1, #29
 800071a:	187b      	adds	r3, r7, r1
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	187b      	adds	r3, r7, r1
 8000720:	3201      	adds	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	231d      	movs	r3, #29
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b03      	cmp	r3, #3
 800072c:	d9d0      	bls.n	80006d0 <invShiftRow+0x98>
        }
    }
}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b009      	add	sp, #36	@ 0x24
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	80000003 	.word	0x80000003

0800073c <invMixCloumns>:
 * @param state 状态数组
 * @param constant 逆列混合常数举证
 * @return null
 */
static void invMixCloumns(uint8_t *state,const uint8_t *constant)
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
    uint8_t temp[4][4];

    for (uint8_t i = 0; i < 4; i++)
 8000746:	231f      	movs	r3, #31
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e071      	b.n	8000834 <invMixCloumns+0xf8>
    {
        for (uint8_t j = 0; j < 4; j++)
 8000750:	231e      	movs	r3, #30
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e061      	b.n	800081e <invMixCloumns+0xe2>
        {
            temp[i][j] = GFMul(*(state + 4 * j + 0), constant[4 * i + 0]) ^ GFMul(*(state + 4 * j + 1), constant[4 * i + 1]) ^ GFMul(*(state + 4 * j + 2), constant[4 * i + 2]) ^ GFMul(*(state + 4 * j + 3), constant[4 * i + 3]);
 800075a:	251e      	movs	r5, #30
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	001a      	movs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	189b      	adds	r3, r3, r2
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	261f      	movs	r6, #31
 800076c:	19bb      	adds	r3, r7, r6
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	0019      	movs	r1, r3
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	185b      	adds	r3, r3, r1
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	0019      	movs	r1, r3
 800077c:	0010      	movs	r0, r2
 800077e:	f7ff fef5 	bl	800056c <GFMul>
 8000782:	0003      	movs	r3, r0
 8000784:	001c      	movs	r4, r3
 8000786:	197b      	adds	r3, r7, r5
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	3301      	adds	r3, #1
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	18d3      	adds	r3, r2, r3
 8000792:	7818      	ldrb	r0, [r3, #0]
 8000794:	19bb      	adds	r3, r7, r6
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	3301      	adds	r3, #1
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0019      	movs	r1, r3
 80007a4:	f7ff fee2 	bl	800056c <GFMul>
 80007a8:	0003      	movs	r3, r0
 80007aa:	4063      	eors	r3, r4
 80007ac:	b2dc      	uxtb	r4, r3
 80007ae:	197b      	adds	r3, r7, r5
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	3302      	adds	r3, #2
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	7818      	ldrb	r0, [r3, #0]
 80007bc:	19bb      	adds	r3, r7, r6
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	3302      	adds	r3, #2
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0019      	movs	r1, r3
 80007cc:	f7ff fece 	bl	800056c <GFMul>
 80007d0:	0003      	movs	r3, r0
 80007d2:	4063      	eors	r3, r4
 80007d4:	b2dc      	uxtb	r4, r3
 80007d6:	197b      	adds	r3, r7, r5
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	3303      	adds	r3, #3
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	18d3      	adds	r3, r2, r3
 80007e2:	7818      	ldrb	r0, [r3, #0]
 80007e4:	19bb      	adds	r3, r7, r6
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	3303      	adds	r3, #3
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	18d3      	adds	r3, r2, r3
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0019      	movs	r1, r3
 80007f4:	f7ff feba 	bl	800056c <GFMul>
 80007f8:	0003      	movs	r3, r0
 80007fa:	0019      	movs	r1, r3
 80007fc:	19bb      	adds	r3, r7, r6
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	197b      	adds	r3, r7, r5
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4061      	eors	r1, r4
 8000806:	b2c8      	uxtb	r0, r1
 8000808:	210c      	movs	r1, #12
 800080a:	1879      	adds	r1, r7, r1
 800080c:	0092      	lsls	r2, r2, #2
 800080e:	188a      	adds	r2, r1, r2
 8000810:	1c01      	adds	r1, r0, #0
 8000812:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < 4; j++)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	197b      	adds	r3, r7, r5
 800081a:	3201      	adds	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	231e      	movs	r3, #30
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d998      	bls.n	800075a <invMixCloumns+0x1e>
    for (uint8_t i = 0; i < 4; i++)
 8000828:	211f      	movs	r1, #31
 800082a:	187b      	adds	r3, r7, r1
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	187b      	adds	r3, r7, r1
 8000830:	3201      	adds	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	231f      	movs	r3, #31
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d988      	bls.n	8000750 <invMixCloumns+0x14>
        }
    }

    for (uint8_t i = 0; i < 4; i++)
 800083e:	231d      	movs	r3, #29
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	e029      	b.n	800089c <invMixCloumns+0x160>
    {
        for (uint8_t j = 0; j < 4; j++)
 8000848:	231c      	movs	r3, #28
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e019      	b.n	8000886 <invMixCloumns+0x14a>
        {
            *(state + 4 * i + j) = temp[j][i];
 8000852:	241c      	movs	r4, #28
 8000854:	193b      	adds	r3, r7, r4
 8000856:	7819      	ldrb	r1, [r3, #0]
 8000858:	201d      	movs	r0, #29
 800085a:	183b      	adds	r3, r7, r0
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	183b      	adds	r3, r7, r0
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	0018      	movs	r0, r3
 8000866:	193b      	adds	r3, r7, r4
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	18c3      	adds	r3, r0, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	18c3      	adds	r3, r0, r3
 8000870:	200c      	movs	r0, #12
 8000872:	1838      	adds	r0, r7, r0
 8000874:	0089      	lsls	r1, r1, #2
 8000876:	1841      	adds	r1, r0, r1
 8000878:	5c8a      	ldrb	r2, [r1, r2]
 800087a:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 4; j++)
 800087c:	193b      	adds	r3, r7, r4
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	193b      	adds	r3, r7, r4
 8000882:	3201      	adds	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	231c      	movs	r3, #28
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d9e0      	bls.n	8000852 <invMixCloumns+0x116>
    for (uint8_t i = 0; i < 4; i++)
 8000890:	211d      	movs	r1, #29
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	187b      	adds	r3, r7, r1
 8000898:	3201      	adds	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	231d      	movs	r3, #29
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d9d0      	bls.n	8000848 <invMixCloumns+0x10c>
        }
    }
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b009      	add	sp, #36	@ 0x24
 80008ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008b0 <invcipher>:
 * @param  state: 待解密数据
 * @param  key: 密钥
 * @return null
 */
void invcipher(uint8_t *state, uint8_t *key)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
    keyExpansion(key, RoundKey);
 80008ba:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <invcipher+0x90>)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff fcad 	bl	8000220 <keyExpansion>
    addRoundKey(state, RoundKey, NR);
 80008c6:	491e      	ldr	r1, [pc, #120]	@ (8000940 <invcipher+0x90>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	220a      	movs	r2, #10
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff fddb 	bl	8000488 <addRoundKey>
    invShiftRow(state);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff feaf 	bl	8000638 <invShiftRow>
    invSubByte(state);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff fe83 	bl	80005e8 <invSubByte>

    for (uint8_t i = 9; i >= 1; i--)
 80008e2:	230f      	movs	r3, #15
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	2209      	movs	r2, #9
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e01a      	b.n	8000922 <invcipher+0x72>
    {
        addRoundKey(state, RoundKey, i);
 80008ec:	240f      	movs	r4, #15
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4913      	ldr	r1, [pc, #76]	@ (8000940 <invcipher+0x90>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff fdc6 	bl	8000488 <addRoundKey>
        invMixCloumns(state, invmix_constant);
 80008fc:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <invcipher+0x94>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	0011      	movs	r1, r2
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff ff1a 	bl	800073c <invMixCloumns>
        invShiftRow(state);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fe94 	bl	8000638 <invShiftRow>
        invSubByte(state);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fe68 	bl	80005e8 <invSubByte>
    for (uint8_t i = 9; i >= 1; i--)
 8000918:	193b      	adds	r3, r7, r4
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	193b      	adds	r3, r7, r4
 800091e:	3a01      	subs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	230f      	movs	r3, #15
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1df      	bne.n	80008ec <invcipher+0x3c>
    }

    addRoundKey(state, RoundKey, 0);
 800092c:	4904      	ldr	r1, [pc, #16]	@ (8000940 <invcipher+0x90>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fda8 	bl	8000488 <addRoundKey>
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b005      	add	sp, #20
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	2000008c 	.word	0x2000008c
 8000944:	08004188 	.word	0x08004188

08000948 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000950:	695a      	ldr	r2, [r3, #20]
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	03c9      	lsls	r1, r1, #15
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_GPIO_Init+0x64>)
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	03db      	lsls	r3, r3, #15
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_GPIO_Init+0x64>)
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	0289      	lsls	r1, r1, #10
 8000974:	430a      	orrs	r2, r1
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_GPIO_Init+0x64>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	029b      	lsls	r3, r3, #10
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_GPIO_Init+0x64>)
 800098c:	2180      	movs	r1, #128	@ 0x80
 800098e:	02c9      	lsls	r1, r1, #11
 8000990:	430a      	orrs	r2, r1
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	2380      	movs	r3, #128	@ 0x80
 800099a:	02db      	lsls	r3, r3, #11
 800099c:	4013      	ands	r3, r2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b004      	add	sp, #16
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000

080009b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <MX_I2C1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <MX_I2C1_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 fb2f 	bl	8002050 <HAL_I2C_Init>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f9e7 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fbcc 	bl	800219c <HAL_I2CEx_ConfigAnalogFilter>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f9de 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <MX_I2C1_Init+0x74>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fc0f 	bl	8002234 <HAL_I2CEx_ConfigDigitalFilter>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f9d5 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000013c 	.word	0x2000013c
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	10805d88 	.word	0x10805d88

08000a30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08b      	sub	sp, #44	@ 0x2c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	2414      	movs	r4, #20
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f003 fa46 	bl	8003ed4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <HAL_I2C_MspInit+0x90>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d131      	bne.n	8000ab6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	02c9      	lsls	r1, r1, #11
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	02db      	lsls	r3, r3, #11
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a6e:	0021      	movs	r1, r4
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	22c0      	movs	r2, #192	@ 0xc0
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2212      	movs	r2, #18
 8000a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2203      	movs	r2, #3
 8000a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000a92:	0019      	movs	r1, r3
 8000a94:	0010      	movs	r0, r2
 8000a96:	f001 f945 	bl	8001d24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a9c:	69da      	ldr	r2, [r3, #28]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	0389      	lsls	r1, r1, #14
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	61da      	str	r2, [r3, #28]
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000aaa:	69da      	ldr	r2, [r3, #28]
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	039b      	lsls	r3, r3, #14
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b00b      	add	sp, #44	@ 0x2c
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b0b1      	sub	sp, #196	@ 0xc4
 8000ad0:	af00      	add	r7, sp, #0
//  write_data.hot_bed_temp_L = 40;
//  write_data.exthead_temp_L = 150;
//  write_data.exthead_temp_H = 400;
  Material_Data write_data;
  Material_Data read_data;
  memset(&write_data, 0, sizeof(write_data));
 8000ad2:	2460      	movs	r4, #96	@ 0x60
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2260      	movs	r2, #96	@ 0x60
 8000ad8:	2100      	movs	r1, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 f9fa 	bl	8003ed4 <memset>
  memcpy(write_data.material_type, "PLA",sizeof("PLA"));
 8000ae0:	4972      	ldr	r1, [pc, #456]	@ (8000cac <main+0x1e0>)
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f003 fa20 	bl	8003f2c <memcpy>
  memcpy(write_data.batch_number, "MD202411120001", sizeof("MD202411120001"));
 8000aec:	4970      	ldr	r1, [pc, #448]	@ (8000cb0 <main+0x1e4>)
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	3310      	adds	r3, #16
 8000af2:	220f      	movs	r2, #15
 8000af4:	0018      	movs	r0, r3
 8000af6:	f003 fa19 	bl	8003f2c <memcpy>
  write_data.cavity_temp = 35;
 8000afa:	0020      	movs	r0, r4
 8000afc:	183b      	adds	r3, r7, r0
 8000afe:	2220      	movs	r2, #32
 8000b00:	2123      	movs	r1, #35	@ 0x23
 8000b02:	5499      	strb	r1, [r3, r2]
  write_data.rgb[0] = 0xff;
 8000b04:	183b      	adds	r3, r7, r0
 8000b06:	2221      	movs	r2, #33	@ 0x21
 8000b08:	21ff      	movs	r1, #255	@ 0xff
 8000b0a:	5499      	strb	r1, [r3, r2]
  write_data.rgb[1] = 0xff;
 8000b0c:	183b      	adds	r3, r7, r0
 8000b0e:	2222      	movs	r2, #34	@ 0x22
 8000b10:	21ff      	movs	r1, #255	@ 0xff
 8000b12:	5499      	strb	r1, [r3, r2]
  write_data.rgb[2] = 0xff;
 8000b14:	183b      	adds	r3, r7, r0
 8000b16:	2223      	movs	r2, #35	@ 0x23
 8000b18:	21ff      	movs	r1, #255	@ 0xff
 8000b1a:	5499      	strb	r1, [r3, r2]
  write_data.produced_date =1731578537;
 8000b1c:	0004      	movs	r4, r0
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	4a64      	ldr	r2, [pc, #400]	@ (8000cb4 <main+0x1e8>)
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
  write_data.material_diameter = 1.75;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	4a64      	ldr	r2, [pc, #400]	@ (8000cb8 <main+0x1ec>)
 8000b28:	629a      	str	r2, [r3, #40]	@ 0x28
  write_data.material_density = 1.23;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	4a63      	ldr	r2, [pc, #396]	@ (8000cbc <main+0x1f0>)
 8000b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  write_data.init_weight = 2000;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	22fa      	movs	r2, #250	@ 0xfa
 8000b34:	00d2      	lsls	r2, r2, #3
 8000b36:	861a      	strh	r2, [r3, #48]	@ 0x30
  write_data.empty_tray_weight = 150;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2296      	movs	r2, #150	@ 0x96
 8000b3c:	865a      	strh	r2, [r3, #50]	@ 0x32
  write_data.residual_weight = 1500;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	4a5f      	ldr	r2, [pc, #380]	@ (8000cc0 <main+0x1f4>)
 8000b42:	869a      	strh	r2, [r3, #52]	@ 0x34
  memcpy(write_data.supplier, "MD9999",sizeof("MD9999"));
 8000b44:	495f      	ldr	r1, [pc, #380]	@ (8000cc4 <main+0x1f8>)
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	3336      	adds	r3, #54	@ 0x36
 8000b4a:	2207      	movs	r2, #7
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f003 f9ed 	bl	8003f2c <memcpy>
  memcpy(write_data.machines[0].machine_type, "MD1000D",sizeof("MD1000D"));
 8000b52:	495d      	ldr	r1, [pc, #372]	@ (8000cc8 <main+0x1fc>)
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	3340      	adds	r3, #64	@ 0x40
 8000b58:	2208      	movs	r2, #8
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f003 f9e6 	bl	8003f2c <memcpy>
  write_data.machines[0].fan_speed = 100;
 8000b60:	0020      	movs	r0, r4
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	224b      	movs	r2, #75	@ 0x4b
 8000b66:	2164      	movs	r1, #100	@ 0x64
 8000b68:	5499      	strb	r1, [r3, r2]
  write_data.machines[0].flow_ratio = 25.5;
 8000b6a:	183b      	adds	r3, r7, r0
 8000b6c:	4a57      	ldr	r2, [pc, #348]	@ (8000ccc <main+0x200>)
 8000b6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  write_data.machines[0].nozzle_temp = 220;
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	2250      	movs	r2, #80	@ 0x50
 8000b74:	21dc      	movs	r1, #220	@ 0xdc
 8000b76:	5299      	strh	r1, [r3, r2]
  write_data.machines[0].nozzle_temp_l = 150;
 8000b78:	183b      	adds	r3, r7, r0
 8000b7a:	2252      	movs	r2, #82	@ 0x52
 8000b7c:	2196      	movs	r1, #150	@ 0x96
 8000b7e:	5299      	strh	r1, [r3, r2]
  write_data.machines[0].nozzle_temp_h = 400;
 8000b80:	183b      	adds	r3, r7, r0
 8000b82:	2254      	movs	r2, #84	@ 0x54
 8000b84:	21c8      	movs	r1, #200	@ 0xc8
 8000b86:	0049      	lsls	r1, r1, #1
 8000b88:	5299      	strh	r1, [r3, r2]
  write_data.machines[0].hot_bed_temp = 50;
 8000b8a:	183b      	adds	r3, r7, r0
 8000b8c:	2256      	movs	r2, #86	@ 0x56
 8000b8e:	2132      	movs	r1, #50	@ 0x32
 8000b90:	5299      	strh	r1, [r3, r2]
  write_data.machines[0].hot_bed_temp_l = 40;
 8000b92:	183b      	adds	r3, r7, r0
 8000b94:	2258      	movs	r2, #88	@ 0x58
 8000b96:	2128      	movs	r1, #40	@ 0x28
 8000b98:	5299      	strh	r1, [r3, r2]
  write_data.machines[0].hot_bed_temp_h = 100;
 8000b9a:	183b      	adds	r3, r7, r0
 8000b9c:	225a      	movs	r2, #90	@ 0x5a
 8000b9e:	2164      	movs	r1, #100	@ 0x64
 8000ba0:	5299      	strh	r1, [r3, r2]
  write_data.machines[0].advance_pressure = 0.1;
 8000ba2:	183b      	adds	r3, r7, r0
 8000ba4:	4a4a      	ldr	r2, [pc, #296]	@ (8000cd0 <main+0x204>)
 8000ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba8:	f000 ffba 	bl	8001b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bac:	f000 f894 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb0:	f7ff feca 	bl	8000948 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bb4:	f7ff fefc 	bl	80009b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000bb8:	f000 ff0a 	bl	80019d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 8000bbc:	f000 fb65 	bl	800128a <OLED_Init>
  OLED_Clear();
 8000bc0:	f000 fa18 	bl	8000ff4 <OLED_Clear>

  RFID_Rc523_Config();
 8000bc4:	f000 fc82 	bl	80014cc <RFID_Rc523_Config>
//	  HAL_Delay(5000);
//	  OLED_Clear();
	  //rfid_write_channel_data(0x02, &write_data);


	  memset(&read_data,0,sizeof(read_data));
 8000bc8:	003b      	movs	r3, r7
 8000bca:	2260      	movs	r2, #96	@ 0x60
 8000bcc:	2100      	movs	r1, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f003 f980 	bl	8003ed4 <memset>
	  rfid_read_channel_data(0x02, &read_data);
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f000 fda9 	bl	8001730 <rfid_read_channel_data>
	  OLED_ShowHexArray((uint8_t*)&read_data , 8, 1);
 8000bde:	003b      	movs	r3, r7
 8000be0:	2201      	movs	r2, #1
 8000be2:	2108      	movs	r1, #8
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fb1c 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 8, 8, 2);
 8000bea:	003b      	movs	r3, r7
 8000bec:	3308      	adds	r3, #8
 8000bee:	2202      	movs	r2, #2
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fb15 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 16, 8, 3);
 8000bf8:	003b      	movs	r3, r7
 8000bfa:	3310      	adds	r3, #16
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	2108      	movs	r1, #8
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fb0e 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 24, 8, 4);
 8000c06:	003b      	movs	r3, r7
 8000c08:	3318      	adds	r3, #24
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fb07 	bl	8001222 <OLED_ShowHexArray>
	  HAL_Delay(5000);
 8000c14:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd4 <main+0x208>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 ffb2 	bl	8001b80 <HAL_Delay>
	  OLED_Clear();
 8000c1c:	f000 f9ea 	bl	8000ff4 <OLED_Clear>
	  OLED_ShowHexArray((uint8_t*)&read_data + 32, 8, 1);
 8000c20:	003b      	movs	r3, r7
 8000c22:	3320      	adds	r3, #32
 8000c24:	2201      	movs	r2, #1
 8000c26:	2108      	movs	r1, #8
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 fafa 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 40, 8, 2);
 8000c2e:	003b      	movs	r3, r7
 8000c30:	3328      	adds	r3, #40	@ 0x28
 8000c32:	2202      	movs	r2, #2
 8000c34:	2108      	movs	r1, #8
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 faf3 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 48, 8, 3);
 8000c3c:	003b      	movs	r3, r7
 8000c3e:	3330      	adds	r3, #48	@ 0x30
 8000c40:	2203      	movs	r2, #3
 8000c42:	2108      	movs	r1, #8
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 faec 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 56, 8, 4);
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	3338      	adds	r3, #56	@ 0x38
 8000c4e:	2204      	movs	r2, #4
 8000c50:	2108      	movs	r1, #8
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fae5 	bl	8001222 <OLED_ShowHexArray>
	  HAL_Delay(5000);
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <main+0x208>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 ff90 	bl	8001b80 <HAL_Delay>
	  OLED_Clear();
 8000c60:	f000 f9c8 	bl	8000ff4 <OLED_Clear>
	  OLED_ShowHexArray((uint8_t*)&read_data + 64, 8, 1);
 8000c64:	003b      	movs	r3, r7
 8000c66:	3340      	adds	r3, #64	@ 0x40
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2108      	movs	r1, #8
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fad8 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 72, 8, 2);
 8000c72:	003b      	movs	r3, r7
 8000c74:	3348      	adds	r3, #72	@ 0x48
 8000c76:	2202      	movs	r2, #2
 8000c78:	2108      	movs	r1, #8
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fad1 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 80, 8, 3);
 8000c80:	003b      	movs	r3, r7
 8000c82:	3350      	adds	r3, #80	@ 0x50
 8000c84:	2203      	movs	r2, #3
 8000c86:	2108      	movs	r1, #8
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 faca 	bl	8001222 <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 88, 8, 4);
 8000c8e:	003b      	movs	r3, r7
 8000c90:	3358      	adds	r3, #88	@ 0x58
 8000c92:	2204      	movs	r2, #4
 8000c94:	2108      	movs	r1, #8
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 fac3 	bl	8001222 <OLED_ShowHexArray>
	  HAL_Delay(5000);
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <main+0x208>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 ff6e 	bl	8001b80 <HAL_Delay>
	  OLED_Clear();
 8000ca4:	f000 f9a6 	bl	8000ff4 <OLED_Clear>
	  memset(&read_data,0,sizeof(read_data));
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	e78d      	b.n	8000bc8 <main+0xfc>
 8000cac:	08003f58 	.word	0x08003f58
 8000cb0:	08003f5c 	.word	0x08003f5c
 8000cb4:	6735caa9 	.word	0x6735caa9
 8000cb8:	3fe00000 	.word	0x3fe00000
 8000cbc:	3f9d70a4 	.word	0x3f9d70a4
 8000cc0:	000005dc 	.word	0x000005dc
 8000cc4:	08003f6c 	.word	0x08003f6c
 8000cc8:	08003f74 	.word	0x08003f74
 8000ccc:	41cc0000 	.word	0x41cc0000
 8000cd0:	3dcccccd 	.word	0x3dcccccd
 8000cd4:	00001388 	.word	0x00001388

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b099      	sub	sp, #100	@ 0x64
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	242c      	movs	r4, #44	@ 0x2c
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2334      	movs	r3, #52	@ 0x34
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f003 f8f3 	bl	8003ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cee:	231c      	movs	r3, #28
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f003 f8eb 	bl	8003ed4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfe:	003b      	movs	r3, r7
 8000d00:	0018      	movs	r0, r3
 8000d02:	231c      	movs	r3, #28
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f003 f8e4 	bl	8003ed4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2202      	movs	r2, #2
 8000d12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2201      	movs	r2, #1
 8000d18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2202      	movs	r2, #2
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2280      	movs	r2, #128	@ 0x80
 8000d2a:	0212      	lsls	r2, r2, #8
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2280      	movs	r2, #128	@ 0x80
 8000d32:	0352      	lsls	r2, r2, #13
 8000d34:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 fac4 	bl	80022cc <HAL_RCC_OscConfig>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d48:	f000 f83e 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	211c      	movs	r1, #28
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2202      	movs	r2, #2
 8000d58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2101      	movs	r1, #1
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f001 fe34 	bl	80029d8 <HAL_RCC_ClockConfig>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d74:	f000 f828 	bl	8000dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000d78:	003b      	movs	r3, r7
 8000d7a:	2221      	movs	r2, #33	@ 0x21
 8000d7c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d7e:	003b      	movs	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000d84:	003b      	movs	r3, r7
 8000d86:	2210      	movs	r2, #16
 8000d88:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 ffb9 	bl	8002d04 <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d96:	f000 f817 	bl	8000dc8 <Error_Handler>
  }
}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b019      	add	sp, #100	@ 0x64
 8000da0:	bd90      	pop	{r4, r7, pc}
	...

08000da4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db6:	f000 fec7 	bl	8001b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	40012c00 	.word	0x40012c00

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <OLED_I2C_Init>:
#define OLED_W_SCL(x) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (GPIO_PinState)(x))
#define OLED_W_SDA(x) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b09a      	sub	sp, #104	@ 0x68
 8000dd8:	af00      	add	r7, sp, #0
	I2C_HandleTypeDef I2cHandle;
	I2cHandle.Instance = I2C1;
 8000dda:	2114      	movs	r1, #20
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	4a16      	ldr	r2, [pc, #88]	@ (8000e38 <OLED_I2C_Init+0x64>)
 8000de0:	601a      	str	r2, [r3, #0]
	HAL_I2C_MspInit(&I2cHandle);
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff fe23 	bl	8000a30 <HAL_I2C_MspInit>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	003b      	movs	r3, r7
 8000dec:	0018      	movs	r0, r3
 8000dee:	2314      	movs	r3, #20
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f003 f86e 	bl	8003ed4 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000df8:	003b      	movs	r3, r7
 8000dfa:	22c0      	movs	r2, #192	@ 0xc0
 8000dfc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2211      	movs	r2, #17
 8000e02:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e04:	003b      	movs	r3, r7
 8000e06:	2203      	movs	r2, #3
 8000e08:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e3c <OLED_I2C_Init+0x68>)
 8000e0e:	0019      	movs	r1, r3
 8000e10:	0010      	movs	r0, r2
 8000e12:	f000 ff87 	bl	8001d24 <HAL_GPIO_Init>

	OLED_W_SCL(1);
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <OLED_I2C_Init+0x68>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2140      	movs	r1, #64	@ 0x40
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 f8f9 	bl	8002014 <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <OLED_I2C_Init+0x68>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	2180      	movs	r1, #128	@ 0x80
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 f8f3 	bl	8002014 <HAL_GPIO_WritePin>
}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b01a      	add	sp, #104	@ 0x68
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	48000400 	.word	0x48000400

08000e40 <OLED_I2C_Start>:
 * @brief  I2C开始
 * @param  无
 * @retval 无
 */
void OLED_I2C_Start(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8000e44:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <OLED_I2C_Start+0x3c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f001 f8e2 	bl	8002014 <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <OLED_I2C_Start+0x3c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	2140      	movs	r1, #64	@ 0x40
 8000e56:	0018      	movs	r0, r3
 8000e58:	f001 f8dc 	bl	8002014 <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <OLED_I2C_Start+0x3c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2180      	movs	r1, #128	@ 0x80
 8000e62:	0018      	movs	r0, r3
 8000e64:	f001 f8d6 	bl	8002014 <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <OLED_I2C_Start+0x3c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2140      	movs	r1, #64	@ 0x40
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 f8d0 	bl	8002014 <HAL_GPIO_WritePin>
}
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	48000400 	.word	0x48000400

08000e80 <OLED_I2C_Stop>:
 * @brief  I2C停止
 * @param  无
 * @retval 无
 */
void OLED_I2C_Stop(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <OLED_I2C_Stop+0x30>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f001 f8c2 	bl	8002014 <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <OLED_I2C_Stop+0x30>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	2140      	movs	r1, #64	@ 0x40
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 f8bc 	bl	8002014 <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <OLED_I2C_Stop+0x30>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2180      	movs	r1, #128	@ 0x80
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 f8b6 	bl	8002014 <HAL_GPIO_WritePin>
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <OLED_I2C_SendByte>:
 * @brief  I2C发送一个字节
 * @param  Byte 要发送的一个字节
 * @retval 无
 */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e022      	b.n	8000f10 <OLED_I2C_SendByte+0x5c>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 8000eca:	240f      	movs	r4, #15
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2280      	movs	r2, #128	@ 0x80
 8000ed2:	411a      	asrs	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	1dfa      	adds	r2, r7, #7
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	b252      	sxtb	r2, r2
 8000ede:	4013      	ands	r3, r2
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	4815      	ldr	r0, [pc, #84]	@ (8000f3c <OLED_I2C_SendByte+0x88>)
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	f001 f893 	bl	8002014 <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <OLED_I2C_SendByte+0x88>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2140      	movs	r1, #64	@ 0x40
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 f88d 	bl	8002014 <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <OLED_I2C_SendByte+0x88>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	2140      	movs	r1, #64	@ 0x40
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 f887 	bl	8002014 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	3201      	adds	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	d9d7      	bls.n	8000eca <OLED_I2C_SendByte+0x16>
	}
	OLED_W_SCL(1); // 额外的一个时钟，不处理应答信号
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <OLED_I2C_SendByte+0x88>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2140      	movs	r1, #64	@ 0x40
 8000f20:	0018      	movs	r0, r3
 8000f22:	f001 f877 	bl	8002014 <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8000f26:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <OLED_I2C_SendByte+0x88>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2140      	movs	r1, #64	@ 0x40
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 f871 	bl	8002014 <HAL_GPIO_WritePin>
}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b005      	add	sp, #20
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	48000400 	.word	0x48000400

08000f40 <OLED_WriteCommand>:
 * @brief  OLED写命令
 * @param  Command 要写入的命令
 * @retval 无
 */
void OLED_WriteCommand(uint8_t Command)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	0002      	movs	r2, r0
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	701a      	strb	r2, [r3, #0]
	OLED_I2C_Start();
 8000f4c:	f7ff ff78 	bl	8000e40 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78); // 从机地址
 8000f50:	2078      	movs	r0, #120	@ 0x78
 8000f52:	f7ff ffaf 	bl	8000eb4 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00); // 写命令
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ffac 	bl	8000eb4 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command);
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ffa7 	bl	8000eb4 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8000f66:	f7ff ff8b 	bl	8000e80 <OLED_I2C_Stop>
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <OLED_WriteData>:
 * @brief  OLED写数据
 * @param  Data 要写入的数据
 * @retval 无
 */
void OLED_WriteData(uint8_t Data)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	0002      	movs	r2, r0
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
	OLED_I2C_Start();
 8000f7e:	f7ff ff5f 	bl	8000e40 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78); // 从机地址
 8000f82:	2078      	movs	r0, #120	@ 0x78
 8000f84:	f7ff ff96 	bl	8000eb4 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40); // 写数据
 8000f88:	2040      	movs	r0, #64	@ 0x40
 8000f8a:	f7ff ff93 	bl	8000eb4 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff ff8e 	bl	8000eb4 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8000f98:	f7ff ff72 	bl	8000e80 <OLED_I2C_Stop>
}
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <OLED_SetCursor>:
 * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
 * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
 * @retval 无
 */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	0002      	movs	r2, r0
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	1c0a      	adds	r2, r1, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	OLED_WriteCommand(0xB0 | Y);				 // 设置Y位置
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2250      	movs	r2, #80	@ 0x50
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff ffbc 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4)); // 设置X位置高4位
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff ffb2 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));		 // 设置X位置低4位
 8000fdc:	1dbb      	adds	r3, r7, #6
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ffaa 	bl	8000f40 <OLED_WriteCommand>
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <OLED_Clear>:
 * @brief  OLED清屏
 * @param  无
 * @retval 无
 */
void OLED_Clear(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8000ffa:	1dbb      	adds	r3, r7, #6
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e01b      	b.n	800103a <OLED_Clear+0x46>
	{
		OLED_SetCursor(j, 0);
 8001002:	1dbb      	adds	r3, r7, #6
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2100      	movs	r1, #0
 8001008:	0018      	movs	r0, r3
 800100a:	f7ff ffcb 	bl	8000fa4 <OLED_SetCursor>
		for (i = 0; i < 128; i++)
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e007      	b.n	8001026 <OLED_Clear+0x32>
		{
			OLED_WriteData(0x00);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff ffab 	bl	8000f72 <OLED_WriteData>
		for (i = 0; i < 128; i++)
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	781a      	ldrb	r2, [r3, #0]
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	3201      	adds	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b25b      	sxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	daf2      	bge.n	8001016 <OLED_Clear+0x22>
	for (j = 0; j < 8; j++)
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	1dbb      	adds	r3, r7, #6
 8001036:	3201      	adds	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	1dbb      	adds	r3, r7, #6
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9df      	bls.n	8001002 <OLED_Clear+0xe>
		}
	}
}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}

0800104c <OLED_ShowChar>:
 * @param  Column 列位置，范围：1~16
 * @param  Char 要显示的一个字符，范围：ASCII可见字符
 * @retval 无
 */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	0004      	movs	r4, r0
 8001054:	0008      	movs	r0, r1
 8001056:	0011      	movs	r1, r2
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	1c22      	adds	r2, r4, #0
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	1c02      	adds	r2, r0, #0
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	1d7b      	adds	r3, r7, #5
 8001066:	1c0a      	adds	r2, r1, #0
 8001068:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); // 设置光标位置在上半部分
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	18db      	adds	r3, r3, r3
 8001074:	b2da      	uxtb	r2, r3
 8001076:	1dbb      	adds	r3, r7, #6
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f7ff ff8d 	bl	8000fa4 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e012      	b.n	80010ba <OLED_ShowChar+0x6e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]); // 显示上半部分内容
 8001094:	1d7b      	adds	r3, r7, #5
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3b20      	subs	r3, #32
 800109a:	001a      	movs	r2, r3
 800109c:	240f      	movs	r4, #15
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4922      	ldr	r1, [pc, #136]	@ (800112c <OLED_ShowChar+0xe0>)
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	188a      	adds	r2, r1, r2
 80010a8:	5cd3      	ldrb	r3, [r2, r3]
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff ff61 	bl	8000f72 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	3201      	adds	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	240f      	movs	r4, #15
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d9e7      	bls.n	8001094 <OLED_ShowChar+0x48>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); // 设置光标位置在下半部分
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	18db      	adds	r3, r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	1dbb      	adds	r3, r7, #6
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	0019      	movs	r1, r3
 80010e2:	0010      	movs	r0, r2
 80010e4:	f7ff ff5e 	bl	8000fa4 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80010e8:	193b      	adds	r3, r7, r4
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e013      	b.n	8001118 <OLED_ShowChar+0xcc>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]); // 显示下半部分内容
 80010f0:	1d7b      	adds	r3, r7, #5
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	3b20      	subs	r3, #32
 80010f6:	001a      	movs	r2, r3
 80010f8:	240f      	movs	r4, #15
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3308      	adds	r3, #8
 8001100:	490a      	ldr	r1, [pc, #40]	@ (800112c <OLED_ShowChar+0xe0>)
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	188a      	adds	r2, r1, r2
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ff32 	bl	8000f72 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 800110e:	193b      	adds	r3, r7, r4
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	193b      	adds	r3, r7, r4
 8001114:	3201      	adds	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	230f      	movs	r3, #15
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b07      	cmp	r3, #7
 8001120:	d9e6      	bls.n	80010f0 <OLED_ShowChar+0xa4>
	}
}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46c0      	nop			@ (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b005      	add	sp, #20
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	08004198 	.word	0x08004198

08001130 <OLED_Pow>:
/**
 * @brief  OLED次方函数
 * @retval 返回值等于X的Y次方
 */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 800113a:	2301      	movs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
	while (Y--)
 800113e:	e003      	b.n	8001148 <OLED_Pow+0x18>
	{
		Result *= X;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4353      	muls	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	603a      	str	r2, [r7, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f6      	bne.n	8001140 <OLED_Pow+0x10>
	}
	return Result;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b004      	add	sp, #16
 800115a:	bd80      	pop	{r7, pc}

0800115c <OLED_ShowHexNum>:
 * @param  Number 要显示的数字，范围：0~0xFFFFFFFF
 * @param  Length 要显示数字的长度，范围：1~8
 * @retval 无
 */
void OLED_ShowHexNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	0004      	movs	r4, r0
 8001164:	0008      	movs	r0, r1
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	0019      	movs	r1, r3
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	1c22      	adds	r2, r4, #0
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	1c02      	adds	r2, r0, #0
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	1d7b      	adds	r3, r7, #5
 8001178:	1c0a      	adds	r2, r1, #0
 800117a:	701a      	strb	r2, [r3, #0]
	uint8_t i, SingleNumber;
	for (i = 0; i < Length; i++)
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e041      	b.n	800120a <OLED_ShowHexNum+0xae>
	{
		SingleNumber = Number / OLED_Pow(16, Length - i - 1) % 16;
 8001186:	1d7b      	adds	r3, r7, #5
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	240f      	movs	r4, #15
 800118c:	193b      	adds	r3, r7, r4
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	0019      	movs	r1, r3
 8001196:	2010      	movs	r0, #16
 8001198:	f7ff ffca 	bl	8001130 <OLED_Pow>
 800119c:	0003      	movs	r3, r0
 800119e:	0019      	movs	r1, r3
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f7fe ffb1 	bl	8000108 <__udivsi3>
 80011a6:	0003      	movs	r3, r0
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	200e      	movs	r0, #14
 80011ac:	183b      	adds	r3, r7, r0
 80011ae:	210f      	movs	r1, #15
 80011b0:	400a      	ands	r2, r1
 80011b2:	701a      	strb	r2, [r3, #0]
		if (SingleNumber < 10)
 80011b4:	183b      	adds	r3, r7, r0
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d80f      	bhi.n	80011dc <OLED_ShowHexNum+0x80>
		{
			OLED_ShowChar(Line, Column + i, SingleNumber + '0');
 80011bc:	1dba      	adds	r2, r7, #6
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	b2d9      	uxtb	r1, r3
 80011c8:	183b      	adds	r3, r7, r0
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3330      	adds	r3, #48	@ 0x30
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ff39 	bl	800104c <OLED_ShowChar>
 80011da:	e010      	b.n	80011fe <OLED_ShowHexNum+0xa2>
		}
		else
		{
			OLED_ShowChar(Line, Column + i, SingleNumber - 10 + 'A');
 80011dc:	1dba      	adds	r2, r7, #6
 80011de:	230f      	movs	r3, #15
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	7812      	ldrb	r2, [r2, #0]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	18d3      	adds	r3, r2, r3
 80011e8:	b2d9      	uxtb	r1, r3
 80011ea:	230e      	movs	r3, #14
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3337      	adds	r3, #55	@ 0x37
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ff27 	bl	800104c <OLED_ShowChar>
	for (i = 0; i < Length; i++)
 80011fe:	210f      	movs	r1, #15
 8001200:	187b      	adds	r3, r7, r1
 8001202:	781a      	ldrb	r2, [r3, #0]
 8001204:	187b      	adds	r3, r7, r1
 8001206:	3201      	adds	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	230f      	movs	r3, #15
 800120c:	18fa      	adds	r2, r7, r3
 800120e:	1d7b      	adds	r3, r7, #5
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3b6      	bcc.n	8001186 <OLED_ShowHexNum+0x2a>
		}
	}
}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b005      	add	sp, #20
 8001220:	bd90      	pop	{r4, r7, pc}

08001222 <OLED_ShowHexArray>:
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(2, Length - i - 1) % 2 + '0');
	}
}

void OLED_ShowHexArray(uint8_t* arr,uint8_t len, uint8_t Line)
{
 8001222:	b590      	push	{r4, r7, lr}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	0008      	movs	r0, r1
 800122c:	0011      	movs	r1, r2
 800122e:	1cfb      	adds	r3, r7, #3
 8001230:	1c02      	adds	r2, r0, #0
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	1cbb      	adds	r3, r7, #2
 8001236:	1c0a      	adds	r2, r1, #0
 8001238:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++)
 800123a:	230f      	movs	r3, #15
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e016      	b.n	8001272 <OLED_ShowHexArray+0x50>
	{
		OLED_ShowHexNum(Line, 1 + i * 2 , arr[i], 2);
 8001244:	240f      	movs	r4, #15
 8001246:	193b      	adds	r3, r7, r4
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	18db      	adds	r3, r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	3301      	adds	r3, #1
 8001250:	b2d9      	uxtb	r1, r3
 8001252:	193b      	adds	r3, r7, r4
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	18d3      	adds	r3, r2, r3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	001a      	movs	r2, r3
 800125e:	1cbb      	adds	r3, r7, #2
 8001260:	7818      	ldrb	r0, [r3, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	f7ff ff7a 	bl	800115c <OLED_ShowHexNum>
	for (uint8_t i = 0; i < len; i++)
 8001268:	193b      	adds	r3, r7, r4
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	193b      	adds	r3, r7, r4
 800126e:	3201      	adds	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	230f      	movs	r3, #15
 8001274:	18fa      	adds	r2, r7, r3
 8001276:	1cfb      	adds	r3, r7, #3
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d3e1      	bcc.n	8001244 <OLED_ShowHexArray+0x22>
	}

}
 8001280:	46c0      	nop			@ (mov r8, r8)
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b005      	add	sp, #20
 8001288:	bd90      	pop	{r4, r7, pc}

0800128a <OLED_Init>:
 * @brief  OLED初始化
 * @param  无
 * @retval 无
 */
void OLED_Init(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
	uint32_t i, j;

	for (i = 0; i < 1000; i++) // 上电延时
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	e00d      	b.n	80012b2 <OLED_Init+0x28>
	{
		for (j = 0; j < 1000; j++)
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	e002      	b.n	80012a2 <OLED_Init+0x18>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	23fa      	movs	r3, #250	@ 0xfa
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3f7      	bcc.n	800129c <OLED_Init+0x12>
	for (i = 0; i < 1000; i++) // 上电延时
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	23fa      	movs	r3, #250	@ 0xfa
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3ec      	bcc.n	8001296 <OLED_Init+0xc>
			;
	}

	OLED_I2C_Init(); // 端口初始化
 80012bc:	f7ff fd8a 	bl	8000dd4 <OLED_I2C_Init>

	OLED_WriteCommand(0xAE); // 关闭显示
 80012c0:	20ae      	movs	r0, #174	@ 0xae
 80012c2:	f7ff fe3d 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 80012c6:	20d5      	movs	r0, #213	@ 0xd5
 80012c8:	f7ff fe3a 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80012cc:	2080      	movs	r0, #128	@ 0x80
 80012ce:	f7ff fe37 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xA8); // 设置多路复用率
 80012d2:	20a8      	movs	r0, #168	@ 0xa8
 80012d4:	f7ff fe34 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80012d8:	203f      	movs	r0, #63	@ 0x3f
 80012da:	f7ff fe31 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xD3); // 设置显示偏移
 80012de:	20d3      	movs	r0, #211	@ 0xd3
 80012e0:	f7ff fe2e 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fe2b 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0x40); // 设置显示开始行
 80012ea:	2040      	movs	r0, #64	@ 0x40
 80012ec:	f7ff fe28 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xA1); // 设置左右方向，0xA1正常 0xA0左右反置
 80012f0:	20a1      	movs	r0, #161	@ 0xa1
 80012f2:	f7ff fe25 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xC8); // 设置上下方向，0xC8正常 0xC0上下反置
 80012f6:	20c8      	movs	r0, #200	@ 0xc8
 80012f8:	f7ff fe22 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA); // 设置COM引脚硬件配置
 80012fc:	20da      	movs	r0, #218	@ 0xda
 80012fe:	f7ff fe1f 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8001302:	2012      	movs	r0, #18
 8001304:	f7ff fe1c 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0x81); // 设置对比度控制
 8001308:	2081      	movs	r0, #129	@ 0x81
 800130a:	f7ff fe19 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 800130e:	20cf      	movs	r0, #207	@ 0xcf
 8001310:	f7ff fe16 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9); // 设置预充电周期
 8001314:	20d9      	movs	r0, #217	@ 0xd9
 8001316:	f7ff fe13 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800131a:	20f1      	movs	r0, #241	@ 0xf1
 800131c:	f7ff fe10 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB); // 设置VCOMH取消选择级别
 8001320:	20db      	movs	r0, #219	@ 0xdb
 8001322:	f7ff fe0d 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8001326:	2030      	movs	r0, #48	@ 0x30
 8001328:	f7ff fe0a 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4); // 设置整个显示打开/关闭
 800132c:	20a4      	movs	r0, #164	@ 0xa4
 800132e:	f7ff fe07 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6); // 设置正常/倒转显示
 8001332:	20a6      	movs	r0, #166	@ 0xa6
 8001334:	f7ff fe04 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D); // 设置充电泵
 8001338:	208d      	movs	r0, #141	@ 0x8d
 800133a:	f7ff fe01 	bl	8000f40 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 800133e:	2014      	movs	r0, #20
 8001340:	f7ff fdfe 	bl	8000f40 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF); // 开启显示
 8001344:	20af      	movs	r0, #175	@ 0xaf
 8001346:	f7ff fdfb 	bl	8000f40 <OLED_WriteCommand>

	OLED_Clear(); // OLED清屏
 800134a:	f7ff fe53 	bl	8000ff4 <OLED_Clear>
}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}

08001356 <Get_Bcc_Value>:
uint8_t ReadData_NOICRespond[7];

/**
 * 获取校验码的值
 */
uint8_t Get_Bcc_Value(uint8_t* arr, uint8_t size) {
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	000a      	movs	r2, r1
 8001360:	1cfb      	adds	r3, r7, #3
 8001362:	701a      	strb	r2, [r3, #0]
    uint8_t result = arr[0];
 8001364:	230f      	movs	r3, #15
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	701a      	strb	r2, [r3, #0]

    for (int i = 1; i < size; i++) {
 800136e:	2301      	movs	r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	e00c      	b.n	800138e <Get_Bcc_Value+0x38>
        result ^= arr[i];
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	7819      	ldrb	r1, [r3, #0]
 800137c:	220f      	movs	r2, #15
 800137e:	18bb      	adds	r3, r7, r2
 8001380:	18ba      	adds	r2, r7, r2
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	404a      	eors	r2, r1
 8001386:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < size; i++) {
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3301      	adds	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	1cfb      	adds	r3, r7, #3
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbed      	blt.n	8001374 <Get_Bcc_Value+0x1e>
    }

    // 异或取反
    result = ~result;
 8001398:	210f      	movs	r1, #15
 800139a:	187b      	adds	r3, r7, r1
 800139c:	187a      	adds	r2, r7, r1
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	43d2      	mvns	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
    return result;
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	781b      	ldrb	r3, [r3, #0]
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b004      	add	sp, #16
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <insert_section_key>:
 * @param command_write_data 指向命令写入数据缓冲区的指针，该缓冲区应有足够的空间容纳插入的分区密钥
 * @param section_key 指向分区密钥的指针，该密钥将被插入到命令写入数据中
 * @return null
 */
void insert_section_key(uint8_t* command_write_data, uint8_t* section_key)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
    memcpy(command_write_data + 7, section_key, 6);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3307      	adds	r3, #7
 80013be:	6839      	ldr	r1, [r7, #0]
 80013c0:	2206      	movs	r2, #6
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 fdb2 	bl	8003f2c <memcpy>
}
 80013c8:	46c0      	nop			@ (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <USART_SendArray>:

void USART_SendArray(uint8_t* array,uint8_t size)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	000a      	movs	r2, r1
 80013da:	1cfb      	adds	r3, r7, #3
 80013dc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, array, size, 500);
 80013de:	1cfb      	adds	r3, r7, #3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	23fa      	movs	r3, #250	@ 0xfa
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <USART_SendArray+0x28>)
 80013ec:	f002 f832 	bl	8003454 <HAL_UART_Transmit>
}
 80013f0:	46c0      	nop			@ (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000021c 	.word	0x2000021c

080013fc <USART_ReceiveArray>:

void USART_ReceiveArray(uint8_t* array, uint8_t size)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	000a      	movs	r2, r1
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	701a      	strb	r2, [r3, #0]
	memset(array,0,size);
 800140a:	1cfb      	adds	r3, r7, #3
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2100      	movs	r1, #0
 8001412:	0018      	movs	r0, r3
 8001414:	f002 fd5e 	bl	8003ed4 <memset>
	uint8_t count = 0;
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
    while(count < size)
 8001420:	e00f      	b.n	8001442 <USART_ReceiveArray+0x46>
    {
        HAL_UART_Receive(&huart1 , array + count, 1, 500);
 8001422:	240f      	movs	r4, #15
 8001424:	193b      	adds	r3, r7, r4
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	18d1      	adds	r1, r2, r3
 800142c:	23fa      	movs	r3, #250	@ 0xfa
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	480a      	ldr	r0, [pc, #40]	@ (800145c <USART_ReceiveArray+0x60>)
 8001432:	2201      	movs	r2, #1
 8001434:	f002 f8ae 	bl	8003594 <HAL_UART_Receive>
//        HAL_UART_Receive(&huart1 , array, size, 1000);
        count++;
 8001438:	193b      	adds	r3, r7, r4
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	193b      	adds	r3, r7, r4
 800143e:	3201      	adds	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
    while(count < size)
 8001442:	230f      	movs	r3, #15
 8001444:	18fa      	adds	r2, r7, r3
 8001446:	1cfb      	adds	r3, r7, #3
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3e8      	bcc.n	8001422 <USART_ReceiveArray+0x26>
    }
}
 8001450:	46c0      	nop			@ (mov r8, r8)
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b005      	add	sp, #20
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	2000021c 	.word	0x2000021c

08001460 <USART_ReceiveData>:

void USART_ReceiveData(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

    uint8_t size = 0;
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive(&huart1,&size, 1, 100);
 800146c:	1df9      	adds	r1, r7, #7
 800146e:	4811      	ldr	r0, [pc, #68]	@ (80014b4 <USART_ReceiveData+0x54>)
 8001470:	2364      	movs	r3, #100	@ 0x64
 8001472:	2201      	movs	r2, #1
 8001474:	f002 f88e 	bl	8003594 <HAL_UART_Receive>
	if (size == 0x07)
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b07      	cmp	r3, #7
 800147e:	d109      	bne.n	8001494 <USART_ReceiveData+0x34>
    {
        ReadData_NOICRespond[0] = size;
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <USART_ReceiveData+0x58>)
 8001486:	701a      	strb	r2, [r3, #0]
        USART_ReceiveArray(ReadData_NOICRespond + 1, 6);
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <USART_ReceiveData+0x5c>)
 800148a:	2106      	movs	r1, #6
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ffb5 	bl	80013fc <USART_ReceiveArray>
    {
        ReadData_HaveICRespond[0] = size;
        USART_ReceiveArray(ReadData_HaveICRespond + 1, 28);
        IsReadDataFlag = 1;
    }
}
 8001492:	e00b      	b.n	80014ac <USART_ReceiveData+0x4c>
        ReadData_HaveICRespond[0] = size;
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <USART_ReceiveData+0x60>)
 800149a:	701a      	strb	r2, [r3, #0]
        USART_ReceiveArray(ReadData_HaveICRespond + 1, 28);
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <USART_ReceiveData+0x64>)
 800149e:	211c      	movs	r1, #28
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff ffab 	bl	80013fc <USART_ReceiveArray>
        IsReadDataFlag = 1;
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <USART_ReceiveData+0x68>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
}
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000021c 	.word	0x2000021c
 80014b8:	200001cc 	.word	0x200001cc
 80014bc:	200001cd 	.word	0x200001cd
 80014c0:	200001ac 	.word	0x200001ac
 80014c4:	200001ad 	.word	0x200001ad
 80014c8:	20000190 	.word	0x20000190

080014cc <RFID_Rc523_Config>:

uint8_t RFID_Rc523_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
    uint8_t Config_State = 0;
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]

    USART_SendArray(Config_ModuleAddr,6);
 80014d8:	4b60      	ldr	r3, [pc, #384]	@ (800165c <RFID_Rc523_Config+0x190>)
 80014da:	2106      	movs	r1, #6
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ff77 	bl	80013d0 <USART_SendArray>
    OLED_ShowHexArray(Config_ModuleAddr, 6, 1);
 80014e2:	4b5e      	ldr	r3, [pc, #376]	@ (800165c <RFID_Rc523_Config+0x190>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	2106      	movs	r1, #6
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff fe9a 	bl	8001222 <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 80014ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001660 <RFID_Rc523_Config+0x194>)
 80014f0:	2106      	movs	r1, #6
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff82 	bl	80013fc <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 2);
 80014f8:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <RFID_Rc523_Config+0x194>)
 80014fa:	2202      	movs	r2, #2
 80014fc:	2106      	movs	r1, #6
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff fe8f 	bl	8001222 <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8001504:	4b56      	ldr	r3, [pc, #344]	@ (8001660 <RFID_Rc523_Config+0x194>)
 8001506:	78d9      	ldrb	r1, [r3, #3]
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	1dfa      	adds	r2, r7, #7
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]

    USART_SendArray(Config_ICType,6);
 8001512:	4b54      	ldr	r3, [pc, #336]	@ (8001664 <RFID_Rc523_Config+0x198>)
 8001514:	2106      	movs	r1, #6
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff ff5a 	bl	80013d0 <USART_SendArray>
    OLED_ShowHexArray(Config_ICType, 6, 3);
 800151c:	4b51      	ldr	r3, [pc, #324]	@ (8001664 <RFID_Rc523_Config+0x198>)
 800151e:	2203      	movs	r2, #3
 8001520:	2106      	movs	r1, #6
 8001522:	0018      	movs	r0, r3
 8001524:	f7ff fe7d 	bl	8001222 <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8001528:	4b4d      	ldr	r3, [pc, #308]	@ (8001660 <RFID_Rc523_Config+0x194>)
 800152a:	2106      	movs	r1, #6
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ff65 	bl	80013fc <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 8001532:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <RFID_Rc523_Config+0x194>)
 8001534:	2204      	movs	r2, #4
 8001536:	2106      	movs	r1, #6
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff fe72 	bl	8001222 <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 800153e:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <RFID_Rc523_Config+0x194>)
 8001540:	78d9      	ldrb	r1, [r3, #3]
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	1dfa      	adds	r2, r7, #7
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 800154c:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <RFID_Rc523_Config+0x19c>)
 800154e:	0018      	movs	r0, r3
 8001550:	f000 fb16 	bl	8001b80 <HAL_Delay>

    USART_SendArray(Config_AutoReadID,6);
 8001554:	4b45      	ldr	r3, [pc, #276]	@ (800166c <RFID_Rc523_Config+0x1a0>)
 8001556:	2106      	movs	r1, #6
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff ff39 	bl	80013d0 <USART_SendArray>
    OLED_ShowHexArray(Config_AutoReadID, 6, 1);
 800155e:	4b43      	ldr	r3, [pc, #268]	@ (800166c <RFID_Rc523_Config+0x1a0>)
 8001560:	2201      	movs	r2, #1
 8001562:	2106      	movs	r1, #6
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fe5c 	bl	8001222 <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <RFID_Rc523_Config+0x194>)
 800156c:	2106      	movs	r1, #6
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff ff44 	bl	80013fc <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 2);
 8001574:	4b3a      	ldr	r3, [pc, #232]	@ (8001660 <RFID_Rc523_Config+0x194>)
 8001576:	2202      	movs	r2, #2
 8001578:	2106      	movs	r1, #6
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff fe51 	bl	8001222 <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8001580:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <RFID_Rc523_Config+0x194>)
 8001582:	78d9      	ldrb	r1, [r3, #3]
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	1dfa      	adds	r2, r7, #7
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]


    USART_SendArray(Config_FilterCopyCard,6);
 800158e:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <RFID_Rc523_Config+0x1a4>)
 8001590:	2106      	movs	r1, #6
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff ff1c 	bl	80013d0 <USART_SendArray>
    OLED_ShowHexArray(Config_FilterCopyCard, 6, 3);
 8001598:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <RFID_Rc523_Config+0x1a4>)
 800159a:	2203      	movs	r2, #3
 800159c:	2106      	movs	r1, #6
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff fe3f 	bl	8001222 <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <RFID_Rc523_Config+0x194>)
 80015a6:	2106      	movs	r1, #6
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ff27 	bl	80013fc <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 80015ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001660 <RFID_Rc523_Config+0x194>)
 80015b0:	2204      	movs	r2, #4
 80015b2:	2106      	movs	r1, #6
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff fe34 	bl	8001222 <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 80015ba:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <RFID_Rc523_Config+0x194>)
 80015bc:	78d9      	ldrb	r1, [r3, #3]
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	1dfa      	adds	r2, r7, #7
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 80015c8:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <RFID_Rc523_Config+0x19c>)
 80015ca:	0018      	movs	r0, r3
 80015cc:	f000 fad8 	bl	8001b80 <HAL_Delay>

    USART_SendArray(Config_ChannelNum,6);
 80015d0:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <RFID_Rc523_Config+0x1a8>)
 80015d2:	2106      	movs	r1, #6
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff fefb 	bl	80013d0 <USART_SendArray>
    OLED_ShowHexArray(Config_ChannelNum, 6, 1);
 80015da:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <RFID_Rc523_Config+0x1a8>)
 80015dc:	2201      	movs	r2, #1
 80015de:	2106      	movs	r1, #6
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff fe1e 	bl	8001222 <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 80015e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <RFID_Rc523_Config+0x194>)
 80015e8:	2106      	movs	r1, #6
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff ff06 	bl	80013fc <USART_ReceiveArray>
    Config_State |= config_respond[3];
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <RFID_Rc523_Config+0x194>)
 80015f2:	78d9      	ldrb	r1, [r3, #3]
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	1dfa      	adds	r2, r7, #7
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
    OLED_ShowHexArray(config_respond, 6, 2);
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <RFID_Rc523_Config+0x194>)
 8001600:	2202      	movs	r2, #2
 8001602:	2106      	movs	r1, #6
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff fe0c 	bl	8001222 <OLED_ShowHexArray>

    USART_SendArray(Config_SectionPassward,14);
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <RFID_Rc523_Config+0x1ac>)
 800160c:	210e      	movs	r1, #14
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff fede 	bl	80013d0 <USART_SendArray>
    OLED_ShowHexArray(Config_SectionPassward, 6, 3);
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <RFID_Rc523_Config+0x1ac>)
 8001616:	2203      	movs	r2, #3
 8001618:	2106      	movs	r1, #6
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff fe01 	bl	8001222 <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <RFID_Rc523_Config+0x194>)
 8001622:	2106      	movs	r1, #6
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff fee9 	bl	80013fc <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <RFID_Rc523_Config+0x194>)
 800162c:	2204      	movs	r2, #4
 800162e:	2106      	movs	r1, #6
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff fdf6 	bl	8001222 <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <RFID_Rc523_Config+0x194>)
 8001638:	78d9      	ldrb	r1, [r3, #3]
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	1dfa      	adds	r2, r7, #7
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <RFID_Rc523_Config+0x19c>)
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fa9a 	bl	8001b80 <HAL_Delay>
    OLED_Clear();
 800164c:	f7ff fcd2 	bl	8000ff4 <OLED_Clear>
    return Config_State;
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000001c 	.word	0x2000001c
 8001660:	200001a4 	.word	0x200001a4
 8001664:	20000024 	.word	0x20000024
 8001668:	00000bb8 	.word	0x00000bb8
 800166c:	2000002c 	.word	0x2000002c
 8001670:	20000034 	.word	0x20000034
 8001674:	2000003c 	.word	0x2000003c
 8001678:	20000044 	.word	0x20000044

0800167c <RFID_Rc523_Read_Block>:
 * @param Channel 通信通道号，用于指定通信信道
 * @param blockaddr 数据块地址，用于指定要读取的数据块
 * @param Data 数据缓冲区指针，用于存储读取到的数据块内容
 */
void RFID_Rc523_Read_Block(uint8_t Channel, uint8_t blockaddr, uint8_t* Data)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	603a      	str	r2, [r7, #0]
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	1c02      	adds	r2, r0, #0
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	1dbb      	adds	r3, r7, #6
 800168c:	1c0a      	adds	r2, r1, #0
 800168e:	701a      	strb	r2, [r3, #0]
    uint8_t bcc = 0;
 8001690:	240f      	movs	r4, #15
 8001692:	193b      	adds	r3, r7, r4
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    Command_ReadData[CHANNEL] = Channel;
 8001698:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <RFID_Rc523_Read_Block+0x9c>)
 800169a:	1dfa      	adds	r2, r7, #7
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	70da      	strb	r2, [r3, #3]
    Command_ReadData[BLOCK] = blockaddr;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <RFID_Rc523_Read_Block+0x9c>)
 80016a2:	1dba      	adds	r2, r7, #6
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	711a      	strb	r2, [r3, #4]
    insert_section_key(Command_ReadData, section_key);
 80016a8:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <RFID_Rc523_Read_Block+0xa0>)
 80016aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <RFID_Rc523_Read_Block+0x9c>)
 80016ac:	0011      	movs	r1, r2
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff fe7e 	bl	80013b0 <insert_section_key>
    bcc = Get_Bcc_Value(Command_ReadData,13);
 80016b4:	0025      	movs	r5, r4
 80016b6:	193c      	adds	r4, r7, r4
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <RFID_Rc523_Read_Block+0x9c>)
 80016ba:	210d      	movs	r1, #13
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff fe4a 	bl	8001356 <Get_Bcc_Value>
 80016c2:	0003      	movs	r3, r0
 80016c4:	7023      	strb	r3, [r4, #0]
    Command_ReadData[13] = bcc;
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <RFID_Rc523_Read_Block+0x9c>)
 80016c8:	197a      	adds	r2, r7, r5
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	735a      	strb	r2, [r3, #13]

    USART_SendArray(Command_ReadData,15);
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <RFID_Rc523_Read_Block+0x9c>)
 80016d0:	210f      	movs	r1, #15
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff fe7c 	bl	80013d0 <USART_SendArray>
    USART_ReceiveData();
 80016d8:	f7ff fec2 	bl	8001460 <USART_ReceiveData>




    if (IsReadDataFlag)
 80016dc:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <RFID_Rc523_Read_Block+0xa4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <RFID_Rc523_Read_Block+0x7c>
    {
		memcpy(Data,ReadData_HaveICRespond + 11, 16);
 80016e4:	490f      	ldr	r1, [pc, #60]	@ (8001724 <RFID_Rc523_Read_Block+0xa8>)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2210      	movs	r2, #16
 80016ea:	0018      	movs	r0, r3
 80016ec:	f002 fc1e 	bl	8003f2c <memcpy>
//	    OLED_ShowHexArray(Data, 8, 1);
//	    OLED_ShowHexArray(Data + 8, 8, 2);
//	    HAL_Delay(5000);
//	    OLED_Clear();
		IsReadDataFlag = 0;
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <RFID_Rc523_Read_Block+0xa4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
	    OLED_ShowHexArray(ReadData_NOICRespond, 8, 1);
	    HAL_Delay(5000);
	    OLED_Clear();
    }

}
 80016f6:	e00b      	b.n	8001710 <RFID_Rc523_Read_Block+0x94>
	    OLED_ShowHexArray(ReadData_NOICRespond, 8, 1);
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <RFID_Rc523_Read_Block+0xac>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	2108      	movs	r1, #8
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff fd8f 	bl	8001222 <OLED_ShowHexArray>
	    HAL_Delay(5000);
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <RFID_Rc523_Read_Block+0xb0>)
 8001706:	0018      	movs	r0, r3
 8001708:	f000 fa3a 	bl	8001b80 <HAL_Delay>
	    OLED_Clear();
 800170c:	f7ff fc72 	bl	8000ff4 <OLED_Clear>
}
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b004      	add	sp, #16
 8001716:	bdb0      	pop	{r4, r5, r7, pc}
 8001718:	20000054 	.word	0x20000054
 800171c:	20000014 	.word	0x20000014
 8001720:	20000190 	.word	0x20000190
 8001724:	200001b7 	.word	0x200001b7
 8001728:	200001cc 	.word	0x200001cc
 800172c:	00001388 	.word	0x00001388

08001730 <rfid_read_channel_data>:
//        RFID_Rc523_Write_Block(channel, 1 + 4 * (i-1), (uint8_t*)data + ((i - 1) * 16));
//    }
}

void rfid_read_channel_data(uint8_t channel, Material_Data* data)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	0002      	movs	r2, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	701a      	strb	r2, [r3, #0]
//	    OLED_ShowHexArray((uint8_t*)data + 40, 8, 2);
//	    HAL_Delay(5000);
//	    OLED_Clear();
//    }

	for(uint8_t i = 1; i <= count; i++)
 800173e:	230f      	movs	r3, #15
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e059      	b.n	80017fc <rfid_read_channel_data+0xcc>
	{
		if(i % 2 == 1)
 8001748:	210f      	movs	r1, #15
 800174a:	187b      	adds	r3, r7, r1
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d012      	beq.n	800177e <rfid_read_channel_data+0x4e>
		{
			RFID_Rc523_Read_Block(channel, 1 + 4 * ((i - 1) / 2),plaintext); // 1 1 3 5 5 9
 8001758:	187b      	adds	r3, r7, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	da00      	bge.n	8001764 <rfid_read_channel_data+0x34>
 8001762:	3301      	adds	r3, #1
 8001764:	105b      	asrs	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	b2db      	uxtb	r3, r3
 800176c:	3301      	adds	r3, #1
 800176e:	b2d9      	uxtb	r1, r3
 8001770:	4a28      	ldr	r2, [pc, #160]	@ (8001814 <rfid_read_channel_data+0xe4>)
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff ff80 	bl	800167c <RFID_Rc523_Read_Block>
 800177c:	e012      	b.n	80017a4 <rfid_read_channel_data+0x74>
		}
		else
		{
			RFID_Rc523_Read_Block(channel, 2 + 4 * ((i - 1) / 2),plaintext); // 2 2 4 6 6 10
 800177e:	230f      	movs	r3, #15
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3b01      	subs	r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	da00      	bge.n	800178c <rfid_read_channel_data+0x5c>
 800178a:	3301      	adds	r3, #1
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3302      	adds	r3, #2
 8001796:	b2d9      	uxtb	r1, r3
 8001798:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <rfid_read_channel_data+0xe4>)
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	0018      	movs	r0, r3
 80017a0:	f7ff ff6c 	bl	800167c <RFID_Rc523_Read_Block>
		}
	    OLED_ShowHexArray(plaintext, 8, 1);
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <rfid_read_channel_data+0xe4>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	2108      	movs	r1, #8
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7ff fd39 	bl	8001222 <OLED_ShowHexArray>
	    OLED_ShowHexArray(plaintext + 8, 8, 2);
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <rfid_read_channel_data+0xe8>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	2108      	movs	r1, #8
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fd33 	bl	8001222 <OLED_ShowHexArray>

	    HAL_Delay(5000);
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <rfid_read_channel_data+0xec>)
 80017be:	0018      	movs	r0, r3
 80017c0:	f000 f9de 	bl	8001b80 <HAL_Delay>
	    OLED_Clear();
 80017c4:	f7ff fc16 	bl	8000ff4 <OLED_Clear>
		invcipher(plaintext, key);
 80017c8:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <rfid_read_channel_data+0xf0>)
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <rfid_read_channel_data+0xe4>)
 80017cc:	0011      	movs	r1, r2
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff f86e 	bl	80008b0 <invcipher>
		memcpy((uint8_t*)data + ((i - 1) * 16), plaintext, 16);
 80017d4:	240f      	movs	r4, #15
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	3b01      	subs	r3, #1
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	001a      	movs	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	189a      	adds	r2, r3, r2
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <rfid_read_channel_data+0xe4>)
 80017e6:	0010      	movs	r0, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	2310      	movs	r3, #16
 80017ec:	001a      	movs	r2, r3
 80017ee:	f002 fb9d 	bl	8003f2c <memcpy>
	for(uint8_t i = 1; i <= count; i++)
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	3201      	adds	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <rfid_read_channel_data+0xf4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	220f      	movs	r2, #15
 8001802:	18ba      	adds	r2, r7, r2
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d99e      	bls.n	8001748 <rfid_read_channel_data+0x18>
	}
}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	46c0      	nop			@ (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b005      	add	sp, #20
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	20000194 	.word	0x20000194
 8001818:	2000019c 	.word	0x2000019c
 800181c:	00001388 	.word	0x00001388
 8001820:	20000004 	.word	0x20000004
 8001824:	20000000 	.word	0x20000000

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <HAL_MspInit+0x44>)
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_MspInit+0x44>)
 8001834:	2101      	movs	r1, #1
 8001836:	430a      	orrs	r2, r1
 8001838:	619a      	str	r2, [r3, #24]
 800183a:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <HAL_MspInit+0x44>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2201      	movs	r2, #1
 8001840:	4013      	ands	r3, r2
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <HAL_MspInit+0x44>)
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_MspInit+0x44>)
 800184c:	2180      	movs	r1, #128	@ 0x80
 800184e:	0549      	lsls	r1, r1, #21
 8001850:	430a      	orrs	r2, r1
 8001852:	61da      	str	r2, [r3, #28]
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_MspInit+0x44>)
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	055b      	lsls	r3, r3, #21
 800185c:	4013      	ands	r3, r2
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001880:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_InitTick+0xf4>)
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_InitTick+0xf4>)
 8001886:	2180      	movs	r1, #128	@ 0x80
 8001888:	0109      	lsls	r1, r1, #4
 800188a:	430a      	orrs	r2, r1
 800188c:	619a      	str	r2, [r3, #24]
 800188e:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <HAL_InitTick+0xf4>)
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	4013      	ands	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189c:	230c      	movs	r3, #12
 800189e:	18fa      	adds	r2, r7, r3
 80018a0:	2410      	movs	r4, #16
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	0011      	movs	r1, r2
 80018a6:	0018      	movs	r0, r3
 80018a8:	f001 fa02 	bl	8002cb0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018ac:	193b      	adds	r3, r7, r4
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d104      	bne.n	80018c2 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018b8:	f001 f9e4 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80018bc:	0003      	movs	r3, r0
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018c0:	e004      	b.n	80018cc <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018c2:	f001 f9df 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80018c6:	0003      	movs	r3, r0
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ce:	4926      	ldr	r1, [pc, #152]	@ (8001968 <HAL_InitTick+0xf8>)
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7fe fc19 	bl	8000108 <__udivsi3>
 80018d6:	0003      	movs	r3, r0
 80018d8:	3b01      	subs	r3, #1
 80018da:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018dc:	4b23      	ldr	r3, [pc, #140]	@ (800196c <HAL_InitTick+0xfc>)
 80018de:	4a24      	ldr	r2, [pc, #144]	@ (8001970 <HAL_InitTick+0x100>)
 80018e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018e2:	4b22      	ldr	r3, [pc, #136]	@ (800196c <HAL_InitTick+0xfc>)
 80018e4:	4a23      	ldr	r2, [pc, #140]	@ (8001974 <HAL_InitTick+0x104>)
 80018e6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018e8:	4b20      	ldr	r3, [pc, #128]	@ (800196c <HAL_InitTick+0xfc>)
 80018ea:	6a3a      	ldr	r2, [r7, #32]
 80018ec:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <HAL_InitTick+0xfc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <HAL_InitTick+0xfc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_InitTick+0xfc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001900:	252b      	movs	r5, #43	@ 0x2b
 8001902:	197c      	adds	r4, r7, r5
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_InitTick+0xfc>)
 8001906:	0018      	movs	r0, r3
 8001908:	f001 fafa 	bl	8002f00 <HAL_TIM_Base_Init>
 800190c:	0003      	movs	r3, r0
 800190e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001910:	197b      	adds	r3, r7, r5
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d11e      	bne.n	8001956 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001918:	197c      	adds	r4, r7, r5
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <HAL_InitTick+0xfc>)
 800191c:	0018      	movs	r0, r3
 800191e:	f001 fb47 	bl	8002fb0 <HAL_TIM_Base_Start_IT>
 8001922:	0003      	movs	r3, r0
 8001924:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001926:	197b      	adds	r3, r7, r5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d113      	bne.n	8001956 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800192e:	200d      	movs	r0, #13
 8001930:	f000 f9e7 	bl	8001d02 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d809      	bhi.n	800194e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	0019      	movs	r1, r3
 8001940:	200d      	movs	r0, #13
 8001942:	f000 f9c9 	bl	8001cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001946:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <HAL_InitTick+0x108>)
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e003      	b.n	8001956 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800194e:	232b      	movs	r3, #43	@ 0x2b
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001956:	232b      	movs	r3, #43	@ 0x2b
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	781b      	ldrb	r3, [r3, #0]
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b00c      	add	sp, #48	@ 0x30
 8001962:	bdb0      	pop	{r4, r5, r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	000f4240 	.word	0x000f4240
 800196c:	200001d4 	.word	0x200001d4
 8001970:	40012c00 	.word	0x40012c00
 8001974:	000003e7 	.word	0x000003e7
 8001978:	20000068 	.word	0x20000068

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	e7fd      	b.n	8001980 <NMI_Handler+0x4>

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	e7fd      	b.n	8001988 <HardFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b0:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f001 fb4e 	bl	8003054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	200001d4 	.word	0x200001d4

080019c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019c8:	46c0      	nop			@ (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 80019d6:	4a15      	ldr	r2, [pc, #84]	@ (8001a2c <MX_USART1_UART_Init+0x5c>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 80019dc:	22e1      	movs	r2, #225	@ 0xe1
 80019de:	0252      	lsls	r2, r2, #9
 80019e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <MX_USART1_UART_Init+0x58>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f001 fcc9 	bl	80033ac <HAL_UART_Init>
 8001a1a:	1e03      	subs	r3, r0, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a1e:	f7ff f9d3 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000021c 	.word	0x2000021c
 8001a2c:	40013800 	.word	0x40013800

08001a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b08b      	sub	sp, #44	@ 0x2c
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	2414      	movs	r4, #20
 8001a3a:	193b      	adds	r3, r7, r4
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	2314      	movs	r3, #20
 8001a40:	001a      	movs	r2, r3
 8001a42:	2100      	movs	r1, #0
 8001a44:	f002 fa46 	bl	8003ed4 <memset>
  if(uartHandle->Instance==USART1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <HAL_UART_MspInit+0x94>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d133      	bne.n	8001aba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a58:	2180      	movs	r1, #128	@ 0x80
 8001a5a:	01c9      	lsls	r1, r1, #7
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	619a      	str	r2, [r3, #24]
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	01db      	lsls	r3, r3, #7
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	0289      	lsls	r1, r1, #10
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_UART_MspInit+0x98>)
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	029b      	lsls	r3, r3, #10
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	22c0      	movs	r2, #192	@ 0xc0
 8001a8e:	00d2      	lsls	r2, r2, #3
 8001a90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	0021      	movs	r1, r4
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	2202      	movs	r2, #2
 8001a98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	187a      	adds	r2, r7, r1
 8001aae:	2390      	movs	r3, #144	@ 0x90
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f935 	bl	8001d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b00b      	add	sp, #44	@ 0x2c
 8001ac0:	bd90      	pop	{r4, r7, pc}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40021000 	.word	0x40021000

08001acc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001acc:	480d      	ldr	r0, [pc, #52]	@ (8001b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ace:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ad0:	f7ff ff78 	bl	80019c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ad6:	490d      	ldr	r1, [pc, #52]	@ (8001b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <LoopForever+0xe>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aec:	4c0a      	ldr	r4, [pc, #40]	@ (8001b18 <LoopForever+0x16>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001afa:	f002 f9f3 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afe:	f7fe ffe5 	bl	8000acc <main>

08001b02 <LoopForever>:

LoopForever:
    b LoopForever
 8001b02:	e7fe      	b.n	8001b02 <LoopForever>
  ldr   r0, =_estack
 8001b04:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b10:	080047c8 	.word	0x080047c8
  ldr r2, =_sbss
 8001b14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b18:	200002a8 	.word	0x200002a8

08001b1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC1_COMP_IRQHandler>
	...

08001b20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <HAL_Init+0x24>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_Init+0x24>)
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f7ff fe9d 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b36:	f7ff fe77 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_IncTick+0x1c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	001a      	movs	r2, r3
 8001b52:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_IncTick+0x20>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	18d2      	adds	r2, r2, r3
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <HAL_IncTick+0x20>)
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	46c0      	nop			@ (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	2000006c 	.word	0x2000006c
 8001b68:	200002a4 	.word	0x200002a4

08001b6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b02      	ldr	r3, [pc, #8]	@ (8001b7c <HAL_GetTick+0x10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	200002a4 	.word	0x200002a4

08001b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fff0 	bl	8001b6c <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3301      	adds	r3, #1
 8001b98:	d005      	beq.n	8001ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_Delay+0x44>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	189b      	adds	r3, r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	f7ff ffe0 	bl	8001b6c <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d8f7      	bhi.n	8001ba8 <HAL_Delay+0x28>
  {
  }
}
 8001bb8:	46c0      	nop			@ (mov r8, r8)
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b004      	add	sp, #16
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	2000006c 	.word	0x2000006c

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	0002      	movs	r2, r0
 8001bd0:	1dfb      	adds	r3, r7, #7
 8001bd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bda:	d809      	bhi.n	8001bf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	001a      	movs	r2, r3
 8001be2:	231f      	movs	r3, #31
 8001be4:	401a      	ands	r2, r3
 8001be6:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_EnableIRQ+0x30>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	4091      	lsls	r1, r2
 8001bec:	000a      	movs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
  }
}
 8001bf0:	46c0      	nop			@ (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	0002      	movs	r2, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c10:	d828      	bhi.n	8001c64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c12:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd0 <__NVIC_SetPriority+0xd4>)
 8001c14:	1dfb      	adds	r3, r7, #7
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	33c0      	adds	r3, #192	@ 0xc0
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	589b      	ldr	r3, [r3, r2]
 8001c22:	1dfa      	adds	r2, r7, #7
 8001c24:	7812      	ldrb	r2, [r2, #0]
 8001c26:	0011      	movs	r1, r2
 8001c28:	2203      	movs	r2, #3
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	00d2      	lsls	r2, r2, #3
 8001c2e:	21ff      	movs	r1, #255	@ 0xff
 8001c30:	4091      	lsls	r1, r2
 8001c32:	000a      	movs	r2, r1
 8001c34:	43d2      	mvns	r2, r2
 8001c36:	401a      	ands	r2, r3
 8001c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	22ff      	movs	r2, #255	@ 0xff
 8001c40:	401a      	ands	r2, r3
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	0018      	movs	r0, r3
 8001c48:	2303      	movs	r3, #3
 8001c4a:	4003      	ands	r3, r0
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c50:	481f      	ldr	r0, [pc, #124]	@ (8001cd0 <__NVIC_SetPriority+0xd4>)
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	33c0      	adds	r3, #192	@ 0xc0
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c62:	e031      	b.n	8001cc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c64:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <__NVIC_SetPriority+0xd8>)
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	400b      	ands	r3, r1
 8001c70:	3b08      	subs	r3, #8
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3306      	adds	r3, #6
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	18d3      	adds	r3, r2, r3
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	1dfa      	adds	r2, r7, #7
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	0011      	movs	r1, r2
 8001c84:	2203      	movs	r2, #3
 8001c86:	400a      	ands	r2, r1
 8001c88:	00d2      	lsls	r2, r2, #3
 8001c8a:	21ff      	movs	r1, #255	@ 0xff
 8001c8c:	4091      	lsls	r1, r2
 8001c8e:	000a      	movs	r2, r1
 8001c90:	43d2      	mvns	r2, r2
 8001c92:	401a      	ands	r2, r3
 8001c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	22ff      	movs	r2, #255	@ 0xff
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	4003      	ands	r3, r0
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cac:	4809      	ldr	r0, [pc, #36]	@ (8001cd4 <__NVIC_SetPriority+0xd8>)
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	001c      	movs	r4, r3
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	4023      	ands	r3, r4
 8001cb8:	3b08      	subs	r3, #8
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	3306      	adds	r3, #6
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	18c3      	adds	r3, r0, r3
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b003      	add	sp, #12
 8001cce:	bd90      	pop	{r4, r7, pc}
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	1c02      	adds	r2, r0, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff ff81 	bl	8001bfc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	0002      	movs	r2, r0
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff ff57 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d32:	e155      	b.n	8001fe0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4091      	lsls	r1, r2
 8001d3e:	000a      	movs	r2, r1
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d100      	bne.n	8001d4c <HAL_GPIO_Init+0x28>
 8001d4a:	e146      	b.n	8001fda <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2203      	movs	r2, #3
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d005      	beq.n	8001d64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d130      	bne.n	8001dc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	409a      	lsls	r2, r3
 8001d72:	0013      	movs	r3, r2
 8001d74:	43da      	mvns	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	409a      	lsls	r2, r3
 8001d86:	0013      	movs	r3, r2
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	43da      	mvns	r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	2201      	movs	r2, #1
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
 8001db8:	0013      	movs	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d017      	beq.n	8001e02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	43da      	mvns	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2203      	movs	r2, #3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d123      	bne.n	8001e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	58d3      	ldr	r3, [r2, r3]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2207      	movs	r2, #7
 8001e20:	4013      	ands	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2107      	movs	r1, #7
 8001e3a:	400b      	ands	r3, r1
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	6939      	ldr	r1, [r7, #16]
 8001e54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	409a      	lsls	r2, r3
 8001e64:	0013      	movs	r3, r2
 8001e66:	43da      	mvns	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2203      	movs	r2, #3
 8001e74:	401a      	ands	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	23c0      	movs	r3, #192	@ 0xc0
 8001e90:	029b      	lsls	r3, r3, #10
 8001e92:	4013      	ands	r3, r2
 8001e94:	d100      	bne.n	8001e98 <HAL_GPIO_Init+0x174>
 8001e96:	e0a0      	b.n	8001fda <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e98:	4b57      	ldr	r3, [pc, #348]	@ (8001ff8 <HAL_GPIO_Init+0x2d4>)
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	4b56      	ldr	r3, [pc, #344]	@ (8001ff8 <HAL_GPIO_Init+0x2d4>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	619a      	str	r2, [r3, #24]
 8001ea4:	4b54      	ldr	r3, [pc, #336]	@ (8001ff8 <HAL_GPIO_Init+0x2d4>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eb0:	4a52      	ldr	r2, [pc, #328]	@ (8001ffc <HAL_GPIO_Init+0x2d8>)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	589b      	ldr	r3, [r3, r2]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	0013      	movs	r3, r2
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	2390      	movs	r3, #144	@ 0x90
 8001ed8:	05db      	lsls	r3, r3, #23
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a47      	ldr	r2, [pc, #284]	@ (8002000 <HAL_GPIO_Init+0x2dc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x1ea>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a46      	ldr	r2, [pc, #280]	@ (8002004 <HAL_GPIO_Init+0x2e0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x1e6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a45      	ldr	r2, [pc, #276]	@ (8002008 <HAL_GPIO_Init+0x2e4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x1e2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a44      	ldr	r2, [pc, #272]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x1de>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e008      	b.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001f06:	2303      	movs	r3, #3
 8001f08:	e004      	b.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001f12:	2300      	movs	r3, #0
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	2103      	movs	r1, #3
 8001f18:	400a      	ands	r2, r1
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4093      	lsls	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f24:	4935      	ldr	r1, [pc, #212]	@ (8001ffc <HAL_GPIO_Init+0x2d8>)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f32:	4b37      	ldr	r3, [pc, #220]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	035b      	lsls	r3, r3, #13
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f56:	4b2e      	ldr	r3, [pc, #184]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43da      	mvns	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	039b      	lsls	r3, r3, #14
 8001f74:	4013      	ands	r3, r2
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f80:	4b23      	ldr	r3, [pc, #140]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f86:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	029b      	lsls	r3, r3, #10
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001faa:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	025b      	lsls	r3, r3, #9
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <HAL_GPIO_Init+0x2ec>)
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	40da      	lsrs	r2, r3
 8001fe8:	1e13      	subs	r3, r2, #0
 8001fea:	d000      	beq.n	8001fee <HAL_GPIO_Init+0x2ca>
 8001fec:	e6a2      	b.n	8001d34 <HAL_GPIO_Init+0x10>
  } 
}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b006      	add	sp, #24
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010000 	.word	0x40010000
 8002000:	48000400 	.word	0x48000400
 8002004:	48000800 	.word	0x48000800
 8002008:	48000c00 	.word	0x48000c00
 800200c:	48001000 	.word	0x48001000
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	0008      	movs	r0, r1
 800201e:	0011      	movs	r1, r2
 8002020:	1cbb      	adds	r3, r7, #2
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	1c7b      	adds	r3, r7, #1
 8002028:	1c0a      	adds	r2, r1, #0
 800202a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202c:	1c7b      	adds	r3, r7, #1
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002034:	1cbb      	adds	r3, r7, #2
 8002036:	881a      	ldrh	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800203e:	1cbb      	adds	r3, r7, #2
 8002040:	881a      	ldrh	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b002      	add	sp, #8
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e08f      	b.n	8002182 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2241      	movs	r2, #65	@ 0x41
 8002066:	5c9b      	ldrb	r3, [r3, r2]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2240      	movs	r2, #64	@ 0x40
 8002072:	2100      	movs	r1, #0
 8002074:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0018      	movs	r0, r3
 800207a:	f7fe fcd9 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2241      	movs	r2, #65	@ 0x41
 8002082:	2124      	movs	r1, #36	@ 0x24
 8002084:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	438a      	bics	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	493b      	ldr	r1, [pc, #236]	@ (800218c <HAL_I2C_Init+0x13c>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4938      	ldr	r1, [pc, #224]	@ (8002190 <HAL_I2C_Init+0x140>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2180      	movs	r1, #128	@ 0x80
 80020c6:	0209      	lsls	r1, r1, #8
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	e007      	b.n	80020de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2184      	movs	r1, #132	@ 0x84
 80020d8:	0209      	lsls	r1, r1, #8
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d109      	bne.n	80020fa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	0109      	lsls	r1, r1, #4
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	e007      	b.n	800210a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4923      	ldr	r1, [pc, #140]	@ (8002194 <HAL_I2C_Init+0x144>)
 8002106:	400a      	ands	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4920      	ldr	r1, [pc, #128]	@ (8002198 <HAL_I2C_Init+0x148>)
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	491a      	ldr	r1, [pc, #104]	@ (8002190 <HAL_I2C_Init+0x140>)
 8002126:	400a      	ands	r2, r1
 8002128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	431a      	orrs	r2, r3
 8002134:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69d9      	ldr	r1, [r3, #28]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2241      	movs	r2, #65	@ 0x41
 800216e:	2120      	movs	r1, #32
 8002170:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2242      	movs	r2, #66	@ 0x42
 800217c:	2100      	movs	r1, #0
 800217e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	f0ffffff 	.word	0xf0ffffff
 8002190:	ffff7fff 	.word	0xffff7fff
 8002194:	fffff7ff 	.word	0xfffff7ff
 8002198:	02008000 	.word	0x02008000

0800219c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2241      	movs	r2, #65	@ 0x41
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d138      	bne.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2240      	movs	r2, #64	@ 0x40
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021bc:	2302      	movs	r3, #2
 80021be:	e032      	b.n	8002226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2240      	movs	r2, #64	@ 0x40
 80021c4:	2101      	movs	r1, #1
 80021c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2241      	movs	r2, #65	@ 0x41
 80021cc:	2124      	movs	r1, #36	@ 0x24
 80021ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4911      	ldr	r1, [pc, #68]	@ (8002230 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2241      	movs	r2, #65	@ 0x41
 8002214:	2120      	movs	r1, #32
 8002216:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2240      	movs	r2, #64	@ 0x40
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	e000      	b.n	8002226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002224:	2302      	movs	r3, #2
  }
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	ffffefff 	.word	0xffffefff

08002234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2241      	movs	r2, #65	@ 0x41
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	d139      	bne.n	80022be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2240      	movs	r2, #64	@ 0x40
 800224e:	5c9b      	ldrb	r3, [r3, r2]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002254:	2302      	movs	r3, #2
 8002256:	e033      	b.n	80022c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2240      	movs	r2, #64	@ 0x40
 800225c:	2101      	movs	r1, #1
 800225e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2241      	movs	r2, #65	@ 0x41
 8002264:	2124      	movs	r1, #36	@ 0x24
 8002266:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2241      	movs	r2, #65	@ 0x41
 80022ae:	2120      	movs	r1, #32
 80022b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2240      	movs	r2, #64	@ 0x40
 80022b6:	2100      	movs	r1, #0
 80022b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
  }
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b004      	add	sp, #16
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	fffff0ff 	.word	0xfffff0ff

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	f000 fb76 	bl	80029cc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	d100      	bne.n	80022ec <HAL_RCC_OscConfig+0x20>
 80022ea:	e08e      	b.n	800240a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ec:	4bc5      	ldr	r3, [pc, #788]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	220c      	movs	r2, #12
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d00e      	beq.n	8002316 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f8:	4bc2      	ldr	r3, [pc, #776]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	220c      	movs	r2, #12
 80022fe:	4013      	ands	r3, r2
 8002300:	2b08      	cmp	r3, #8
 8002302:	d117      	bne.n	8002334 <HAL_RCC_OscConfig+0x68>
 8002304:	4bbf      	ldr	r3, [pc, #764]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	23c0      	movs	r3, #192	@ 0xc0
 800230a:	025b      	lsls	r3, r3, #9
 800230c:	401a      	ands	r2, r3
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	429a      	cmp	r2, r3
 8002314:	d10e      	bne.n	8002334 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002316:	4bbb      	ldr	r3, [pc, #748]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	4013      	ands	r3, r2
 8002320:	d100      	bne.n	8002324 <HAL_RCC_OscConfig+0x58>
 8002322:	e071      	b.n	8002408 <HAL_RCC_OscConfig+0x13c>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d000      	beq.n	800232e <HAL_RCC_OscConfig+0x62>
 800232c:	e06c      	b.n	8002408 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f000 fb4c 	bl	80029cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x80>
 800233c:	4bb1      	ldr	r3, [pc, #708]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4bb0      	ldr	r3, [pc, #704]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002342:	2180      	movs	r1, #128	@ 0x80
 8002344:	0249      	lsls	r1, r1, #9
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e02f      	b.n	80023ac <HAL_RCC_OscConfig+0xe0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0xa2>
 8002354:	4bab      	ldr	r3, [pc, #684]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4baa      	ldr	r3, [pc, #680]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800235a:	49ab      	ldr	r1, [pc, #684]	@ (8002608 <HAL_RCC_OscConfig+0x33c>)
 800235c:	400a      	ands	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	4ba8      	ldr	r3, [pc, #672]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4ba7      	ldr	r3, [pc, #668]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002366:	49a9      	ldr	r1, [pc, #676]	@ (800260c <HAL_RCC_OscConfig+0x340>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e01e      	b.n	80023ac <HAL_RCC_OscConfig+0xe0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10e      	bne.n	8002394 <HAL_RCC_OscConfig+0xc8>
 8002376:	4ba3      	ldr	r3, [pc, #652]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4ba2      	ldr	r3, [pc, #648]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800237c:	2180      	movs	r1, #128	@ 0x80
 800237e:	02c9      	lsls	r1, r1, #11
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	4b9f      	ldr	r3, [pc, #636]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b9e      	ldr	r3, [pc, #632]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800238a:	2180      	movs	r1, #128	@ 0x80
 800238c:	0249      	lsls	r1, r1, #9
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xe0>
 8002394:	4b9b      	ldr	r3, [pc, #620]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b9a      	ldr	r3, [pc, #616]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800239a:	499b      	ldr	r1, [pc, #620]	@ (8002608 <HAL_RCC_OscConfig+0x33c>)
 800239c:	400a      	ands	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	4b98      	ldr	r3, [pc, #608]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b97      	ldr	r3, [pc, #604]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80023a6:	4999      	ldr	r1, [pc, #612]	@ (800260c <HAL_RCC_OscConfig+0x340>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d014      	beq.n	80023de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fbda 	bl	8001b6c <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023be:	f7ff fbd5 	bl	8001b6c <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	@ 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e2fd      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0xf2>
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7ff fbc5 	bl	8001b6c <HAL_GetTick>
 80023e2:	0003      	movs	r3, r0
 80023e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff fbc0 	bl	8001b6c <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e2e8      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b82      	ldr	r3, [pc, #520]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	4013      	ands	r3, r2
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x11c>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2202      	movs	r2, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d100      	bne.n	8002416 <HAL_RCC_OscConfig+0x14a>
 8002414:	e06c      	b.n	80024f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002416:	4b7b      	ldr	r3, [pc, #492]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	220c      	movs	r2, #12
 800241c:	4013      	ands	r3, r2
 800241e:	d00e      	beq.n	800243e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002420:	4b78      	ldr	r3, [pc, #480]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	220c      	movs	r2, #12
 8002426:	4013      	ands	r3, r2
 8002428:	2b08      	cmp	r3, #8
 800242a:	d11f      	bne.n	800246c <HAL_RCC_OscConfig+0x1a0>
 800242c:	4b75      	ldr	r3, [pc, #468]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	23c0      	movs	r3, #192	@ 0xc0
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	401a      	ands	r2, r3
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	429a      	cmp	r2, r3
 800243c:	d116      	bne.n	800246c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	4b71      	ldr	r3, [pc, #452]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d005      	beq.n	8002454 <HAL_RCC_OscConfig+0x188>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e2bb      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b6b      	ldr	r3, [pc, #428]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	22f8      	movs	r2, #248	@ 0xf8
 800245a:	4393      	bics	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00da      	lsls	r2, r3, #3
 8002464:	4b67      	ldr	r3, [pc, #412]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	e041      	b.n	80024f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d024      	beq.n	80024be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002474:	4b63      	ldr	r3, [pc, #396]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b62      	ldr	r3, [pc, #392]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800247a:	2101      	movs	r1, #1
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff fb74 	bl	8001b6c <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248a:	f7ff fb6f 	bl	8001b6c <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e297      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b59      	ldr	r3, [pc, #356]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d0f1      	beq.n	800248a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b57      	ldr	r3, [pc, #348]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	22f8      	movs	r2, #248	@ 0xf8
 80024ac:	4393      	bics	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	00da      	lsls	r2, r3, #3
 80024b6:	4b53      	ldr	r3, [pc, #332]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e018      	b.n	80024f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b51      	ldr	r3, [pc, #324]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b50      	ldr	r3, [pc, #320]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	438a      	bics	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff fb4f 	bl	8001b6c <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d4:	f7ff fb4a 	bl	8001b6c <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e272      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2202      	movs	r2, #2
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f1      	bne.n	80024d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2208      	movs	r2, #8
 80024f6:	4013      	ands	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d019      	beq.n	8002536 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b40      	ldr	r3, [pc, #256]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002504:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002506:	4b3f      	ldr	r3, [pc, #252]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7ff fb2d 	bl	8001b6c <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff fb28 	bl	8001b6c <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e250      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	4b36      	ldr	r3, [pc, #216]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d0f1      	beq.n	8002518 <HAL_RCC_OscConfig+0x24c>
 8002534:	e018      	b.n	8002568 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002536:	4b33      	ldr	r3, [pc, #204]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800253a:	4b32      	ldr	r3, [pc, #200]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800253c:	2101      	movs	r1, #1
 800253e:	438a      	bics	r2, r1
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7ff fb13 	bl	8001b6c <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254c:	f7ff fb0e 	bl	8001b6c <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e236      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d1f1      	bne.n	800254c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2204      	movs	r2, #4
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x2a8>
 8002572:	e0b5      	b.n	80026e0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002574:	201f      	movs	r0, #31
 8002576:	183b      	adds	r3, r7, r0
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257c:	4b21      	ldr	r3, [pc, #132]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	4013      	ands	r3, r2
 8002586:	d110      	bne.n	80025aa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 800258e:	2180      	movs	r1, #128	@ 0x80
 8002590:	0549      	lsls	r1, r1, #21
 8002592:	430a      	orrs	r2, r1
 8002594:	61da      	str	r2, [r3, #28]
 8002596:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	055b      	lsls	r3, r3, #21
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025a4:	183b      	adds	r3, r7, r0
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b19      	ldr	r3, [pc, #100]	@ (8002610 <HAL_RCC_OscConfig+0x344>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	d11a      	bne.n	80025ec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b6:	4b16      	ldr	r3, [pc, #88]	@ (8002610 <HAL_RCC_OscConfig+0x344>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_RCC_OscConfig+0x344>)
 80025bc:	2180      	movs	r1, #128	@ 0x80
 80025be:	0049      	lsls	r1, r1, #1
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c4:	f7ff fad2 	bl	8001b6c <HAL_GetTick>
 80025c8:	0003      	movs	r3, r0
 80025ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ce:	f7ff facd 	bl	8001b6c <HAL_GetTick>
 80025d2:	0002      	movs	r2, r0
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b64      	cmp	r3, #100	@ 0x64
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1f5      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_RCC_OscConfig+0x344>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	@ 0x80
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10f      	bne.n	8002614 <HAL_RCC_OscConfig+0x348>
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	4b02      	ldr	r3, [pc, #8]	@ (8002604 <HAL_RCC_OscConfig+0x338>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	430a      	orrs	r2, r1
 80025fe:	621a      	str	r2, [r3, #32]
 8002600:	e036      	b.n	8002670 <HAL_RCC_OscConfig+0x3a4>
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	40021000 	.word	0x40021000
 8002608:	fffeffff 	.word	0xfffeffff
 800260c:	fffbffff 	.word	0xfffbffff
 8002610:	40007000 	.word	0x40007000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x36a>
 800261c:	4bca      	ldr	r3, [pc, #808]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	4bc9      	ldr	r3, [pc, #804]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002622:	2101      	movs	r1, #1
 8002624:	438a      	bics	r2, r1
 8002626:	621a      	str	r2, [r3, #32]
 8002628:	4bc7      	ldr	r3, [pc, #796]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	4bc6      	ldr	r3, [pc, #792]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800262e:	2104      	movs	r1, #4
 8002630:	438a      	bics	r2, r1
 8002632:	621a      	str	r2, [r3, #32]
 8002634:	e01c      	b.n	8002670 <HAL_RCC_OscConfig+0x3a4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b05      	cmp	r3, #5
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x38c>
 800263e:	4bc2      	ldr	r3, [pc, #776]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002640:	6a1a      	ldr	r2, [r3, #32]
 8002642:	4bc1      	ldr	r3, [pc, #772]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002644:	2104      	movs	r1, #4
 8002646:	430a      	orrs	r2, r1
 8002648:	621a      	str	r2, [r3, #32]
 800264a:	4bbf      	ldr	r3, [pc, #764]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	4bbe      	ldr	r3, [pc, #760]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	621a      	str	r2, [r3, #32]
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0x3a4>
 8002658:	4bbb      	ldr	r3, [pc, #748]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	4bba      	ldr	r3, [pc, #744]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800265e:	2101      	movs	r1, #1
 8002660:	438a      	bics	r2, r1
 8002662:	621a      	str	r2, [r3, #32]
 8002664:	4bb8      	ldr	r3, [pc, #736]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002666:	6a1a      	ldr	r2, [r3, #32]
 8002668:	4bb7      	ldr	r3, [pc, #732]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800266a:	2104      	movs	r1, #4
 800266c:	438a      	bics	r2, r1
 800266e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d014      	beq.n	80026a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002678:	f7ff fa78 	bl	8001b6c <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e009      	b.n	8002696 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff fa73 	bl	8001b6c <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	4aaf      	ldr	r2, [pc, #700]	@ (800294c <HAL_RCC_OscConfig+0x680>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e19a      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	4bac      	ldr	r3, [pc, #688]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x3b6>
 80026a0:	e013      	b.n	80026ca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7ff fa63 	bl	8001b6c <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026aa:	e009      	b.n	80026c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7ff fa5e 	bl	8001b6c <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	4aa5      	ldr	r2, [pc, #660]	@ (800294c <HAL_RCC_OscConfig+0x680>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e185      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	4ba1      	ldr	r3, [pc, #644]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d4:	4b9c      	ldr	r3, [pc, #624]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	4b9b      	ldr	r3, [pc, #620]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026da:	499d      	ldr	r1, [pc, #628]	@ (8002950 <HAL_RCC_OscConfig+0x684>)
 80026dc:	400a      	ands	r2, r1
 80026de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2210      	movs	r2, #16
 80026e6:	4013      	ands	r3, r2
 80026e8:	d063      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d12a      	bne.n	8002748 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026f2:	4b95      	ldr	r3, [pc, #596]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026f6:	4b94      	ldr	r3, [pc, #592]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80026f8:	2104      	movs	r1, #4
 80026fa:	430a      	orrs	r2, r1
 80026fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026fe:	4b92      	ldr	r3, [pc, #584]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002702:	4b91      	ldr	r3, [pc, #580]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002704:	2101      	movs	r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7ff fa2f 	bl	8001b6c <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002714:	f7ff fa2a 	bl	8001b6c <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e152      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002726:	4b88      	ldr	r3, [pc, #544]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d0f1      	beq.n	8002714 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002730:	4b85      	ldr	r3, [pc, #532]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002734:	22f8      	movs	r2, #248	@ 0xf8
 8002736:	4393      	bics	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	00da      	lsls	r2, r3, #3
 8002740:	4b81      	ldr	r3, [pc, #516]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002742:	430a      	orrs	r2, r1
 8002744:	635a      	str	r2, [r3, #52]	@ 0x34
 8002746:	e034      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	3305      	adds	r3, #5
 800274e:	d111      	bne.n	8002774 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002750:	4b7d      	ldr	r3, [pc, #500]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002754:	4b7c      	ldr	r3, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002756:	2104      	movs	r1, #4
 8002758:	438a      	bics	r2, r1
 800275a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800275c:	4b7a      	ldr	r3, [pc, #488]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	22f8      	movs	r2, #248	@ 0xf8
 8002762:	4393      	bics	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	00da      	lsls	r2, r3, #3
 800276c:	4b76      	ldr	r3, [pc, #472]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800276e:	430a      	orrs	r2, r1
 8002770:	635a      	str	r2, [r3, #52]	@ 0x34
 8002772:	e01e      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002774:	4b74      	ldr	r3, [pc, #464]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002778:	4b73      	ldr	r3, [pc, #460]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800277a:	2104      	movs	r1, #4
 800277c:	430a      	orrs	r2, r1
 800277e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002780:	4b71      	ldr	r3, [pc, #452]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002784:	4b70      	ldr	r3, [pc, #448]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002786:	2101      	movs	r1, #1
 8002788:	438a      	bics	r2, r1
 800278a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278c:	f7ff f9ee 	bl	8001b6c <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002796:	f7ff f9e9 	bl	8001b6c <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e111      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027a8:	4b67      	ldr	r3, [pc, #412]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d1f1      	bne.n	8002796 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2220      	movs	r2, #32
 80027b8:	4013      	ands	r3, r2
 80027ba:	d05c      	beq.n	8002876 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027bc:	4b62      	ldr	r3, [pc, #392]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	220c      	movs	r2, #12
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d00e      	beq.n	80027e6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	220c      	movs	r2, #12
 80027ce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d114      	bne.n	80027fe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	23c0      	movs	r3, #192	@ 0xc0
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	401a      	ands	r2, r3
 80027de:	23c0      	movs	r3, #192	@ 0xc0
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d10b      	bne.n	80027fe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80027e6:	4b58      	ldr	r3, [pc, #352]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80027e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	4013      	ands	r3, r2
 80027f0:	d040      	beq.n	8002874 <HAL_RCC_OscConfig+0x5a8>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d03c      	beq.n	8002874 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0e6      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01b      	beq.n	800283e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002806:	4b50      	ldr	r3, [pc, #320]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800280a:	4b4f      	ldr	r3, [pc, #316]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800280c:	2180      	movs	r1, #128	@ 0x80
 800280e:	0249      	lsls	r1, r1, #9
 8002810:	430a      	orrs	r2, r1
 8002812:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff f9aa 	bl	8001b6c <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800281e:	f7ff f9a5 	bl	8001b6c <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0cd      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002830:	4b45      	ldr	r3, [pc, #276]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	4013      	ands	r3, r2
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x552>
 800283c:	e01b      	b.n	8002876 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800283e:	4b42      	ldr	r3, [pc, #264]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002842:	4b41      	ldr	r3, [pc, #260]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002844:	4943      	ldr	r1, [pc, #268]	@ (8002954 <HAL_RCC_OscConfig+0x688>)
 8002846:	400a      	ands	r2, r1
 8002848:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7ff f98f 	bl	8001b6c <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002854:	f7ff f98a 	bl	8001b6c <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0b2      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	4013      	ands	r3, r2
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x588>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002874:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	d100      	bne.n	8002880 <HAL_RCC_OscConfig+0x5b4>
 800287e:	e0a4      	b.n	80029ca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	220c      	movs	r2, #12
 8002886:	4013      	ands	r3, r2
 8002888:	2b08      	cmp	r3, #8
 800288a:	d100      	bne.n	800288e <HAL_RCC_OscConfig+0x5c2>
 800288c:	e078      	b.n	8002980 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	2b02      	cmp	r3, #2
 8002894:	d14c      	bne.n	8002930 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002896:	4b2c      	ldr	r3, [pc, #176]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b2b      	ldr	r3, [pc, #172]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 800289c:	492e      	ldr	r1, [pc, #184]	@ (8002958 <HAL_RCC_OscConfig+0x68c>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7ff f963 	bl	8001b6c <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7ff f95e 	bl	8001b6c <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e086      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028be:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	049b      	lsls	r3, r3, #18
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	220f      	movs	r2, #15
 80028d0:	4393      	bics	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028da:	430a      	orrs	r2, r1
 80028dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028de:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	@ (800295c <HAL_RCC_OscConfig+0x690>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	431a      	orrs	r2, r3
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 80028fe:	2180      	movs	r1, #128	@ 0x80
 8002900:	0449      	lsls	r1, r1, #17
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7ff f931 	bl	8001b6c <HAL_GetTick>
 800290a:	0003      	movs	r3, r0
 800290c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7ff f92c 	bl	8001b6c <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e054      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	049b      	lsls	r3, r3, #18
 800292a:	4013      	ands	r3, r2
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x644>
 800292e:	e04c      	b.n	80029ca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_RCC_OscConfig+0x67c>)
 8002936:	4908      	ldr	r1, [pc, #32]	@ (8002958 <HAL_RCC_OscConfig+0x68c>)
 8002938:	400a      	ands	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff f916 	bl	8001b6c <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x6a6>
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	40021000 	.word	0x40021000
 800294c:	00001388 	.word	0x00001388
 8002950:	efffffff 	.word	0xefffffff
 8002954:	fffeffff 	.word	0xfffeffff
 8002958:	feffffff 	.word	0xfeffffff
 800295c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff f904 	bl	8001b6c <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e02c      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	4b18      	ldr	r3, [pc, #96]	@ (80029d4 <HAL_RCC_OscConfig+0x708>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	049b      	lsls	r3, r3, #18
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x694>
 800297e:	e024      	b.n	80029ca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e01f      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800298c:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <HAL_RCC_OscConfig+0x708>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_RCC_OscConfig+0x708>)
 8002994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002996:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	23c0      	movs	r3, #192	@ 0xc0
 800299c:	025b      	lsls	r3, r3, #9
 800299e:	401a      	ands	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d10e      	bne.n	80029c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	220f      	movs	r2, #15
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	23f0      	movs	r3, #240	@ 0xf0
 80029ba:	039b      	lsls	r3, r3, #14
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b008      	add	sp, #32
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0bf      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b61      	ldr	r3, [pc, #388]	@ (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d911      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	4b5b      	ldr	r3, [pc, #364]	@ (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b59      	ldr	r3, [pc, #356]	@ (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0a6      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2202      	movs	r2, #2
 8002a24:	4013      	ands	r3, r2
 8002a26:	d015      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d006      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a32:	4b51      	ldr	r3, [pc, #324]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4b50      	ldr	r3, [pc, #320]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a38:	21e0      	movs	r1, #224	@ 0xe0
 8002a3a:	00c9      	lsls	r1, r1, #3
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b4d      	ldr	r3, [pc, #308]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	22f0      	movs	r2, #240	@ 0xf0
 8002a46:	4393      	bics	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d04c      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b44      	ldr	r3, [pc, #272]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	@ 0x80
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d120      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07a      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	049b      	lsls	r3, r3, #18
 8002a86:	4013      	ands	r3, r2
 8002a88:	d114      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06e      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a96:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	029b      	lsls	r3, r3, #10
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e062      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	4b34      	ldr	r3, [pc, #208]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	4013      	ands	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e05b      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab4:	4b30      	ldr	r3, [pc, #192]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	4393      	bics	r3, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7ff f850 	bl	8001b6c <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad0:	e009      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad2:	f7ff f84b 	bl	8001b6c <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	4a27      	ldr	r2, [pc, #156]	@ (8002b7c <HAL_RCC_ClockConfig+0x1a4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e042      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	220c      	movs	r2, #12
 8002aec:	401a      	ands	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1ec      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d211      	bcs.n	8002b2a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b18:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <HAL_RCC_ClockConfig+0x19c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e020      	b.n	8002b6c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a11      	ldr	r2, [pc, #68]	@ (8002b80 <HAL_RCC_ClockConfig+0x1a8>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b48:	f000 f820 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4c:	0001      	movs	r1, r0
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_RCC_ClockConfig+0x1a0>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	220f      	movs	r2, #15
 8002b56:	4013      	ands	r3, r2
 8002b58:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <HAL_RCC_ClockConfig+0x1ac>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	000a      	movs	r2, r1
 8002b5e:	40da      	lsrs	r2, r3
 8002b60:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002b62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f7fe fe83 	bl	8001870 <HAL_InitTick>
  
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b004      	add	sp, #16
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	00001388 	.word	0x00001388
 8002b80:	fffff8ff 	.word	0xfffff8ff
 8002b84:	08004788 	.word	0x08004788
 8002b88:	20000064 	.word	0x20000064

08002b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	220c      	movs	r2, #12
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d046      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0xb8>
 8002bb6:	d848      	bhi.n	8002c4a <HAL_RCC_GetSysClockFreq+0xbe>
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d002      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d003      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x3c>
 8002bc0:	e043      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc2:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bc4:	613b      	str	r3, [r7, #16]
      break;
 8002bc6:	e043      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	0c9b      	lsrs	r3, r3, #18
 8002bcc:	220f      	movs	r2, #15
 8002bce:	4013      	ands	r3, r2
 8002bd0:	4a24      	ldr	r2, [pc, #144]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002bd6:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	220f      	movs	r2, #15
 8002bdc:	4013      	ands	r3, r2
 8002bde:	4a22      	ldr	r2, [pc, #136]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	23c0      	movs	r3, #192	@ 0xc0
 8002be8:	025b      	lsls	r3, r3, #9
 8002bea:	401a      	ands	r2, r3
 8002bec:	2380      	movs	r3, #128	@ 0x80
 8002bee:	025b      	lsls	r3, r3, #9
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	481a      	ldr	r0, [pc, #104]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bf8:	f7fd fa86 	bl	8000108 <__udivsi3>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	001a      	movs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4353      	muls	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e01a      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	23c0      	movs	r3, #192	@ 0xc0
 8002c0c:	025b      	lsls	r3, r3, #9
 8002c0e:	401a      	ands	r2, r3
 8002c10:	23c0      	movs	r3, #192	@ 0xc0
 8002c12:	025b      	lsls	r3, r3, #9
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d109      	bne.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4814      	ldr	r0, [pc, #80]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002c1c:	f7fd fa74 	bl	8000108 <__udivsi3>
 8002c20:	0003      	movs	r3, r0
 8002c22:	001a      	movs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4353      	muls	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	480c      	ldr	r0, [pc, #48]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c30:	f7fd fa6a 	bl	8000108 <__udivsi3>
 8002c34:	0003      	movs	r3, r0
 8002c36:	001a      	movs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4353      	muls	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	613b      	str	r3, [r7, #16]
      break;
 8002c42:	e005      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002c46:	613b      	str	r3, [r7, #16]
      break;
 8002c48:	e002      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c4c:	613b      	str	r3, [r7, #16]
      break;
 8002c4e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c50:	693b      	ldr	r3, [r7, #16]
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b006      	add	sp, #24
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	007a1200 	.word	0x007a1200
 8002c64:	080047a0 	.word	0x080047a0
 8002c68:	080047b0 	.word	0x080047b0
 8002c6c:	02dc6c00 	.word	0x02dc6c00

08002c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b02      	ldr	r3, [pc, #8]	@ (8002c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	20000064 	.word	0x20000064

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002c88:	f7ff fff2 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c8c:	0001      	movs	r1, r0
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	2207      	movs	r2, #7
 8002c96:	4013      	ands	r3, r2
 8002c98:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	40d9      	lsrs	r1, r3
 8002c9e:	000b      	movs	r3, r1
}    
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	08004798 	.word	0x08004798

08002cb0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <HAL_RCC_GetClockConfig+0x4c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_RCC_GetClockConfig+0x4c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	22f0      	movs	r2, #240	@ 0xf0
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002cd8:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <HAL_RCC_GetClockConfig+0x4c>)
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	23e0      	movs	r3, #224	@ 0xe0
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_RCC_GetClockConfig+0x50>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2201      	movs	r2, #1
 8002cec:	401a      	ands	r2, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	601a      	str	r2, [r3, #0]
}
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40022000 	.word	0x40022000

08002d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	025b      	lsls	r3, r3, #9
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d20:	e08e      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d22:	2017      	movs	r0, #23
 8002d24:	183b      	adds	r3, r7, r0
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	055b      	lsls	r3, r3, #21
 8002d32:	4013      	ands	r3, r2
 8002d34:	d110      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b6b      	ldr	r3, [pc, #428]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d3c:	2180      	movs	r1, #128	@ 0x80
 8002d3e:	0549      	lsls	r1, r1, #21
 8002d40:	430a      	orrs	r2, r1
 8002d42:	61da      	str	r2, [r3, #28]
 8002d44:	4b67      	ldr	r3, [pc, #412]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	055b      	lsls	r3, r3, #21
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d52:	183b      	adds	r3, r7, r0
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	4b63      	ldr	r3, [pc, #396]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4013      	ands	r3, r2
 8002d62:	d11a      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d64:	4b60      	ldr	r3, [pc, #384]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b5f      	ldr	r3, [pc, #380]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002d6a:	2180      	movs	r1, #128	@ 0x80
 8002d6c:	0049      	lsls	r1, r1, #1
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d72:	f7fe fefb 	bl	8001b6c <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	e008      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7c:	f7fe fef6 	bl	8001b6c <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0a6      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b56      	ldr	r3, [pc, #344]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d9a:	4b52      	ldr	r3, [pc, #328]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	23c0      	movs	r3, #192	@ 0xc0
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d034      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	23c0      	movs	r3, #192	@ 0xc0
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4013      	ands	r3, r2
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d02c      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dbc:	4b49      	ldr	r3, [pc, #292]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dc8:	6a1a      	ldr	r2, [r3, #32]
 8002dca:	4b46      	ldr	r3, [pc, #280]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dcc:	2180      	movs	r1, #128	@ 0x80
 8002dce:	0249      	lsls	r1, r1, #9
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd4:	4b43      	ldr	r3, [pc, #268]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	4b42      	ldr	r3, [pc, #264]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dda:	4945      	ldr	r1, [pc, #276]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002ddc:	400a      	ands	r2, r1
 8002dde:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002de0:	4b40      	ldr	r3, [pc, #256]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	4013      	ands	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe febd 	bl	8001b6c <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df6:	e009      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe feb8 	bl	8001b6c <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	4a3c      	ldr	r2, [pc, #240]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e067      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e16:	4b33      	ldr	r3, [pc, #204]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4a34      	ldr	r2, [pc, #208]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e26:	430a      	orrs	r2, r1
 8002e28:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e2a:	2317      	movs	r3, #23
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e3a:	492f      	ldr	r1, [pc, #188]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	4013      	ands	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	2203      	movs	r2, #3
 8002e50:	4393      	bics	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b22      	ldr	r3, [pc, #136]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2220      	movs	r2, #32
 8002e82:	4013      	ands	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e86:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	4393      	bics	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	029b      	lsls	r3, r3, #10
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	2280      	movs	r2, #128	@ 0x80
 8002eac:	4393      	bics	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ec6:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	4393      	bics	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b006      	add	sp, #24
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	fffffcff 	.word	0xfffffcff
 8002ef0:	fffeffff 	.word	0xfffeffff
 8002ef4:	00001388 	.word	0x00001388
 8002ef8:	efffffff 	.word	0xefffffff
 8002efc:	fffcffff 	.word	0xfffcffff

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e042      	b.n	8002f98 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223d      	movs	r2, #61	@ 0x3d
 8002f16:	5c9b      	ldrb	r3, [r3, r2]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	223c      	movs	r2, #60	@ 0x3c
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 f839 	bl	8002fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	223d      	movs	r2, #61	@ 0x3d
 8002f32:	2102      	movs	r1, #2
 8002f34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	0019      	movs	r1, r3
 8002f40:	0010      	movs	r0, r2
 8002f42:	f000 f995 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2246      	movs	r2, #70	@ 0x46
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	223e      	movs	r2, #62	@ 0x3e
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	223f      	movs	r2, #63	@ 0x3f
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2240      	movs	r2, #64	@ 0x40
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2241      	movs	r2, #65	@ 0x41
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2242      	movs	r2, #66	@ 0x42
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2243      	movs	r2, #67	@ 0x43
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2244      	movs	r2, #68	@ 0x44
 8002f82:	2101      	movs	r1, #1
 8002f84:	5499      	strb	r1, [r3, r2]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2245      	movs	r2, #69	@ 0x45
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	223d      	movs	r2, #61	@ 0x3d
 8002f92:	2101      	movs	r1, #1
 8002f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	223d      	movs	r2, #61	@ 0x3d
 8002fbc:	5c9b      	ldrb	r3, [r3, r2]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d001      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e03b      	b.n	8003040 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	223d      	movs	r2, #61	@ 0x3d
 8002fcc:	2102      	movs	r1, #2
 8002fce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2101      	movs	r1, #1
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a18      	ldr	r2, [pc, #96]	@ (8003048 <HAL_TIM_Base_Start_IT+0x98>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00f      	beq.n	800300a <HAL_TIM_Base_Start_IT+0x5a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	05db      	lsls	r3, r3, #23
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d009      	beq.n	800300a <HAL_TIM_Base_Start_IT+0x5a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a14      	ldr	r2, [pc, #80]	@ (800304c <HAL_TIM_Base_Start_IT+0x9c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_TIM_Base_Start_IT+0x5a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <HAL_TIM_Base_Start_IT+0xa0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d111      	bne.n	800302e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2207      	movs	r2, #7
 8003012:	4013      	ands	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b06      	cmp	r3, #6
 800301a:	d010      	beq.n	800303e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2101      	movs	r1, #1
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302c:	e007      	b.n	800303e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b004      	add	sp, #16
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40000400 	.word	0x40000400
 8003050:	40014000 	.word	0x40014000

08003054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2202      	movs	r2, #2
 8003070:	4013      	ands	r3, r2
 8003072:	d021      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2202      	movs	r2, #2
 8003078:	4013      	ands	r3, r2
 800307a:	d01d      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2203      	movs	r2, #3
 8003082:	4252      	negs	r2, r2
 8003084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2203      	movs	r2, #3
 8003094:	4013      	ands	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 f8d0 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 80030a0:	e007      	b.n	80030b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 f8c3 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 f8cf 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2204      	movs	r2, #4
 80030bc:	4013      	ands	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
 80030c6:	d01e      	beq.n	8003106 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2205      	movs	r2, #5
 80030ce:	4252      	negs	r2, r2
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	23c0      	movs	r3, #192	@ 0xc0
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4013      	ands	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 f8a9 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 80030ee:	e007      	b.n	8003100 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 f89c 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f8a8 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2208      	movs	r2, #8
 800310a:	4013      	ands	r3, r2
 800310c:	d021      	beq.n	8003152 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2208      	movs	r2, #8
 8003112:	4013      	ands	r3, r2
 8003114:	d01d      	beq.n	8003152 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2209      	movs	r2, #9
 800311c:	4252      	negs	r2, r2
 800311e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2204      	movs	r2, #4
 8003124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2203      	movs	r2, #3
 800312e:	4013      	ands	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0018      	movs	r0, r3
 8003136:	f000 f883 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800313a:	e007      	b.n	800314c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 f876 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	0018      	movs	r0, r3
 8003148:	f000 f882 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2210      	movs	r2, #16
 8003156:	4013      	ands	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2210      	movs	r2, #16
 800315e:	4013      	ands	r3, r2
 8003160:	d01e      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2211      	movs	r2, #17
 8003168:	4252      	negs	r2, r2
 800316a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2208      	movs	r2, #8
 8003170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	23c0      	movs	r3, #192	@ 0xc0
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4013      	ands	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f85c 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 8003188:	e007      	b.n	800319a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f84f 	bl	8003230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0018      	movs	r0, r3
 8003196:	f000 f85b 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	d00c      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	4013      	ands	r3, r2
 80031ae:	d008      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4252      	negs	r2, r2
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fd fdf1 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2280      	movs	r2, #128	@ 0x80
 80031c6:	4013      	ands	r3, r2
 80031c8:	d00c      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2280      	movs	r2, #128	@ 0x80
 80031ce:	4013      	ands	r3, r2
 80031d0:	d008      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2281      	movs	r2, #129	@ 0x81
 80031d8:	4252      	negs	r2, r2
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0018      	movs	r0, r3
 80031e0:	f000 f8dc 	bl	800339c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2240      	movs	r2, #64	@ 0x40
 80031e8:	4013      	ands	r3, r2
 80031ea:	d00c      	beq.n	8003206 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2240      	movs	r2, #64	@ 0x40
 80031f0:	4013      	ands	r3, r2
 80031f2:	d008      	beq.n	8003206 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2241      	movs	r2, #65	@ 0x41
 80031fa:	4252      	negs	r2, r2
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	0018      	movs	r0, r3
 8003202:	f000 f82d 	bl	8003260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2220      	movs	r2, #32
 800320a:	4013      	ands	r3, r2
 800320c:	d00c      	beq.n	8003228 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	4013      	ands	r3, r2
 8003214:	d008      	beq.n	8003228 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2221      	movs	r2, #33	@ 0x21
 800321c:	4252      	negs	r2, r2
 800321e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	0018      	movs	r0, r3
 8003224:	f000 f8b2 	bl	800338c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b004      	add	sp, #16
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003268:	46c0      	nop			@ (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3b      	ldr	r2, [pc, #236]	@ (8003370 <TIM_Base_SetConfig+0x100>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d008      	beq.n	800329a <TIM_Base_SetConfig+0x2a>
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	05db      	lsls	r3, r3, #23
 800328e:	429a      	cmp	r2, r3
 8003290:	d003      	beq.n	800329a <TIM_Base_SetConfig+0x2a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a37      	ldr	r2, [pc, #220]	@ (8003374 <TIM_Base_SetConfig+0x104>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2270      	movs	r2, #112	@ 0x70
 800329e:	4393      	bics	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a30      	ldr	r2, [pc, #192]	@ (8003370 <TIM_Base_SetConfig+0x100>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d018      	beq.n	80032e6 <TIM_Base_SetConfig+0x76>
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d013      	beq.n	80032e6 <TIM_Base_SetConfig+0x76>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003374 <TIM_Base_SetConfig+0x104>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <TIM_Base_SetConfig+0x76>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003378 <TIM_Base_SetConfig+0x108>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <TIM_Base_SetConfig+0x76>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2a      	ldr	r2, [pc, #168]	@ (800337c <TIM_Base_SetConfig+0x10c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0x76>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a29      	ldr	r2, [pc, #164]	@ (8003380 <TIM_Base_SetConfig+0x110>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0x76>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a28      	ldr	r2, [pc, #160]	@ (8003384 <TIM_Base_SetConfig+0x114>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a27      	ldr	r2, [pc, #156]	@ (8003388 <TIM_Base_SetConfig+0x118>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	4393      	bics	r3, r2
 80032fe:	001a      	movs	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <TIM_Base_SetConfig+0x100>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00b      	beq.n	800333e <TIM_Base_SetConfig+0xce>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a14      	ldr	r2, [pc, #80]	@ (800337c <TIM_Base_SetConfig+0x10c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <TIM_Base_SetConfig+0xce>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a13      	ldr	r2, [pc, #76]	@ (8003380 <TIM_Base_SetConfig+0x110>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d003      	beq.n	800333e <TIM_Base_SetConfig+0xce>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a12      	ldr	r2, [pc, #72]	@ (8003384 <TIM_Base_SetConfig+0x114>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d103      	bne.n	8003346 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2201      	movs	r2, #1
 8003352:	4013      	ands	r3, r2
 8003354:	2b01      	cmp	r3, #1
 8003356:	d106      	bne.n	8003366 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2201      	movs	r2, #1
 800335e:	4393      	bics	r3, r2
 8003360:	001a      	movs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	611a      	str	r2, [r3, #16]
  }
}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b004      	add	sp, #16
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	40012c00 	.word	0x40012c00
 8003374:	40000400 	.word	0x40000400
 8003378:	40002000 	.word	0x40002000
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800
 8003388:	fffffcff 	.word	0xfffffcff

0800338c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a4:	46c0      	nop			@ (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e044      	b.n	8003448 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2278      	movs	r2, #120	@ 0x78
 80033ca:	2100      	movs	r1, #0
 80033cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7fe fb2d 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2224      	movs	r2, #36	@ 0x24
 80033da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	438a      	bics	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 fb3c 	bl	8003a74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f9b0 	bl	8003764 <UART_SetConfig>
 8003404:	0003      	movs	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e01c      	b.n	8003448 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	490d      	ldr	r1, [pc, #52]	@ (8003450 <HAL_UART_Init+0xa4>)
 800341a:	400a      	ands	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	212a      	movs	r1, #42	@ 0x2a
 800342a:	438a      	bics	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2101      	movs	r1, #1
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fbcb 	bl	8003bdc <UART_CheckIdleState>
 8003446:	0003      	movs	r3, r0
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}
 8003450:	ffffb7ff 	.word	0xffffb7ff

08003454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	1dbb      	adds	r3, r7, #6
 8003462:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003468:	2b20      	cmp	r3, #32
 800346a:	d000      	beq.n	800346e <HAL_UART_Transmit+0x1a>
 800346c:	e08c      	b.n	8003588 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_UART_Transmit+0x28>
 8003474:	1dbb      	adds	r3, r7, #6
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e084      	b.n	800358a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	2380      	movs	r3, #128	@ 0x80
 8003486:	015b      	lsls	r3, r3, #5
 8003488:	429a      	cmp	r2, r3
 800348a:	d109      	bne.n	80034a0 <HAL_UART_Transmit+0x4c>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2201      	movs	r2, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d001      	beq.n	80034a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e074      	b.n	800358a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2284      	movs	r2, #132	@ 0x84
 80034a4:	2100      	movs	r1, #0
 80034a6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2221      	movs	r2, #33	@ 0x21
 80034ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ae:	f7fe fb5d 	bl	8001b6c <HAL_GetTick>
 80034b2:	0003      	movs	r3, r0
 80034b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1dba      	adds	r2, r7, #6
 80034ba:	2150      	movs	r1, #80	@ 0x50
 80034bc:	8812      	ldrh	r2, [r2, #0]
 80034be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1dba      	adds	r2, r7, #6
 80034c4:	2152      	movs	r1, #82	@ 0x52
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	015b      	lsls	r3, r3, #5
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d108      	bne.n	80034e8 <HAL_UART_Transmit+0x94>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	e003      	b.n	80034f0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f0:	e02f      	b.n	8003552 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	0013      	movs	r3, r2
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	@ 0x80
 8003500:	f000 fc14 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003504:	1e03      	subs	r3, r0, #0
 8003506:	d004      	beq.n	8003512 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e03b      	b.n	800358a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	881a      	ldrh	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	05d2      	lsls	r2, r2, #23
 8003522:	0dd2      	lsrs	r2, r2, #23
 8003524:	b292      	uxth	r2, r2
 8003526:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	3302      	adds	r3, #2
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e007      	b.n	8003540 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2252      	movs	r2, #82	@ 0x52
 8003544:	5a9b      	ldrh	r3, [r3, r2]
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b299      	uxth	r1, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2252      	movs	r2, #82	@ 0x52
 8003550:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2252      	movs	r2, #82	@ 0x52
 8003556:	5a9b      	ldrh	r3, [r3, r2]
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1c9      	bne.n	80034f2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	0013      	movs	r3, r2
 8003568:	2200      	movs	r2, #0
 800356a:	2140      	movs	r1, #64	@ 0x40
 800356c:	f000 fbde 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d004      	beq.n	800357e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e005      	b.n	800358a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	e000      	b.n	800358a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
  }
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b008      	add	sp, #32
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	@ 0x28
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	1dbb      	adds	r3, r7, #6
 80035a2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2280      	movs	r2, #128	@ 0x80
 80035a8:	589b      	ldr	r3, [r3, r2]
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d000      	beq.n	80035b0 <HAL_UART_Receive+0x1c>
 80035ae:	e0d1      	b.n	8003754 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_UART_Receive+0x2a>
 80035b6:	1dbb      	adds	r3, r7, #6
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0c9      	b.n	8003756 <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	015b      	lsls	r3, r3, #5
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d109      	bne.n	80035e2 <HAL_UART_Receive+0x4e>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2201      	movs	r2, #1
 80035da:	4013      	ands	r3, r2
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0b9      	b.n	8003756 <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2284      	movs	r2, #132	@ 0x84
 80035e6:	2100      	movs	r1, #0
 80035e8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2280      	movs	r2, #128	@ 0x80
 80035ee:	2122      	movs	r1, #34	@ 0x22
 80035f0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f8:	f7fe fab8 	bl	8001b6c <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1dba      	adds	r2, r7, #6
 8003604:	2158      	movs	r1, #88	@ 0x58
 8003606:	8812      	ldrh	r2, [r2, #0]
 8003608:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1dba      	adds	r2, r7, #6
 800360e:	215a      	movs	r1, #90	@ 0x5a
 8003610:	8812      	ldrh	r2, [r2, #0]
 8003612:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	2380      	movs	r3, #128	@ 0x80
 800361a:	015b      	lsls	r3, r3, #5
 800361c:	429a      	cmp	r2, r3
 800361e:	d10d      	bne.n	800363c <HAL_UART_Receive+0xa8>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <HAL_UART_Receive+0x9e>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	225c      	movs	r2, #92	@ 0x5c
 800362c:	494c      	ldr	r1, [pc, #304]	@ (8003760 <HAL_UART_Receive+0x1cc>)
 800362e:	5299      	strh	r1, [r3, r2]
 8003630:	e02e      	b.n	8003690 <HAL_UART_Receive+0xfc>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	225c      	movs	r2, #92	@ 0x5c
 8003636:	21ff      	movs	r1, #255	@ 0xff
 8003638:	5299      	strh	r1, [r3, r2]
 800363a:	e029      	b.n	8003690 <HAL_UART_Receive+0xfc>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_UART_Receive+0xcc>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_UART_Receive+0xc2>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	225c      	movs	r2, #92	@ 0x5c
 8003650:	21ff      	movs	r1, #255	@ 0xff
 8003652:	5299      	strh	r1, [r3, r2]
 8003654:	e01c      	b.n	8003690 <HAL_UART_Receive+0xfc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	225c      	movs	r2, #92	@ 0x5c
 800365a:	217f      	movs	r1, #127	@ 0x7f
 800365c:	5299      	strh	r1, [r3, r2]
 800365e:	e017      	b.n	8003690 <HAL_UART_Receive+0xfc>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	055b      	lsls	r3, r3, #21
 8003668:	429a      	cmp	r2, r3
 800366a:	d10d      	bne.n	8003688 <HAL_UART_Receive+0xf4>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d104      	bne.n	800367e <HAL_UART_Receive+0xea>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	225c      	movs	r2, #92	@ 0x5c
 8003678:	217f      	movs	r1, #127	@ 0x7f
 800367a:	5299      	strh	r1, [r3, r2]
 800367c:	e008      	b.n	8003690 <HAL_UART_Receive+0xfc>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	225c      	movs	r2, #92	@ 0x5c
 8003682:	213f      	movs	r1, #63	@ 0x3f
 8003684:	5299      	strh	r1, [r3, r2]
 8003686:	e003      	b.n	8003690 <HAL_UART_Receive+0xfc>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	225c      	movs	r2, #92	@ 0x5c
 800368c:	2100      	movs	r1, #0
 800368e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003690:	2312      	movs	r3, #18
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	215c      	movs	r1, #92	@ 0x5c
 8003698:	5a52      	ldrh	r2, [r2, r1]
 800369a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	2380      	movs	r3, #128	@ 0x80
 80036a2:	015b      	lsls	r3, r3, #5
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d108      	bne.n	80036ba <HAL_UART_Receive+0x126>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e003      	b.n	80036c2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80036c2:	e03b      	b.n	800373c <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	0013      	movs	r3, r2
 80036ce:	2200      	movs	r2, #0
 80036d0:	2120      	movs	r1, #32
 80036d2:	f000 fb2b 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2280      	movs	r2, #128	@ 0x80
 80036de:	2120      	movs	r1, #32
 80036e0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e037      	b.n	8003756 <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10e      	bne.n	800370a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2212      	movs	r2, #18
 80036f6:	18ba      	adds	r2, r7, r2
 80036f8:	8812      	ldrh	r2, [r2, #0]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3302      	adds	r3, #2
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e00f      	b.n	800372a <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003710:	b29b      	uxth	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2212      	movs	r2, #18
 8003716:	18ba      	adds	r2, r7, r2
 8003718:	8812      	ldrh	r2, [r2, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	4013      	ands	r3, r2
 800371e:	b2da      	uxtb	r2, r3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	225a      	movs	r2, #90	@ 0x5a
 800372e:	5a9b      	ldrh	r3, [r3, r2]
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b299      	uxth	r1, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	225a      	movs	r2, #90	@ 0x5a
 800373a:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	225a      	movs	r2, #90	@ 0x5a
 8003740:	5a9b      	ldrh	r3, [r3, r2]
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1bd      	bne.n	80036c4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2280      	movs	r2, #128	@ 0x80
 800374c:	2120      	movs	r1, #32
 800374e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b008      	add	sp, #32
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	000001ff 	.word	0x000001ff

08003764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800376c:	231e      	movs	r3, #30
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4aaf      	ldr	r2, [pc, #700]	@ (8003a50 <UART_SetConfig+0x2ec>)
 8003794:	4013      	ands	r3, r2
 8003796:	0019      	movs	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4aaa      	ldr	r2, [pc, #680]	@ (8003a54 <UART_SetConfig+0x2f0>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4aa1      	ldr	r2, [pc, #644]	@ (8003a58 <UART_SetConfig+0x2f4>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	0019      	movs	r1, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a9d      	ldr	r2, [pc, #628]	@ (8003a5c <UART_SetConfig+0x2f8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d127      	bne.n	800383a <UART_SetConfig+0xd6>
 80037ea:	4b9d      	ldr	r3, [pc, #628]	@ (8003a60 <UART_SetConfig+0x2fc>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	2203      	movs	r2, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d00d      	beq.n	8003812 <UART_SetConfig+0xae>
 80037f6:	d81b      	bhi.n	8003830 <UART_SetConfig+0xcc>
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d014      	beq.n	8003826 <UART_SetConfig+0xc2>
 80037fc:	d818      	bhi.n	8003830 <UART_SetConfig+0xcc>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <UART_SetConfig+0xa4>
 8003802:	2b01      	cmp	r3, #1
 8003804:	d00a      	beq.n	800381c <UART_SetConfig+0xb8>
 8003806:	e013      	b.n	8003830 <UART_SetConfig+0xcc>
 8003808:	231f      	movs	r3, #31
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e065      	b.n	80038de <UART_SetConfig+0x17a>
 8003812:	231f      	movs	r3, #31
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2202      	movs	r2, #2
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e060      	b.n	80038de <UART_SetConfig+0x17a>
 800381c:	231f      	movs	r3, #31
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2204      	movs	r2, #4
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e05b      	b.n	80038de <UART_SetConfig+0x17a>
 8003826:	231f      	movs	r3, #31
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2208      	movs	r2, #8
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e056      	b.n	80038de <UART_SetConfig+0x17a>
 8003830:	231f      	movs	r3, #31
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2210      	movs	r2, #16
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e051      	b.n	80038de <UART_SetConfig+0x17a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a89      	ldr	r2, [pc, #548]	@ (8003a64 <UART_SetConfig+0x300>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d134      	bne.n	80038ae <UART_SetConfig+0x14a>
 8003844:	4b86      	ldr	r3, [pc, #536]	@ (8003a60 <UART_SetConfig+0x2fc>)
 8003846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003848:	23c0      	movs	r3, #192	@ 0xc0
 800384a:	029b      	lsls	r3, r3, #10
 800384c:	4013      	ands	r3, r2
 800384e:	22c0      	movs	r2, #192	@ 0xc0
 8003850:	0292      	lsls	r2, r2, #10
 8003852:	4293      	cmp	r3, r2
 8003854:	d017      	beq.n	8003886 <UART_SetConfig+0x122>
 8003856:	22c0      	movs	r2, #192	@ 0xc0
 8003858:	0292      	lsls	r2, r2, #10
 800385a:	4293      	cmp	r3, r2
 800385c:	d822      	bhi.n	80038a4 <UART_SetConfig+0x140>
 800385e:	2280      	movs	r2, #128	@ 0x80
 8003860:	0292      	lsls	r2, r2, #10
 8003862:	4293      	cmp	r3, r2
 8003864:	d019      	beq.n	800389a <UART_SetConfig+0x136>
 8003866:	2280      	movs	r2, #128	@ 0x80
 8003868:	0292      	lsls	r2, r2, #10
 800386a:	4293      	cmp	r3, r2
 800386c:	d81a      	bhi.n	80038a4 <UART_SetConfig+0x140>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <UART_SetConfig+0x118>
 8003872:	2280      	movs	r2, #128	@ 0x80
 8003874:	0252      	lsls	r2, r2, #9
 8003876:	4293      	cmp	r3, r2
 8003878:	d00a      	beq.n	8003890 <UART_SetConfig+0x12c>
 800387a:	e013      	b.n	80038a4 <UART_SetConfig+0x140>
 800387c:	231f      	movs	r3, #31
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	e02b      	b.n	80038de <UART_SetConfig+0x17a>
 8003886:	231f      	movs	r3, #31
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2202      	movs	r2, #2
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	e026      	b.n	80038de <UART_SetConfig+0x17a>
 8003890:	231f      	movs	r3, #31
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2204      	movs	r2, #4
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e021      	b.n	80038de <UART_SetConfig+0x17a>
 800389a:	231f      	movs	r3, #31
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2208      	movs	r2, #8
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e01c      	b.n	80038de <UART_SetConfig+0x17a>
 80038a4:	231f      	movs	r3, #31
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2210      	movs	r2, #16
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e017      	b.n	80038de <UART_SetConfig+0x17a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a68 <UART_SetConfig+0x304>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d104      	bne.n	80038c2 <UART_SetConfig+0x15e>
 80038b8:	231f      	movs	r3, #31
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e00d      	b.n	80038de <UART_SetConfig+0x17a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a69      	ldr	r2, [pc, #420]	@ (8003a6c <UART_SetConfig+0x308>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d104      	bne.n	80038d6 <UART_SetConfig+0x172>
 80038cc:	231f      	movs	r3, #31
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e003      	b.n	80038de <UART_SetConfig+0x17a>
 80038d6:	231f      	movs	r3, #31
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2210      	movs	r2, #16
 80038dc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d15c      	bne.n	80039a4 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80038ea:	231f      	movs	r3, #31
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d015      	beq.n	8003920 <UART_SetConfig+0x1bc>
 80038f4:	dc18      	bgt.n	8003928 <UART_SetConfig+0x1c4>
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d00d      	beq.n	8003916 <UART_SetConfig+0x1b2>
 80038fa:	dc15      	bgt.n	8003928 <UART_SetConfig+0x1c4>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <UART_SetConfig+0x1a2>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d005      	beq.n	8003910 <UART_SetConfig+0x1ac>
 8003904:	e010      	b.n	8003928 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003906:	f7ff f9bd 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 800390a:	0003      	movs	r3, r0
 800390c:	61bb      	str	r3, [r7, #24]
        break;
 800390e:	e012      	b.n	8003936 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003910:	4b57      	ldr	r3, [pc, #348]	@ (8003a70 <UART_SetConfig+0x30c>)
 8003912:	61bb      	str	r3, [r7, #24]
        break;
 8003914:	e00f      	b.n	8003936 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7ff f939 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 800391a:	0003      	movs	r3, r0
 800391c:	61bb      	str	r3, [r7, #24]
        break;
 800391e:	e00a      	b.n	8003936 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003920:	2380      	movs	r3, #128	@ 0x80
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	61bb      	str	r3, [r7, #24]
        break;
 8003926:	e006      	b.n	8003936 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800392c:	231e      	movs	r3, #30
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
        break;
 8003934:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d100      	bne.n	800393e <UART_SetConfig+0x1da>
 800393c:	e07a      	b.n	8003a34 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	005a      	lsls	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	18d2      	adds	r2, r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	0019      	movs	r1, r3
 8003950:	0010      	movs	r0, r2
 8003952:	f7fc fbd9 	bl	8000108 <__udivsi3>
 8003956:	0003      	movs	r3, r0
 8003958:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d91c      	bls.n	800399a <UART_SetConfig+0x236>
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	2380      	movs	r3, #128	@ 0x80
 8003964:	025b      	lsls	r3, r3, #9
 8003966:	429a      	cmp	r2, r3
 8003968:	d217      	bcs.n	800399a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	b29a      	uxth	r2, r3
 800396e:	200e      	movs	r0, #14
 8003970:	183b      	adds	r3, r7, r0
 8003972:	210f      	movs	r1, #15
 8003974:	438a      	bics	r2, r1
 8003976:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	b29b      	uxth	r3, r3
 800397e:	2207      	movs	r2, #7
 8003980:	4013      	ands	r3, r2
 8003982:	b299      	uxth	r1, r3
 8003984:	183b      	adds	r3, r7, r0
 8003986:	183a      	adds	r2, r7, r0
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	183a      	adds	r2, r7, r0
 8003994:	8812      	ldrh	r2, [r2, #0]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e04c      	b.n	8003a34 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800399a:	231e      	movs	r3, #30
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e047      	b.n	8003a34 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039a4:	231f      	movs	r3, #31
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d015      	beq.n	80039da <UART_SetConfig+0x276>
 80039ae:	dc18      	bgt.n	80039e2 <UART_SetConfig+0x27e>
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d00d      	beq.n	80039d0 <UART_SetConfig+0x26c>
 80039b4:	dc15      	bgt.n	80039e2 <UART_SetConfig+0x27e>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <UART_SetConfig+0x25c>
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d005      	beq.n	80039ca <UART_SetConfig+0x266>
 80039be:	e010      	b.n	80039e2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7ff f960 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80039c4:	0003      	movs	r3, r0
 80039c6:	61bb      	str	r3, [r7, #24]
        break;
 80039c8:	e012      	b.n	80039f0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ca:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <UART_SetConfig+0x30c>)
 80039cc:	61bb      	str	r3, [r7, #24]
        break;
 80039ce:	e00f      	b.n	80039f0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d0:	f7ff f8dc 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 80039d4:	0003      	movs	r3, r0
 80039d6:	61bb      	str	r3, [r7, #24]
        break;
 80039d8:	e00a      	b.n	80039f0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	61bb      	str	r3, [r7, #24]
        break;
 80039e0:	e006      	b.n	80039f0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039e6:	231e      	movs	r3, #30
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
        break;
 80039ee:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01e      	beq.n	8003a34 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	085a      	lsrs	r2, r3, #1
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	18d2      	adds	r2, r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	0019      	movs	r1, r3
 8003a06:	0010      	movs	r0, r2
 8003a08:	f7fc fb7e 	bl	8000108 <__udivsi3>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	d90a      	bls.n	8003a2c <UART_SetConfig+0x2c8>
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	025b      	lsls	r3, r3, #9
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d205      	bcs.n	8003a2c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	e003      	b.n	8003a34 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a2c:	231e      	movs	r3, #30
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a40:	231e      	movs	r3, #30
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	781b      	ldrb	r3, [r3, #0]
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b008      	add	sp, #32
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	efff69f3 	.word	0xefff69f3
 8003a54:	ffffcfff 	.word	0xffffcfff
 8003a58:	fffff4ff 	.word	0xfffff4ff
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40004400 	.word	0x40004400
 8003a68:	40004800 	.word	0x40004800
 8003a6c:	40004c00 	.word	0x40004c00
 8003a70:	007a1200 	.word	0x007a1200

08003a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	2208      	movs	r2, #8
 8003a82:	4013      	ands	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb8 <UART_AdvFeatureConfig+0x144>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a43      	ldr	r2, [pc, #268]	@ (8003bbc <UART_AdvFeatureConfig+0x148>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc0 <UART_AdvFeatureConfig+0x14c>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a34      	ldr	r2, [pc, #208]	@ (8003bc4 <UART_AdvFeatureConfig+0x150>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	2210      	movs	r2, #16
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <UART_AdvFeatureConfig+0x154>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4a25      	ldr	r2, [pc, #148]	@ (8003bcc <UART_AdvFeatureConfig+0x158>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	2240      	movs	r2, #64	@ 0x40
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d01d      	beq.n	8003b8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd0 <UART_AdvFeatureConfig+0x15c>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	035b      	lsls	r3, r3, #13
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d10b      	bne.n	8003b8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	@ (8003bd4 <UART_AdvFeatureConfig+0x160>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	0019      	movs	r1, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	2280      	movs	r2, #128	@ 0x80
 8003b94:	4013      	ands	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd8 <UART_AdvFeatureConfig+0x164>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	ffff7fff 	.word	0xffff7fff
 8003bbc:	fffdffff 	.word	0xfffdffff
 8003bc0:	fffeffff 	.word	0xfffeffff
 8003bc4:	fffbffff 	.word	0xfffbffff
 8003bc8:	ffffefff 	.word	0xffffefff
 8003bcc:	ffffdfff 	.word	0xffffdfff
 8003bd0:	ffefffff 	.word	0xffefffff
 8003bd4:	ff9fffff 	.word	0xff9fffff
 8003bd8:	fff7ffff 	.word	0xfff7ffff

08003bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b092      	sub	sp, #72	@ 0x48
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2284      	movs	r2, #132	@ 0x84
 8003be8:	2100      	movs	r1, #0
 8003bea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bec:	f7fd ffbe 	bl	8001b6c <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d12c      	bne.n	8003c5c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c04:	2280      	movs	r2, #128	@ 0x80
 8003c06:	0391      	lsls	r1, r2, #14
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4a46      	ldr	r2, [pc, #280]	@ (8003d24 <UART_CheckIdleState+0x148>)
 8003c0c:	9200      	str	r2, [sp, #0]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f000 f88c 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003c14:	1e03      	subs	r3, r0, #0
 8003c16:	d021      	beq.n	8003c5c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c18:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c22:	2301      	movs	r3, #1
 8003c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	f383 8810 	msr	PRIMASK, r3
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2180      	movs	r1, #128	@ 0x80
 8003c3a:	438a      	bics	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2278      	movs	r2, #120	@ 0x78
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e05f      	b.n	8003d1c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2204      	movs	r2, #4
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d146      	bne.n	8003cf8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6c:	2280      	movs	r2, #128	@ 0x80
 8003c6e:	03d1      	lsls	r1, r2, #15
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4a2c      	ldr	r2, [pc, #176]	@ (8003d24 <UART_CheckIdleState+0x148>)
 8003c74:	9200      	str	r2, [sp, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f000 f858 	bl	8003d2c <UART_WaitOnFlagUntilTimeout>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d03b      	beq.n	8003cf8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c80:	f3ef 8310 	mrs	r3, PRIMASK
 8003c84:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c86:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f383 8810 	msr	PRIMASK, r3
}
 8003c94:	46c0      	nop			@ (mov r8, r8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4921      	ldr	r1, [pc, #132]	@ (8003d28 <UART_CheckIdleState+0x14c>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f383 8810 	msr	PRIMASK, r3
}
 8003cb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cb8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f383 8810 	msr	PRIMASK, r3
}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f383 8810 	msr	PRIMASK, r3
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2280      	movs	r2, #128	@ 0x80
 8003ce8:	2120      	movs	r1, #32
 8003cea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2278      	movs	r2, #120	@ 0x78
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e011      	b.n	8003d1c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2280      	movs	r2, #128	@ 0x80
 8003d02:	2120      	movs	r1, #32
 8003d04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2278      	movs	r2, #120	@ 0x78
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b010      	add	sp, #64	@ 0x40
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	01ffffff 	.word	0x01ffffff
 8003d28:	fffffedf 	.word	0xfffffedf

08003d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	1dfb      	adds	r3, r7, #7
 8003d3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3c:	e051      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	3301      	adds	r3, #1
 8003d42:	d04e      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d44:	f7fd ff12 	bl	8001b6c <HAL_GetTick>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d302      	bcc.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e051      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2204      	movs	r2, #4
 8003d66:	4013      	ands	r3, r2
 8003d68:	d03b      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b80      	cmp	r3, #128	@ 0x80
 8003d6e:	d038      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b40      	cmp	r3, #64	@ 0x40
 8003d74:	d035      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d111      	bne.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 f83c 	bl	8003e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2284      	movs	r2, #132	@ 0x84
 8003d98:	2108      	movs	r1, #8
 8003d9a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2278      	movs	r2, #120	@ 0x78
 8003da0:	2100      	movs	r1, #0
 8003da2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e02c      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	2380      	movs	r3, #128	@ 0x80
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	401a      	ands	r2, r3
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d112      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2280      	movs	r2, #128	@ 0x80
 8003dc2:	0112      	lsls	r2, r2, #4
 8003dc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f000 f81f 	bl	8003e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2284      	movs	r2, #132	@ 0x84
 8003dd2:	2120      	movs	r1, #32
 8003dd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2278      	movs	r2, #120	@ 0x78
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e00f      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	425a      	negs	r2, r3
 8003df2:	4153      	adcs	r3, r2
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	001a      	movs	r2, r3
 8003df8:	1dfb      	adds	r3, r7, #7
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d09e      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08e      	sub	sp, #56	@ 0x38
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e14:	f3ef 8310 	mrs	r3, PRIMASK
 8003e18:	617b      	str	r3, [r7, #20]
  return(result);
 8003e1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4926      	ldr	r1, [pc, #152]	@ (8003ed0 <UART_EndRxTransfer+0xc4>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f383 8810 	msr	PRIMASK, r3
}
 8003e44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e46:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4a:	623b      	str	r3, [r7, #32]
  return(result);
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e50:	2301      	movs	r3, #1
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	438a      	bics	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e72:	f383 8810 	msr	PRIMASK, r3
}
 8003e76:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d118      	bne.n	8003eb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e80:	f3ef 8310 	mrs	r3, PRIMASK
 8003e84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			@ (mov r8, r8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2110      	movs	r1, #16
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2280      	movs	r2, #128	@ 0x80
 8003eb6:	2120      	movs	r1, #32
 8003eb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b00e      	add	sp, #56	@ 0x38
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	fffffedf 	.word	0xfffffedf

08003ed4 <memset>:
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	1882      	adds	r2, r0, r2
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <memset+0xa>
 8003edc:	4770      	bx	lr
 8003ede:	7019      	strb	r1, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	e7f9      	b.n	8003ed8 <memset+0x4>

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	4c0c      	ldr	r4, [pc, #48]	@ (8003f1c <__libc_init_array+0x38>)
 8003eea:	4d0d      	ldr	r5, [pc, #52]	@ (8003f20 <__libc_init_array+0x3c>)
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	42a6      	cmp	r6, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	2600      	movs	r6, #0
 8003ef6:	f000 f823 	bl	8003f40 <_init>
 8003efa:	4c0a      	ldr	r4, [pc, #40]	@ (8003f24 <__libc_init_array+0x40>)
 8003efc:	4d0a      	ldr	r5, [pc, #40]	@ (8003f28 <__libc_init_array+0x44>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	42a6      	cmp	r6, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	00b3      	lsls	r3, r6, #2
 8003f0a:	58eb      	ldr	r3, [r5, r3]
 8003f0c:	4798      	blx	r3
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	00b3      	lsls	r3, r6, #2
 8003f14:	58eb      	ldr	r3, [r5, r3]
 8003f16:	4798      	blx	r3
 8003f18:	3601      	adds	r6, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	080047c0 	.word	0x080047c0
 8003f20:	080047c0 	.word	0x080047c0
 8003f24:	080047c4 	.word	0x080047c4
 8003f28:	080047c0 	.word	0x080047c0

08003f2c <memcpy>:
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d100      	bne.n	8003f36 <memcpy+0xa>
 8003f34:	bd10      	pop	{r4, pc}
 8003f36:	5ccc      	ldrb	r4, [r1, r3]
 8003f38:	54c4      	strb	r4, [r0, r3]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	e7f8      	b.n	8003f30 <memcpy+0x4>
	...

08003f40 <_init>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr

08003f4c <_fini>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr
