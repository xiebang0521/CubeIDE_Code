
RFID_IIC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08003e4c  08003e4c  00004e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800469c  0800469c  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  0800469c  0800469c  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800469c  0800469c  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046a0  080046a0  000056a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080046a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000070  08004714  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004714  000062a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114a1  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a81  00000000  00000000  00017539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00019fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce4  00000000  00000000  0001b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b207  00000000  00000000  0001bd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163ce  00000000  00000000  00036f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a745  00000000  00000000  0004d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7a1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  000e7a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000eb510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e34 	.word	0x08003e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003e34 	.word	0x08003e34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <keyExpansion>:
 * @param key 秘钥
 * @param roundkey 秘钥扩展后的秘钥
 * @return null
 */
static void keyExpansion(const uint8_t *key, uint8_t *roundkey)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
    uint8_t temp[4];
    uint8_t i, j, k;

    // 第一轮的秘钥就是key
    for (i = 0; i < NK; i++)
 800022a:	2317      	movs	r3, #23
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e03d      	b.n	80002b0 <keyExpansion+0x90>
    {
        roundkey[(4 * i) + 0] = key[(4 * i) + 0];
 8000234:	2017      	movs	r0, #23
 8000236:	183b      	adds	r3, r7, r0
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	001a      	movs	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	189a      	adds	r2, r3, r2
 8000242:	183b      	adds	r3, r7, r0
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	0019      	movs	r1, r3
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	185b      	adds	r3, r3, r1
 800024e:	7812      	ldrb	r2, [r2, #0]
 8000250:	701a      	strb	r2, [r3, #0]
        roundkey[(4 * i) + 1] = key[(4 * i) + 1];
 8000252:	183b      	adds	r3, r7, r0
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	3301      	adds	r3, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	18d2      	adds	r2, r2, r3
 800025e:	183b      	adds	r3, r7, r0
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	3301      	adds	r3, #1
 8000266:	6839      	ldr	r1, [r7, #0]
 8000268:	18cb      	adds	r3, r1, r3
 800026a:	7812      	ldrb	r2, [r2, #0]
 800026c:	701a      	strb	r2, [r3, #0]
        roundkey[(4 * i) + 2] = key[(4 * i) + 2];
 800026e:	183b      	adds	r3, r7, r0
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	3302      	adds	r3, #2
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	18d2      	adds	r2, r2, r3
 800027a:	183b      	adds	r3, r7, r0
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	3302      	adds	r3, #2
 8000282:	6839      	ldr	r1, [r7, #0]
 8000284:	18cb      	adds	r3, r1, r3
 8000286:	7812      	ldrb	r2, [r2, #0]
 8000288:	701a      	strb	r2, [r3, #0]
        roundkey[(4 * i) + 3] = key[(4 * i) + 3];
 800028a:	183b      	adds	r3, r7, r0
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	3303      	adds	r3, #3
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	18d2      	adds	r2, r2, r3
 8000296:	183b      	adds	r3, r7, r0
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	3303      	adds	r3, #3
 800029e:	6839      	ldr	r1, [r7, #0]
 80002a0:	18cb      	adds	r3, r1, r3
 80002a2:	7812      	ldrb	r2, [r2, #0]
 80002a4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NK; i++)
 80002a6:	183b      	adds	r3, r7, r0
 80002a8:	781a      	ldrb	r2, [r3, #0]
 80002aa:	183b      	adds	r3, r7, r0
 80002ac:	3201      	adds	r2, #1
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	2217      	movs	r2, #23
 80002b2:	18bb      	adds	r3, r7, r2
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b03      	cmp	r3, #3
 80002b8:	d9bc      	bls.n	8000234 <keyExpansion+0x14>
    // 后面秘钥的过程：
    // （i % 4） == 0 就是前一列的秘钥经过，左位移，字节替换，
    // 第一个数据与RCon数组中的值进行异或，数组下标由第几轮的秘钥扩展决定,在与前四列的秘钥进行异或操作得到。
    // 若 （i % 4） != 0,就是前列的秘钥与前四列的秘钥异或。
    // i 秘钥扩展的列
    for (i = NK; i < 4 * (NR + 1); i++)
 80002ba:	18bb      	adds	r3, r7, r2
 80002bc:	2204      	movs	r2, #4
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	e0d1      	b.n	8000466 <keyExpansion+0x246>
    {
        j = (i - 1) * 4;
 80002c2:	2417      	movs	r4, #23
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	2115      	movs	r1, #21
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	0092      	lsls	r2, r2, #2
 80002d2:	701a      	strb	r2, [r3, #0]

        temp[0] = RoundKey[j + 0];
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4a68      	ldr	r2, [pc, #416]	@ (800047c <keyExpansion+0x25c>)
 80002da:	5cd2      	ldrb	r2, [r2, r3]
 80002dc:	200c      	movs	r0, #12
 80002de:	183b      	adds	r3, r7, r0
 80002e0:	701a      	strb	r2, [r3, #0]
        temp[1] = RoundKey[j + 1];
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	4a64      	ldr	r2, [pc, #400]	@ (800047c <keyExpansion+0x25c>)
 80002ea:	5cd2      	ldrb	r2, [r2, r3]
 80002ec:	183b      	adds	r3, r7, r0
 80002ee:	705a      	strb	r2, [r3, #1]
        temp[2] = RoundKey[j + 2];
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	3302      	adds	r3, #2
 80002f6:	4a61      	ldr	r2, [pc, #388]	@ (800047c <keyExpansion+0x25c>)
 80002f8:	5cd2      	ldrb	r2, [r2, r3]
 80002fa:	183b      	adds	r3, r7, r0
 80002fc:	709a      	strb	r2, [r3, #2]
        temp[3] = RoundKey[j + 3];
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	3303      	adds	r3, #3
 8000304:	4a5d      	ldr	r2, [pc, #372]	@ (800047c <keyExpansion+0x25c>)
 8000306:	5cd2      	ldrb	r2, [r2, r3]
 8000308:	0001      	movs	r1, r0
 800030a:	187b      	adds	r3, r7, r1
 800030c:	70da      	strb	r2, [r3, #3]

        if (i % NK == 0)
 800030e:	193b      	adds	r3, r7, r4
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2203      	movs	r2, #3
 8000314:	4013      	ands	r3, r2
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <keyExpansion+0x19a>
        {
            uint8_t ret = temp[0];
 800031c:	2314      	movs	r3, #20
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	187a      	adds	r2, r7, r1
 8000322:	7812      	ldrb	r2, [r2, #0]
 8000324:	701a      	strb	r2, [r3, #0]
            for (uint8_t l = 0; l < 3; l++)
 8000326:	2316      	movs	r3, #22
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	e00f      	b.n	8000350 <keyExpansion+0x130>
            {
                temp[l] = temp[l + 1];
 8000330:	2016      	movs	r0, #22
 8000332:	183b      	adds	r3, r7, r0
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	183b      	adds	r3, r7, r0
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	240c      	movs	r4, #12
 800033e:	1939      	adds	r1, r7, r4
 8000340:	5c89      	ldrb	r1, [r1, r2]
 8000342:	193a      	adds	r2, r7, r4
 8000344:	54d1      	strb	r1, [r2, r3]
            for (uint8_t l = 0; l < 3; l++)
 8000346:	183b      	adds	r3, r7, r0
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	183b      	adds	r3, r7, r0
 800034c:	3201      	adds	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	2316      	movs	r3, #22
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d9ea      	bls.n	8000330 <keyExpansion+0x110>
            }
            temp[3] = ret;
 800035a:	200c      	movs	r0, #12
 800035c:	183b      	adds	r3, r7, r0
 800035e:	2214      	movs	r2, #20
 8000360:	18ba      	adds	r2, r7, r2
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	70da      	strb	r2, [r3, #3]

            temp[0] = sbox[temp[0]];
 8000366:	183b      	adds	r3, r7, r0
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	001a      	movs	r2, r3
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <keyExpansion+0x260>)
 800036e:	5c9a      	ldrb	r2, [r3, r2]
 8000370:	183b      	adds	r3, r7, r0
 8000372:	701a      	strb	r2, [r3, #0]
            temp[1] = sbox[temp[1]];
 8000374:	183b      	adds	r3, r7, r0
 8000376:	785b      	ldrb	r3, [r3, #1]
 8000378:	001a      	movs	r2, r3
 800037a:	4b41      	ldr	r3, [pc, #260]	@ (8000480 <keyExpansion+0x260>)
 800037c:	5c9a      	ldrb	r2, [r3, r2]
 800037e:	183b      	adds	r3, r7, r0
 8000380:	705a      	strb	r2, [r3, #1]
            temp[2] = sbox[temp[2]];
 8000382:	183b      	adds	r3, r7, r0
 8000384:	789b      	ldrb	r3, [r3, #2]
 8000386:	001a      	movs	r2, r3
 8000388:	4b3d      	ldr	r3, [pc, #244]	@ (8000480 <keyExpansion+0x260>)
 800038a:	5c9a      	ldrb	r2, [r3, r2]
 800038c:	183b      	adds	r3, r7, r0
 800038e:	709a      	strb	r2, [r3, #2]
            temp[3] = sbox[temp[3]];
 8000390:	183b      	adds	r3, r7, r0
 8000392:	78db      	ldrb	r3, [r3, #3]
 8000394:	001a      	movs	r2, r3
 8000396:	4b3a      	ldr	r3, [pc, #232]	@ (8000480 <keyExpansion+0x260>)
 8000398:	5c9a      	ldrb	r2, [r3, r2]
 800039a:	183b      	adds	r3, r7, r0
 800039c:	70da      	strb	r2, [r3, #3]

            temp[0] ^= rcon[i / NK];
 800039e:	183b      	adds	r3, r7, r0
 80003a0:	781a      	ldrb	r2, [r3, #0]
 80003a2:	2317      	movs	r3, #23
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	0019      	movs	r1, r3
 80003ae:	4b35      	ldr	r3, [pc, #212]	@ (8000484 <keyExpansion+0x264>)
 80003b0:	5c5b      	ldrb	r3, [r3, r1]
 80003b2:	4053      	eors	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	183b      	adds	r3, r7, r0
 80003b8:	701a      	strb	r2, [r3, #0]
        }
        // 前四列的下标
        j = (i - NK) * 4;
 80003ba:	2617      	movs	r6, #23
 80003bc:	19bb      	adds	r3, r7, r6
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3b04      	subs	r3, #4
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	2415      	movs	r4, #21
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	701a      	strb	r2, [r3, #0]
        k = i * 4;
 80003cc:	2513      	movs	r5, #19
 80003ce:	197b      	adds	r3, r7, r5
 80003d0:	19ba      	adds	r2, r7, r6
 80003d2:	7812      	ldrb	r2, [r2, #0]
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	701a      	strb	r2, [r3, #0]

        roundkey[k + 0] = roundkey[j + 0] ^ temp[0];
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	18d3      	adds	r3, r2, r3
 80003e0:	7819      	ldrb	r1, [r3, #0]
 80003e2:	230c      	movs	r3, #12
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	781a      	ldrb	r2, [r3, #0]
 80003e8:	197b      	adds	r3, r7, r5
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	6838      	ldr	r0, [r7, #0]
 80003ee:	18c3      	adds	r3, r0, r3
 80003f0:	404a      	eors	r2, r1
 80003f2:	b2d2      	uxtb	r2, r2
 80003f4:	701a      	strb	r2, [r3, #0]
        roundkey[k + 1] = roundkey[j + 1] ^ temp[1];
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3301      	adds	r3, #1
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	18d3      	adds	r3, r2, r3
 8000400:	7819      	ldrb	r1, [r3, #0]
 8000402:	230c      	movs	r3, #12
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	785a      	ldrb	r2, [r3, #1]
 8000408:	197b      	adds	r3, r7, r5
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	3301      	adds	r3, #1
 800040e:	6838      	ldr	r0, [r7, #0]
 8000410:	18c3      	adds	r3, r0, r3
 8000412:	404a      	eors	r2, r1
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	701a      	strb	r2, [r3, #0]
        roundkey[k + 2] = roundkey[j + 2] ^ temp[2];
 8000418:	193b      	adds	r3, r7, r4
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3302      	adds	r3, #2
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	18d3      	adds	r3, r2, r3
 8000422:	7819      	ldrb	r1, [r3, #0]
 8000424:	230c      	movs	r3, #12
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	789a      	ldrb	r2, [r3, #2]
 800042a:	197b      	adds	r3, r7, r5
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	3302      	adds	r3, #2
 8000430:	6838      	ldr	r0, [r7, #0]
 8000432:	18c3      	adds	r3, r0, r3
 8000434:	404a      	eors	r2, r1
 8000436:	b2d2      	uxtb	r2, r2
 8000438:	701a      	strb	r2, [r3, #0]
        roundkey[k + 3] = roundkey[j + 3] ^ temp[3];
 800043a:	193b      	adds	r3, r7, r4
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	3303      	adds	r3, #3
 8000440:	683a      	ldr	r2, [r7, #0]
 8000442:	18d3      	adds	r3, r2, r3
 8000444:	7819      	ldrb	r1, [r3, #0]
 8000446:	230c      	movs	r3, #12
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	78da      	ldrb	r2, [r3, #3]
 800044c:	197b      	adds	r3, r7, r5
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	3303      	adds	r3, #3
 8000452:	6838      	ldr	r0, [r7, #0]
 8000454:	18c3      	adds	r3, r0, r3
 8000456:	404a      	eors	r2, r1
 8000458:	b2d2      	uxtb	r2, r2
 800045a:	701a      	strb	r2, [r3, #0]
    for (i = NK; i < 4 * (NR + 1); i++)
 800045c:	19bb      	adds	r3, r7, r6
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	19bb      	adds	r3, r7, r6
 8000462:	3201      	adds	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
 8000466:	2317      	movs	r3, #23
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b2b      	cmp	r3, #43	@ 0x2b
 800046e:	d800      	bhi.n	8000472 <keyExpansion+0x252>
 8000470:	e727      	b.n	80002c2 <keyExpansion+0xa2>
    }
}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b007      	add	sp, #28
 800047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800047c:	2000008c 	.word	0x2000008c
 8000480:	08003e58 	.word	0x08003e58
 8000484:	08004058 	.word	0x08004058

08000488 <addRoundKey>:
 * @param state: 状态数组
 * @param roundkey 轮秘钥数组
 * @param round 轮密钥加轮次
 */
static void addRoundKey(uint8_t *state, uint8_t *roundkey, uint8_t round)
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	701a      	strb	r2, [r3, #0]
    uint8_t i, j;
    for (i = 0; i < 4; i++)
 8000496:	2317      	movs	r3, #23
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	e03b      	b.n	8000518 <addRoundKey+0x90>
    {
        for (j = 0; j < 4; j++)
 80004a0:	2316      	movs	r3, #22
 80004a2:	18fb      	adds	r3, r7, r3
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e02b      	b.n	8000502 <addRoundKey+0x7a>
        {
            state[i * 4 + j] ^= roundkey[(round * 16) + (i * 4) + j];
 80004aa:	2517      	movs	r5, #23
 80004ac:	197b      	adds	r3, r7, r5
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	009a      	lsls	r2, r3, #2
 80004b2:	2016      	movs	r0, #22
 80004b4:	183b      	adds	r3, r7, r0
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	18d3      	adds	r3, r2, r3
 80004ba:	001a      	movs	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	189b      	adds	r3, r3, r2
 80004c0:	7819      	ldrb	r1, [r3, #0]
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	009a      	lsls	r2, r3, #2
 80004c8:	197b      	adds	r3, r7, r5
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	18d3      	adds	r3, r2, r3
 80004ce:	009a      	lsls	r2, r3, #2
 80004d0:	0004      	movs	r4, r0
 80004d2:	183b      	adds	r3, r7, r0
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	18d3      	adds	r3, r2, r3
 80004d8:	001a      	movs	r2, r3
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	189b      	adds	r3, r3, r2
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	197b      	adds	r3, r7, r5
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	0098      	lsls	r0, r3, #2
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	18c3      	adds	r3, r0, r3
 80004ec:	0018      	movs	r0, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	181b      	adds	r3, r3, r0
 80004f2:	404a      	eors	r2, r1
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 4; j++)
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	3201      	adds	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	2316      	movs	r3, #22
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d9ce      	bls.n	80004aa <addRoundKey+0x22>
    for (i = 0; i < 4; i++)
 800050c:	2117      	movs	r1, #23
 800050e:	187b      	adds	r3, r7, r1
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	187b      	adds	r3, r7, r1
 8000514:	3201      	adds	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	2317      	movs	r3, #23
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b03      	cmp	r3, #3
 8000520:	d9be      	bls.n	80004a0 <addRoundKey+0x18>
        }
    }
}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b006      	add	sp, #24
 800052a:	bdb0      	pop	{r4, r5, r7, pc}

0800052c <GF2>:
    }
}

// GF(2，M)伽罗华域乘法运算
static uint8_t GF2(uint8_t x)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	701a      	strb	r2, [r3, #0]
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	b25a      	sxtb	r2, r3
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	09db      	lsrs	r3, r3, #7
 8000546:	b2db      	uxtb	r3, r3
 8000548:	1c19      	adds	r1, r3, #0
 800054a:	1c0b      	adds	r3, r1, #0
 800054c:	18db      	adds	r3, r3, r3
 800054e:	185b      	adds	r3, r3, r1
 8000550:	1c19      	adds	r1, r3, #0
 8000552:	00c8      	lsls	r0, r1, #3
 8000554:	1c19      	adds	r1, r3, #0
 8000556:	1c03      	adds	r3, r0, #0
 8000558:	18cb      	adds	r3, r1, r3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	b25b      	sxtb	r3, r3
 800055e:	4053      	eors	r3, r2
 8000560:	b25b      	sxtb	r3, r3
 8000562:	b2db      	uxtb	r3, r3
}
 8000564:	0018      	movs	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}

0800056c <GFMul>:

static uint8_t GFMul(uint8_t x, uint8_t y)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	0002      	movs	r2, r0
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	1dbb      	adds	r3, r7, #6
 800057a:	1c0a      	adds	r2, r1, #0
 800057c:	701a      	strb	r2, [r3, #0]
    uint8_t ret = 0;
 800057e:	230f      	movs	r3, #15
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 8; i++)
 8000586:	230e      	movs	r3, #14
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	e01f      	b.n	80005d0 <GFMul+0x64>
    {
        if (y & 0x01)
 8000590:	1dbb      	adds	r3, r7, #6
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2201      	movs	r2, #1
 8000596:	4013      	ands	r3, r2
 8000598:	d007      	beq.n	80005aa <GFMul+0x3e>
        {
            ret ^= x;
 800059a:	220f      	movs	r2, #15
 800059c:	18bb      	adds	r3, r7, r2
 800059e:	18b9      	adds	r1, r7, r2
 80005a0:	1dfa      	adds	r2, r7, #7
 80005a2:	7809      	ldrb	r1, [r1, #0]
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	404a      	eors	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
        }

        x = GF2(x);
 80005aa:	1dfc      	adds	r4, r7, #7
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ffbb 	bl	800052c <GF2>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
        y >>= 1;
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	1dba      	adds	r2, r7, #6
 80005be:	7812      	ldrb	r2, [r2, #0]
 80005c0:	0852      	lsrs	r2, r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 80005c4:	210e      	movs	r1, #14
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	781a      	ldrb	r2, [r3, #0]
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	3201      	adds	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	230e      	movs	r3, #14
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	d9da      	bls.n	8000590 <GFMul+0x24>
    }
    return ret;
 80005da:	230f      	movs	r3, #15
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	781b      	ldrb	r3, [r3, #0]
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b005      	add	sp, #20
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <invSubByte>:
 * @brief  逆字节替换
 * @param  state: 状态数组
 * @return null
 */
static void invSubByte(uint8_t *state)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 16; i++)
 80005f0:	230f      	movs	r3, #15
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e012      	b.n	8000620 <invSubByte+0x38>
    {
        *(state + i) = invsbox[*(state + i)];
 80005fa:	200f      	movs	r0, #15
 80005fc:	183b      	adds	r3, r7, r0
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	18d3      	adds	r3, r2, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	0019      	movs	r1, r3
 8000608:	183b      	adds	r3, r7, r0
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	18d3      	adds	r3, r2, r3
 8000610:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <invSubByte+0x4c>)
 8000612:	5c52      	ldrb	r2, [r2, r1]
 8000614:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 16; i++)
 8000616:	183b      	adds	r3, r7, r0
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	183b      	adds	r3, r7, r0
 800061c:	3201      	adds	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	230f      	movs	r3, #15
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0f      	cmp	r3, #15
 8000628:	d9e7      	bls.n	80005fa <invSubByte+0x12>
    }
}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b004      	add	sp, #16
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08003f58 	.word	0x08003f58

08000638 <invShiftRow>:
 * @brief  逆行移位
 * @param  state: 状态数组
 * @return null
 */
static void invShiftRow(uint8_t *state)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	@ 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    uint8_t temp[4][4];

    for (uint8_t i = 0; i < 4; i++)
 8000640:	231f      	movs	r3, #31
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e038      	b.n	80006bc <invShiftRow+0x84>
    {
        for (uint8_t j = 0; j < 4; j++)
 800064a:	231e      	movs	r3, #30
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e028      	b.n	80006a6 <invShiftRow+0x6e>
        {
            temp[i][j] = state[(4 * ((j - i + 4) % 4)) + i];
 8000654:	231e      	movs	r3, #30
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	231f      	movs	r3, #31
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	3304      	adds	r3, #4
 8000664:	4a34      	ldr	r2, [pc, #208]	@ (8000738 <invShiftRow+0x100>)
 8000666:	4013      	ands	r3, r2
 8000668:	d504      	bpl.n	8000674 <invShiftRow+0x3c>
 800066a:	3b01      	subs	r3, #1
 800066c:	2204      	movs	r2, #4
 800066e:	4252      	negs	r2, r2
 8000670:	4313      	orrs	r3, r2
 8000672:	3301      	adds	r3, #1
 8000674:	009a      	lsls	r2, r3, #2
 8000676:	201f      	movs	r0, #31
 8000678:	183b      	adds	r3, r7, r0
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	001a      	movs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	1899      	adds	r1, r3, r2
 8000684:	183b      	adds	r3, r7, r0
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	241e      	movs	r4, #30
 800068a:	193b      	adds	r3, r7, r4
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	7808      	ldrb	r0, [r1, #0]
 8000690:	210c      	movs	r1, #12
 8000692:	1879      	adds	r1, r7, r1
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	188a      	adds	r2, r1, r2
 8000698:	1c01      	adds	r1, r0, #0
 800069a:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < 4; j++)
 800069c:	193b      	adds	r3, r7, r4
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	3201      	adds	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	231e      	movs	r3, #30
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d9d1      	bls.n	8000654 <invShiftRow+0x1c>
    for (uint8_t i = 0; i < 4; i++)
 80006b0:	211f      	movs	r1, #31
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	3201      	adds	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	231f      	movs	r3, #31
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	d9c1      	bls.n	800064a <invShiftRow+0x12>
        }
    }

    for (uint8_t i = 0; i < 4; i++)
 80006c6:	231d      	movs	r3, #29
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e029      	b.n	8000724 <invShiftRow+0xec>
    {
        for (uint8_t j = 0; j < 4; j++)
 80006d0:	231c      	movs	r3, #28
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e019      	b.n	800070e <invShiftRow+0xd6>
        {
            state[(4 * i) + j] = temp[j][i];
 80006da:	241c      	movs	r4, #28
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	7819      	ldrb	r1, [r3, #0]
 80006e0:	201d      	movs	r0, #29
 80006e2:	183b      	adds	r3, r7, r0
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	183b      	adds	r3, r7, r0
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	0098      	lsls	r0, r3, #2
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	18c3      	adds	r3, r0, r3
 80006f2:	0018      	movs	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	181b      	adds	r3, r3, r0
 80006f8:	200c      	movs	r0, #12
 80006fa:	1838      	adds	r0, r7, r0
 80006fc:	0089      	lsls	r1, r1, #2
 80006fe:	1841      	adds	r1, r0, r1
 8000700:	5c8a      	ldrb	r2, [r1, r2]
 8000702:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 4; j++)
 8000704:	193b      	adds	r3, r7, r4
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	193b      	adds	r3, r7, r4
 800070a:	3201      	adds	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	231c      	movs	r3, #28
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d9e0      	bls.n	80006da <invShiftRow+0xa2>
    for (uint8_t i = 0; i < 4; i++)
 8000718:	211d      	movs	r1, #29
 800071a:	187b      	adds	r3, r7, r1
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	187b      	adds	r3, r7, r1
 8000720:	3201      	adds	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	231d      	movs	r3, #29
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b03      	cmp	r3, #3
 800072c:	d9d0      	bls.n	80006d0 <invShiftRow+0x98>
        }
    }
}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b009      	add	sp, #36	@ 0x24
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	80000003 	.word	0x80000003

0800073c <invMixCloumns>:
 * @param state 状态数组
 * @param constant 逆列混合常数举证
 * @return null
 */
static void invMixCloumns(uint8_t *state,const uint8_t *constant)
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
    uint8_t temp[4][4];

    for (uint8_t i = 0; i < 4; i++)
 8000746:	231f      	movs	r3, #31
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e071      	b.n	8000834 <invMixCloumns+0xf8>
    {
        for (uint8_t j = 0; j < 4; j++)
 8000750:	231e      	movs	r3, #30
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e061      	b.n	800081e <invMixCloumns+0xe2>
        {
            temp[i][j] = GFMul(*(state + 4 * j + 0), constant[4 * i + 0]) ^ GFMul(*(state + 4 * j + 1), constant[4 * i + 1]) ^ GFMul(*(state + 4 * j + 2), constant[4 * i + 2]) ^ GFMul(*(state + 4 * j + 3), constant[4 * i + 3]);
 800075a:	251e      	movs	r5, #30
 800075c:	197b      	adds	r3, r7, r5
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	001a      	movs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	189b      	adds	r3, r3, r2
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	261f      	movs	r6, #31
 800076c:	19bb      	adds	r3, r7, r6
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	0019      	movs	r1, r3
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	185b      	adds	r3, r3, r1
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	0019      	movs	r1, r3
 800077c:	0010      	movs	r0, r2
 800077e:	f7ff fef5 	bl	800056c <GFMul>
 8000782:	0003      	movs	r3, r0
 8000784:	001c      	movs	r4, r3
 8000786:	197b      	adds	r3, r7, r5
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	3301      	adds	r3, #1
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	18d3      	adds	r3, r2, r3
 8000792:	7818      	ldrb	r0, [r3, #0]
 8000794:	19bb      	adds	r3, r7, r6
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	3301      	adds	r3, #1
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0019      	movs	r1, r3
 80007a4:	f7ff fee2 	bl	800056c <GFMul>
 80007a8:	0003      	movs	r3, r0
 80007aa:	4063      	eors	r3, r4
 80007ac:	b2dc      	uxtb	r4, r3
 80007ae:	197b      	adds	r3, r7, r5
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	3302      	adds	r3, #2
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	7818      	ldrb	r0, [r3, #0]
 80007bc:	19bb      	adds	r3, r7, r6
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	3302      	adds	r3, #2
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0019      	movs	r1, r3
 80007cc:	f7ff fece 	bl	800056c <GFMul>
 80007d0:	0003      	movs	r3, r0
 80007d2:	4063      	eors	r3, r4
 80007d4:	b2dc      	uxtb	r4, r3
 80007d6:	197b      	adds	r3, r7, r5
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	3303      	adds	r3, #3
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	18d3      	adds	r3, r2, r3
 80007e2:	7818      	ldrb	r0, [r3, #0]
 80007e4:	19bb      	adds	r3, r7, r6
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	3303      	adds	r3, #3
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	18d3      	adds	r3, r2, r3
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0019      	movs	r1, r3
 80007f4:	f7ff feba 	bl	800056c <GFMul>
 80007f8:	0003      	movs	r3, r0
 80007fa:	0019      	movs	r1, r3
 80007fc:	19bb      	adds	r3, r7, r6
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	197b      	adds	r3, r7, r5
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4061      	eors	r1, r4
 8000806:	b2c8      	uxtb	r0, r1
 8000808:	210c      	movs	r1, #12
 800080a:	1879      	adds	r1, r7, r1
 800080c:	0092      	lsls	r2, r2, #2
 800080e:	188a      	adds	r2, r1, r2
 8000810:	1c01      	adds	r1, r0, #0
 8000812:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < 4; j++)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	197b      	adds	r3, r7, r5
 800081a:	3201      	adds	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	231e      	movs	r3, #30
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d998      	bls.n	800075a <invMixCloumns+0x1e>
    for (uint8_t i = 0; i < 4; i++)
 8000828:	211f      	movs	r1, #31
 800082a:	187b      	adds	r3, r7, r1
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	187b      	adds	r3, r7, r1
 8000830:	3201      	adds	r2, #1
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	231f      	movs	r3, #31
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d988      	bls.n	8000750 <invMixCloumns+0x14>
        }
    }

    for (uint8_t i = 0; i < 4; i++)
 800083e:	231d      	movs	r3, #29
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	e029      	b.n	800089c <invMixCloumns+0x160>
    {
        for (uint8_t j = 0; j < 4; j++)
 8000848:	231c      	movs	r3, #28
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e019      	b.n	8000886 <invMixCloumns+0x14a>
        {
            *(state + 4 * i + j) = temp[j][i];
 8000852:	241c      	movs	r4, #28
 8000854:	193b      	adds	r3, r7, r4
 8000856:	7819      	ldrb	r1, [r3, #0]
 8000858:	201d      	movs	r0, #29
 800085a:	183b      	adds	r3, r7, r0
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	183b      	adds	r3, r7, r0
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	0018      	movs	r0, r3
 8000866:	193b      	adds	r3, r7, r4
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	18c3      	adds	r3, r0, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	18c3      	adds	r3, r0, r3
 8000870:	200c      	movs	r0, #12
 8000872:	1838      	adds	r0, r7, r0
 8000874:	0089      	lsls	r1, r1, #2
 8000876:	1841      	adds	r1, r0, r1
 8000878:	5c8a      	ldrb	r2, [r1, r2]
 800087a:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 4; j++)
 800087c:	193b      	adds	r3, r7, r4
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	193b      	adds	r3, r7, r4
 8000882:	3201      	adds	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	231c      	movs	r3, #28
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d9e0      	bls.n	8000852 <invMixCloumns+0x116>
    for (uint8_t i = 0; i < 4; i++)
 8000890:	211d      	movs	r1, #29
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	187b      	adds	r3, r7, r1
 8000898:	3201      	adds	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	231d      	movs	r3, #29
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d9d0      	bls.n	8000848 <invMixCloumns+0x10c>
        }
    }
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b009      	add	sp, #36	@ 0x24
 80008ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008b0 <invcipher>:
 * @param  state: 待解密数据
 * @param  key: 密钥
 * @return null
 */
void invcipher(uint8_t *state, uint8_t *key)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
    keyExpansion(key, RoundKey);
 80008ba:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <invcipher+0x90>)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff fcad 	bl	8000220 <keyExpansion>
    addRoundKey(state, RoundKey, NR);
 80008c6:	491e      	ldr	r1, [pc, #120]	@ (8000940 <invcipher+0x90>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	220a      	movs	r2, #10
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff fddb 	bl	8000488 <addRoundKey>
    invShiftRow(state);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff feaf 	bl	8000638 <invShiftRow>
    invSubByte(state);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff fe83 	bl	80005e8 <invSubByte>

    for (uint8_t i = 9; i >= 1; i--)
 80008e2:	230f      	movs	r3, #15
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	2209      	movs	r2, #9
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e01a      	b.n	8000922 <invcipher+0x72>
    {
        addRoundKey(state, RoundKey, i);
 80008ec:	240f      	movs	r4, #15
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4913      	ldr	r1, [pc, #76]	@ (8000940 <invcipher+0x90>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff fdc6 	bl	8000488 <addRoundKey>
        invMixCloumns(state, invmix_constant);
 80008fc:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <invcipher+0x94>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	0011      	movs	r1, r2
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff ff1a 	bl	800073c <invMixCloumns>
        invShiftRow(state);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fe94 	bl	8000638 <invShiftRow>
        invSubByte(state);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fe68 	bl	80005e8 <invSubByte>
    for (uint8_t i = 9; i >= 1; i--)
 8000918:	193b      	adds	r3, r7, r4
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	193b      	adds	r3, r7, r4
 800091e:	3a01      	subs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	230f      	movs	r3, #15
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1df      	bne.n	80008ec <invcipher+0x3c>
    }

    addRoundKey(state, RoundKey, 0);
 800092c:	4904      	ldr	r1, [pc, #16]	@ (8000940 <invcipher+0x90>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fda8 	bl	8000488 <addRoundKey>
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b005      	add	sp, #20
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	2000008c 	.word	0x2000008c
 8000944:	08004064 	.word	0x08004064

08000948 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000950:	695a      	ldr	r2, [r3, #20]
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	03c9      	lsls	r1, r1, #15
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_GPIO_Init+0x64>)
 800095e:	695a      	ldr	r2, [r3, #20]
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	03db      	lsls	r3, r3, #15
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_GPIO_Init+0x64>)
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	0289      	lsls	r1, r1, #10
 8000974:	430a      	orrs	r2, r1
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_GPIO_Init+0x64>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	029b      	lsls	r3, r3, #10
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000988:	695a      	ldr	r2, [r3, #20]
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_GPIO_Init+0x64>)
 800098c:	2180      	movs	r1, #128	@ 0x80
 800098e:	02c9      	lsls	r1, r1, #11
 8000990:	430a      	orrs	r2, r1
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <MX_GPIO_Init+0x64>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	2380      	movs	r3, #128	@ 0x80
 800099a:	02db      	lsls	r3, r3, #11
 800099c:	4013      	ands	r3, r2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b004      	add	sp, #16
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000

080009b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <MX_I2C1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <MX_I2C1_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 faa9 	bl	8001f44 <HAL_I2C_Init>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f983 	bl	8000d00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fb46 	bl	8002090 <HAL_I2CEx_ConfigAnalogFilter>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f97a 	bl	8000d00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <MX_I2C1_Init+0x74>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fb89 	bl	8002128 <HAL_I2CEx_ConfigDigitalFilter>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f971 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000013c 	.word	0x2000013c
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	10805d88 	.word	0x10805d88

08000a30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08b      	sub	sp, #44	@ 0x2c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	2414      	movs	r4, #20
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f003 f9c0 	bl	8003dc8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <HAL_I2C_MspInit+0x90>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d131      	bne.n	8000ab6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	02c9      	lsls	r1, r1, #11
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	02db      	lsls	r3, r3, #11
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a6e:	0021      	movs	r1, r4
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	22c0      	movs	r2, #192	@ 0xc0
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2212      	movs	r2, #18
 8000a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2203      	movs	r2, #3
 8000a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000a92:	0019      	movs	r1, r3
 8000a94:	0010      	movs	r0, r2
 8000a96:	f001 f8bf 	bl	8001c18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a9c:	69da      	ldr	r2, [r3, #28]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	0389      	lsls	r1, r1, #14
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	61da      	str	r2, [r3, #28]
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000aaa:	69da      	ldr	r2, [r3, #28]
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	039b      	lsls	r3, r3, #14
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b00b      	add	sp, #44	@ 0x2c
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b099      	sub	sp, #100	@ 0x64
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 修改密码
  Material_Data write_data;
  Material_Data read_data;
  memset(&write_data, 0, sizeof(write_data));
 8000ad2:	2430      	movs	r4, #48	@ 0x30
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2230      	movs	r2, #48	@ 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 f974 	bl	8003dc8 <memset>
  memcpy(write_data.material_type, "PLA",sizeof("PLA"));
 8000ae0:	4944      	ldr	r1, [pc, #272]	@ (8000bf4 <main+0x128>)
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f003 f99a 	bl	8003e20 <memcpy>
  write_data.rgb[0] = 0xff;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	22ff      	movs	r2, #255	@ 0xff
 8000af0:	725a      	strb	r2, [r3, #9]
  write_data.rgb[1] = 0xff;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	22ff      	movs	r2, #255	@ 0xff
 8000af6:	729a      	strb	r2, [r3, #10]
  write_data.rgb[2] = 0xff;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	22ff      	movs	r2, #255	@ 0xff
 8000afc:	72da      	strb	r2, [r3, #11]
  write_data.produced_date =1731578537;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf8 <main+0x12c>)
 8000b02:	60da      	str	r2, [r3, #12]
  memcpy(write_data.batch_number, "MD00001",sizeof("MD00001"));
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	4a3d      	ldr	r2, [pc, #244]	@ (8000bfc <main+0x130>)
 8000b08:	3310      	adds	r3, #16
 8000b0a:	ca03      	ldmia	r2!, {r0, r1}
 8000b0c:	c303      	stmia	r3!, {r0, r1}
  write_data.hot_bed_temp_H = 100;
 8000b0e:	0021      	movs	r1, r4
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2264      	movs	r2, #100	@ 0x64
 8000b14:	835a      	strh	r2, [r3, #26]
  write_data.hot_bed_temp_L = 40;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2228      	movs	r2, #40	@ 0x28
 8000b1a:	831a      	strh	r2, [r3, #24]
  write_data.exthead_temp_L = 150;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2296      	movs	r2, #150	@ 0x96
 8000b20:	839a      	strh	r2, [r3, #28]
  write_data.exthead_temp_H = 400;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	22c8      	movs	r2, #200	@ 0xc8
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	83da      	strh	r2, [r3, #30]
  write_data.init_weight = 2000;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	22fa      	movs	r2, #250	@ 0xfa
 8000b2e:	00d2      	lsls	r2, r2, #3
 8000b30:	841a      	strh	r2, [r3, #32]
  write_data.empty_tray_weight = 150;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2296      	movs	r2, #150	@ 0x96
 8000b36:	845a      	strh	r2, [r3, #34]	@ 0x22
  write_data.residual_weight = 1500;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	4a31      	ldr	r2, [pc, #196]	@ (8000c00 <main+0x134>)
 8000b3c:	849a      	strh	r2, [r3, #36]	@ 0x24
  write_data.supplier = 0x01;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2201      	movs	r2, #1
 8000b42:	84da      	strh	r2, [r3, #38]	@ 0x26
  write_data.material_diameter = 1.75;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	4a2f      	ldr	r2, [pc, #188]	@ (8000c04 <main+0x138>)
 8000b48:	629a      	str	r2, [r3, #40]	@ 0x28
  write_data.material_density = 1.23;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c08 <main+0x13c>)
 8000b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 ff60 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f85c 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f7ff fef6 	bl	8000948 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b5c:	f7ff ff28 	bl	80009b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b60:	f000 feb0 	bl	80018c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 8000b64:	f000 fb2d 	bl	80011c2 <OLED_Init>
  OLED_Clear();
 8000b68:	f000 f9e0 	bl	8000f2c <OLED_Clear>

  RFID_Rc523_Config();
 8000b6c:	f000 fc48 	bl	8001400 <RFID_Rc523_Config>
//	  HAL_Delay(5000);
//	  OLED_Clear();
//	  rfid_write_channel_data(0x02, &write_data);


	  memset(&read_data,0,sizeof(read_data));
 8000b70:	003b      	movs	r3, r7
 8000b72:	2230      	movs	r2, #48	@ 0x30
 8000b74:	2100      	movs	r1, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f003 f926 	bl	8003dc8 <memset>
	  rfid_read_channel_data(0x02, &read_data);
 8000b7c:	003b      	movs	r3, r7
 8000b7e:	0019      	movs	r1, r3
 8000b80:	2002      	movs	r0, #2
 8000b82:	f000 fd6f 	bl	8001664 <rfid_read_channel_data>
	  OLED_ShowHexArray((uint8_t*)&read_data , 8, 1);
 8000b86:	003b      	movs	r3, r7
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fae4 	bl	800115a <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 8, 8, 2);
 8000b92:	003b      	movs	r3, r7
 8000b94:	3308      	adds	r3, #8
 8000b96:	2202      	movs	r2, #2
 8000b98:	2108      	movs	r1, #8
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fadd 	bl	800115a <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 16, 8, 3);
 8000ba0:	003b      	movs	r3, r7
 8000ba2:	3310      	adds	r3, #16
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 fad6 	bl	800115a <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 24, 8, 4);
 8000bae:	003b      	movs	r3, r7
 8000bb0:	3318      	adds	r3, #24
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 facf 	bl	800115a <OLED_ShowHexArray>
	  HAL_Delay(5000);
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <main+0x140>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 ff58 	bl	8001a74 <HAL_Delay>
	  OLED_Clear();
 8000bc4:	f000 f9b2 	bl	8000f2c <OLED_Clear>
	  OLED_ShowHexArray((uint8_t*)&read_data + 32, 8, 1);
 8000bc8:	003b      	movs	r3, r7
 8000bca:	3320      	adds	r3, #32
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2108      	movs	r1, #8
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 fac2 	bl	800115a <OLED_ShowHexArray>
	  OLED_ShowHexArray((uint8_t*)&read_data + 40, 8, 2);
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	3328      	adds	r3, #40	@ 0x28
 8000bda:	2202      	movs	r2, #2
 8000bdc:	2108      	movs	r1, #8
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 fabb 	bl	800115a <OLED_ShowHexArray>
	  HAL_Delay(5000);
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <main+0x140>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 ff44 	bl	8001a74 <HAL_Delay>
	  OLED_Clear();
 8000bec:	f000 f99e 	bl	8000f2c <OLED_Clear>
	  memset(&read_data,0,sizeof(read_data));
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	e7bd      	b.n	8000b70 <main+0xa4>
 8000bf4:	08003e4c 	.word	0x08003e4c
 8000bf8:	6735caa9 	.word	0x6735caa9
 8000bfc:	08003e50 	.word	0x08003e50
 8000c00:	000005dc 	.word	0x000005dc
 8000c04:	3fe00000 	.word	0x3fe00000
 8000c08:	3f9d70a4 	.word	0x3f9d70a4
 8000c0c:	00001388 	.word	0x00001388

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b099      	sub	sp, #100	@ 0x64
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	242c      	movs	r4, #44	@ 0x2c
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2334      	movs	r3, #52	@ 0x34
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f003 f8d1 	bl	8003dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c26:	231c      	movs	r3, #28
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f003 f8c9 	bl	8003dc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c36:	003b      	movs	r3, r7
 8000c38:	0018      	movs	r0, r3
 8000c3a:	231c      	movs	r3, #28
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 f8c2 	bl	8003dc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	0021      	movs	r1, r4
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2202      	movs	r2, #2
 8000c4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2201      	movs	r2, #1
 8000c50:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2210      	movs	r2, #16
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	0212      	lsls	r2, r2, #8
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2280      	movs	r2, #128	@ 0x80
 8000c6a:	0352      	lsls	r2, r2, #13
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	0018      	movs	r0, r3
 8000c78:	f001 faa2 	bl	80021c0 <HAL_RCC_OscConfig>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c80:	f000 f83e 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c84:	211c      	movs	r1, #28
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2202      	movs	r2, #2
 8000c90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fe12 	bl	80028cc <HAL_RCC_ClockConfig>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000cac:	f000 f828 	bl	8000d00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	2221      	movs	r2, #33	@ 0x21
 8000cb4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000cbc:	003b      	movs	r3, r7
 8000cbe:	2210      	movs	r2, #16
 8000cc0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 ff97 	bl	8002bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cce:	f000 f817 	bl	8000d00 <Error_Handler>
  }
}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b019      	add	sp, #100	@ 0x64
 8000cd8:	bd90      	pop	{r4, r7, pc}
	...

08000cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cee:	f000 fea5 	bl	8001a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	e7fd      	b.n	8000d08 <Error_Handler+0x8>

08000d0c <OLED_I2C_Init>:
#define OLED_W_SCL(x) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (GPIO_PinState)(x))
#define OLED_W_SDA(x) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09a      	sub	sp, #104	@ 0x68
 8000d10:	af00      	add	r7, sp, #0
	I2C_HandleTypeDef I2cHandle;
	I2cHandle.Instance = I2C1;
 8000d12:	2114      	movs	r1, #20
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	4a16      	ldr	r2, [pc, #88]	@ (8000d70 <OLED_I2C_Init+0x64>)
 8000d18:	601a      	str	r2, [r3, #0]
	HAL_I2C_MspInit(&I2cHandle);
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fe87 	bl	8000a30 <HAL_I2C_MspInit>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	003b      	movs	r3, r7
 8000d24:	0018      	movs	r0, r3
 8000d26:	2314      	movs	r3, #20
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f003 f84c 	bl	8003dc8 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000d30:	003b      	movs	r3, r7
 8000d32:	22c0      	movs	r2, #192	@ 0xc0
 8000d34:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d36:	003b      	movs	r3, r7
 8000d38:	2211      	movs	r2, #17
 8000d3a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	003b      	movs	r3, r7
 8000d3e:	2203      	movs	r2, #3
 8000d40:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	003b      	movs	r3, r7
 8000d44:	4a0b      	ldr	r2, [pc, #44]	@ (8000d74 <OLED_I2C_Init+0x68>)
 8000d46:	0019      	movs	r1, r3
 8000d48:	0010      	movs	r0, r2
 8000d4a:	f000 ff65 	bl	8001c18 <HAL_GPIO_Init>

	OLED_W_SCL(1);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <OLED_I2C_Init+0x68>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	2140      	movs	r1, #64	@ 0x40
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 f8d7 	bl	8001f08 <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <OLED_I2C_Init+0x68>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2180      	movs	r1, #128	@ 0x80
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 f8d1 	bl	8001f08 <HAL_GPIO_WritePin>
}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b01a      	add	sp, #104	@ 0x68
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	40005400 	.word	0x40005400
 8000d74:	48000400 	.word	0x48000400

08000d78 <OLED_I2C_Start>:
 * @brief  I2C开始
 * @param  无
 * @retval 无
 */
void OLED_I2C_Start(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <OLED_I2C_Start+0x3c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 f8c0 	bl	8001f08 <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <OLED_I2C_Start+0x3c>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2140      	movs	r1, #64	@ 0x40
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f001 f8ba 	bl	8001f08 <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <OLED_I2C_Start+0x3c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f001 f8b4 	bl	8001f08 <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <OLED_I2C_Start+0x3c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	2140      	movs	r1, #64	@ 0x40
 8000da6:	0018      	movs	r0, r3
 8000da8:	f001 f8ae 	bl	8001f08 <HAL_GPIO_WritePin>
}
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	48000400 	.word	0x48000400

08000db8 <OLED_I2C_Stop>:
 * @brief  I2C停止
 * @param  无
 * @retval 无
 */
void OLED_I2C_Stop(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <OLED_I2C_Stop+0x30>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f001 f8a0 	bl	8001f08 <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8000dc8:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <OLED_I2C_Stop+0x30>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	@ 0x40
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f001 f89a 	bl	8001f08 <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <OLED_I2C_Stop+0x30>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2180      	movs	r1, #128	@ 0x80
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f001 f894 	bl	8001f08 <HAL_GPIO_WritePin>
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	48000400 	.word	0x48000400

08000dec <OLED_I2C_SendByte>:
 * @brief  I2C发送一个字节
 * @param  Byte 要发送的一个字节
 * @retval 无
 */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0002      	movs	r2, r0
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e022      	b.n	8000e48 <OLED_I2C_SendByte+0x5c>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 8000e02:	240f      	movs	r4, #15
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	411a      	asrs	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	1dfa      	adds	r2, r7, #7
 8000e12:	7812      	ldrb	r2, [r2, #0]
 8000e14:	b252      	sxtb	r2, r2
 8000e16:	4013      	ands	r3, r2
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4815      	ldr	r0, [pc, #84]	@ (8000e74 <OLED_I2C_SendByte+0x88>)
 8000e1e:	001a      	movs	r2, r3
 8000e20:	2180      	movs	r1, #128	@ 0x80
 8000e22:	f001 f871 	bl	8001f08 <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <OLED_I2C_SendByte+0x88>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2140      	movs	r1, #64	@ 0x40
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 f86b 	bl	8001f08 <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <OLED_I2C_SendByte+0x88>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	2140      	movs	r1, #64	@ 0x40
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 f865 	bl	8001f08 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	781a      	ldrb	r2, [r3, #0]
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	3201      	adds	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b07      	cmp	r3, #7
 8000e50:	d9d7      	bls.n	8000e02 <OLED_I2C_SendByte+0x16>
	}
	OLED_W_SCL(1); // 额外的一个时钟，不处理应答信号
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <OLED_I2C_SendByte+0x88>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	2140      	movs	r1, #64	@ 0x40
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 f855 	bl	8001f08 <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <OLED_I2C_SendByte+0x88>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	2140      	movs	r1, #64	@ 0x40
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 f84f 	bl	8001f08 <HAL_GPIO_WritePin>
}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b005      	add	sp, #20
 8000e70:	bd90      	pop	{r4, r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	48000400 	.word	0x48000400

08000e78 <OLED_WriteCommand>:
 * @brief  OLED写命令
 * @param  Command 要写入的命令
 * @retval 无
 */
void OLED_WriteCommand(uint8_t Command)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	0002      	movs	r2, r0
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	701a      	strb	r2, [r3, #0]
	OLED_I2C_Start();
 8000e84:	f7ff ff78 	bl	8000d78 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78); // 从机地址
 8000e88:	2078      	movs	r0, #120	@ 0x78
 8000e8a:	f7ff ffaf 	bl	8000dec <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00); // 写命令
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff ffac 	bl	8000dec <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command);
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ffa7 	bl	8000dec <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8000e9e:	f7ff ff8b 	bl	8000db8 <OLED_I2C_Stop>
}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <OLED_WriteData>:
 * @brief  OLED写数据
 * @param  Data 要写入的数据
 * @retval 无
 */
void OLED_WriteData(uint8_t Data)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	701a      	strb	r2, [r3, #0]
	OLED_I2C_Start();
 8000eb6:	f7ff ff5f 	bl	8000d78 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78); // 从机地址
 8000eba:	2078      	movs	r0, #120	@ 0x78
 8000ebc:	f7ff ff96 	bl	8000dec <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40); // 写数据
 8000ec0:	2040      	movs	r0, #64	@ 0x40
 8000ec2:	f7ff ff93 	bl	8000dec <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff ff8e 	bl	8000dec <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8000ed0:	f7ff ff72 	bl	8000db8 <OLED_I2C_Stop>
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}

08000edc <OLED_SetCursor>:
 * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
 * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
 * @retval 无
 */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	1c0a      	adds	r2, r1, #0
 8000eec:	701a      	strb	r2, [r3, #0]
	OLED_WriteCommand(0xB0 | Y);				 // 设置Y位置
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2250      	movs	r2, #80	@ 0x50
 8000ef4:	4252      	negs	r2, r2
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff ffbc 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4)); // 设置X位置高4位
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2210      	movs	r2, #16
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff ffb2 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));		 // 设置X位置低4位
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	220f      	movs	r2, #15
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff ffaa 	bl	8000e78 <OLED_WriteCommand>
}
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <OLED_Clear>:
 * @brief  OLED清屏
 * @param  无
 * @retval 无
 */
void OLED_Clear(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e01b      	b.n	8000f72 <OLED_Clear+0x46>
	{
		OLED_SetCursor(j, 0);
 8000f3a:	1dbb      	adds	r3, r7, #6
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2100      	movs	r1, #0
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ffcb 	bl	8000edc <OLED_SetCursor>
		for (i = 0; i < 128; i++)
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e007      	b.n	8000f5e <OLED_Clear+0x32>
		{
			OLED_WriteData(0x00);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffab 	bl	8000eaa <OLED_WriteData>
		for (i = 0; i < 128; i++)
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	3201      	adds	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	daf2      	bge.n	8000f4e <OLED_Clear+0x22>
	for (j = 0; j < 8; j++)
 8000f68:	1dbb      	adds	r3, r7, #6
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	1dbb      	adds	r3, r7, #6
 8000f6e:	3201      	adds	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	1dbb      	adds	r3, r7, #6
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	d9df      	bls.n	8000f3a <OLED_Clear+0xe>
		}
	}
}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <OLED_ShowChar>:
 * @param  Column 列位置，范围：1~16
 * @param  Char 要显示的一个字符，范围：ASCII可见字符
 * @retval 无
 */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	0004      	movs	r4, r0
 8000f8c:	0008      	movs	r0, r1
 8000f8e:	0011      	movs	r1, r2
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	1c22      	adds	r2, r4, #0
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	1c02      	adds	r2, r0, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	1d7b      	adds	r3, r7, #5
 8000f9e:	1c0a      	adds	r2, r1, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); // 设置光标位置在上半部分
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	18db      	adds	r3, r3, r3
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	0019      	movs	r1, r3
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	f7ff ff8d 	bl	8000edc <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e012      	b.n	8000ff2 <OLED_ShowChar+0x6e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]); // 显示上半部分内容
 8000fcc:	1d7b      	adds	r3, r7, #5
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	240f      	movs	r4, #15
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4922      	ldr	r1, [pc, #136]	@ (8001064 <OLED_ShowChar+0xe0>)
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	188a      	adds	r2, r1, r2
 8000fe0:	5cd3      	ldrb	r3, [r2, r3]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ff61 	bl	8000eaa <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	193b      	adds	r3, r7, r4
 8000fee:	3201      	adds	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	240f      	movs	r4, #15
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b07      	cmp	r3, #7
 8000ffa:	d9e7      	bls.n	8000fcc <OLED_ShowChar+0x48>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); // 设置光标位置在下半部分
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	3b01      	subs	r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	18db      	adds	r3, r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	1dbb      	adds	r3, r7, #6
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	0019      	movs	r1, r3
 800101a:	0010      	movs	r0, r2
 800101c:	f7ff ff5e 	bl	8000edc <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8001020:	193b      	adds	r3, r7, r4
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e013      	b.n	8001050 <OLED_ShowChar+0xcc>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]); // 显示下半部分内容
 8001028:	1d7b      	adds	r3, r7, #5
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3b20      	subs	r3, #32
 800102e:	001a      	movs	r2, r3
 8001030:	240f      	movs	r4, #15
 8001032:	193b      	adds	r3, r7, r4
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	3308      	adds	r3, #8
 8001038:	490a      	ldr	r1, [pc, #40]	@ (8001064 <OLED_ShowChar+0xe0>)
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	188a      	adds	r2, r1, r2
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff32 	bl	8000eaa <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8001046:	193b      	adds	r3, r7, r4
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	193b      	adds	r3, r7, r4
 800104c:	3201      	adds	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b07      	cmp	r3, #7
 8001058:	d9e6      	bls.n	8001028 <OLED_ShowChar+0xa4>
	}
}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b005      	add	sp, #20
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	08004074 	.word	0x08004074

08001068 <OLED_Pow>:
/**
 * @brief  OLED次方函数
 * @retval 返回值等于X的Y次方
 */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8001076:	e003      	b.n	8001080 <OLED_Pow+0x18>
	{
		Result *= X;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4353      	muls	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	603a      	str	r2, [r7, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f6      	bne.n	8001078 <OLED_Pow+0x10>
	}
	return Result;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bd80      	pop	{r7, pc}

08001094 <OLED_ShowHexNum>:
 * @param  Number 要显示的数字，范围：0~0xFFFFFFFF
 * @param  Length 要显示数字的长度，范围：1~8
 * @retval 无
 */
void OLED_ShowHexNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	0004      	movs	r4, r0
 800109c:	0008      	movs	r0, r1
 800109e:	603a      	str	r2, [r7, #0]
 80010a0:	0019      	movs	r1, r3
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	1c22      	adds	r2, r4, #0
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	1dbb      	adds	r3, r7, #6
 80010aa:	1c02      	adds	r2, r0, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	1d7b      	adds	r3, r7, #5
 80010b0:	1c0a      	adds	r2, r1, #0
 80010b2:	701a      	strb	r2, [r3, #0]
	uint8_t i, SingleNumber;
	for (i = 0; i < Length; i++)
 80010b4:	230f      	movs	r3, #15
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e041      	b.n	8001142 <OLED_ShowHexNum+0xae>
	{
		SingleNumber = Number / OLED_Pow(16, Length - i - 1) % 16;
 80010be:	1d7b      	adds	r3, r7, #5
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	240f      	movs	r4, #15
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	3b01      	subs	r3, #1
 80010cc:	0019      	movs	r1, r3
 80010ce:	2010      	movs	r0, #16
 80010d0:	f7ff ffca 	bl	8001068 <OLED_Pow>
 80010d4:	0003      	movs	r3, r0
 80010d6:	0019      	movs	r1, r3
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f7ff f815 	bl	8000108 <__udivsi3>
 80010de:	0003      	movs	r3, r0
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	200e      	movs	r0, #14
 80010e4:	183b      	adds	r3, r7, r0
 80010e6:	210f      	movs	r1, #15
 80010e8:	400a      	ands	r2, r1
 80010ea:	701a      	strb	r2, [r3, #0]
		if (SingleNumber < 10)
 80010ec:	183b      	adds	r3, r7, r0
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d80f      	bhi.n	8001114 <OLED_ShowHexNum+0x80>
		{
			OLED_ShowChar(Line, Column + i, SingleNumber + '0');
 80010f4:	1dba      	adds	r2, r7, #6
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	b2d9      	uxtb	r1, r3
 8001100:	183b      	adds	r3, r7, r0
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3330      	adds	r3, #48	@ 0x30
 8001106:	b2da      	uxtb	r2, r3
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff ff39 	bl	8000f84 <OLED_ShowChar>
 8001112:	e010      	b.n	8001136 <OLED_ShowHexNum+0xa2>
		}
		else
		{
			OLED_ShowChar(Line, Column + i, SingleNumber - 10 + 'A');
 8001114:	1dba      	adds	r2, r7, #6
 8001116:	230f      	movs	r3, #15
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	b2d9      	uxtb	r1, r3
 8001122:	230e      	movs	r3, #14
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	3337      	adds	r3, #55	@ 0x37
 800112a:	b2da      	uxtb	r2, r3
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff ff27 	bl	8000f84 <OLED_ShowChar>
	for (i = 0; i < Length; i++)
 8001136:	210f      	movs	r1, #15
 8001138:	187b      	adds	r3, r7, r1
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	187b      	adds	r3, r7, r1
 800113e:	3201      	adds	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	230f      	movs	r3, #15
 8001144:	18fa      	adds	r2, r7, r3
 8001146:	1d7b      	adds	r3, r7, #5
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3b6      	bcc.n	80010be <OLED_ShowHexNum+0x2a>
		}
	}
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b005      	add	sp, #20
 8001158:	bd90      	pop	{r4, r7, pc}

0800115a <OLED_ShowHexArray>:
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(2, Length - i - 1) % 2 + '0');
	}
}

void OLED_ShowHexArray(uint8_t* arr,uint8_t len, uint8_t Line)
{
 800115a:	b590      	push	{r4, r7, lr}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	0008      	movs	r0, r1
 8001164:	0011      	movs	r1, r2
 8001166:	1cfb      	adds	r3, r7, #3
 8001168:	1c02      	adds	r2, r0, #0
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	1cbb      	adds	r3, r7, #2
 800116e:	1c0a      	adds	r2, r1, #0
 8001170:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++)
 8001172:	230f      	movs	r3, #15
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e016      	b.n	80011aa <OLED_ShowHexArray+0x50>
	{
		OLED_ShowHexNum(Line, 1 + i * 2 , arr[i], 2);
 800117c:	240f      	movs	r4, #15
 800117e:	193b      	adds	r3, r7, r4
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	18db      	adds	r3, r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3301      	adds	r3, #1
 8001188:	b2d9      	uxtb	r1, r3
 800118a:	193b      	adds	r3, r7, r4
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	001a      	movs	r2, r3
 8001196:	1cbb      	adds	r3, r7, #2
 8001198:	7818      	ldrb	r0, [r3, #0]
 800119a:	2302      	movs	r3, #2
 800119c:	f7ff ff7a 	bl	8001094 <OLED_ShowHexNum>
	for (uint8_t i = 0; i < len; i++)
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	193b      	adds	r3, r7, r4
 80011a6:	3201      	adds	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	230f      	movs	r3, #15
 80011ac:	18fa      	adds	r2, r7, r3
 80011ae:	1cfb      	adds	r3, r7, #3
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d3e1      	bcc.n	800117c <OLED_ShowHexArray+0x22>
	}

}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b005      	add	sp, #20
 80011c0:	bd90      	pop	{r4, r7, pc}

080011c2 <OLED_Init>:
 * @brief  OLED初始化
 * @param  无
 * @retval 无
 */
void OLED_Init(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
	uint32_t i, j;

	for (i = 0; i < 1000; i++) // 上电延时
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	e00d      	b.n	80011ea <OLED_Init+0x28>
	{
		for (j = 0; j < 1000; j++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	e002      	b.n	80011da <OLED_Init+0x18>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	23fa      	movs	r3, #250	@ 0xfa
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d3f7      	bcc.n	80011d4 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++) // 上电延时
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3301      	adds	r3, #1
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	23fa      	movs	r3, #250	@ 0xfa
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3ec      	bcc.n	80011ce <OLED_Init+0xc>
			;
	}

	OLED_I2C_Init(); // 端口初始化
 80011f4:	f7ff fd8a 	bl	8000d0c <OLED_I2C_Init>

	OLED_WriteCommand(0xAE); // 关闭显示
 80011f8:	20ae      	movs	r0, #174	@ 0xae
 80011fa:	f7ff fe3d 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 80011fe:	20d5      	movs	r0, #213	@ 0xd5
 8001200:	f7ff fe3a 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8001204:	2080      	movs	r0, #128	@ 0x80
 8001206:	f7ff fe37 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xA8); // 设置多路复用率
 800120a:	20a8      	movs	r0, #168	@ 0xa8
 800120c:	f7ff fe34 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8001210:	203f      	movs	r0, #63	@ 0x3f
 8001212:	f7ff fe31 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xD3); // 设置显示偏移
 8001216:	20d3      	movs	r0, #211	@ 0xd3
 8001218:	f7ff fe2e 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fe2b 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0x40); // 设置显示开始行
 8001222:	2040      	movs	r0, #64	@ 0x40
 8001224:	f7ff fe28 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xA1); // 设置左右方向，0xA1正常 0xA0左右反置
 8001228:	20a1      	movs	r0, #161	@ 0xa1
 800122a:	f7ff fe25 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xC8); // 设置上下方向，0xC8正常 0xC0上下反置
 800122e:	20c8      	movs	r0, #200	@ 0xc8
 8001230:	f7ff fe22 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA); // 设置COM引脚硬件配置
 8001234:	20da      	movs	r0, #218	@ 0xda
 8001236:	f7ff fe1f 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 800123a:	2012      	movs	r0, #18
 800123c:	f7ff fe1c 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0x81); // 设置对比度控制
 8001240:	2081      	movs	r0, #129	@ 0x81
 8001242:	f7ff fe19 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8001246:	20cf      	movs	r0, #207	@ 0xcf
 8001248:	f7ff fe16 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9); // 设置预充电周期
 800124c:	20d9      	movs	r0, #217	@ 0xd9
 800124e:	f7ff fe13 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8001252:	20f1      	movs	r0, #241	@ 0xf1
 8001254:	f7ff fe10 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB); // 设置VCOMH取消选择级别
 8001258:	20db      	movs	r0, #219	@ 0xdb
 800125a:	f7ff fe0d 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800125e:	2030      	movs	r0, #48	@ 0x30
 8001260:	f7ff fe0a 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4); // 设置整个显示打开/关闭
 8001264:	20a4      	movs	r0, #164	@ 0xa4
 8001266:	f7ff fe07 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6); // 设置正常/倒转显示
 800126a:	20a6      	movs	r0, #166	@ 0xa6
 800126c:	f7ff fe04 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D); // 设置充电泵
 8001270:	208d      	movs	r0, #141	@ 0x8d
 8001272:	f7ff fe01 	bl	8000e78 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8001276:	2014      	movs	r0, #20
 8001278:	f7ff fdfe 	bl	8000e78 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF); // 开启显示
 800127c:	20af      	movs	r0, #175	@ 0xaf
 800127e:	f7ff fdfb 	bl	8000e78 <OLED_WriteCommand>

	OLED_Clear(); // OLED清屏
 8001282:	f7ff fe53 	bl	8000f2c <OLED_Clear>
}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}

0800128e <Get_Bcc_Value>:
uint8_t ReadData_NOICRespond[7];

/**
 * 获取校验码的值
 */
uint8_t Get_Bcc_Value(uint8_t* arr, uint8_t size) {
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	000a      	movs	r2, r1
 8001298:	1cfb      	adds	r3, r7, #3
 800129a:	701a      	strb	r2, [r3, #0]
    uint8_t result = arr[0];
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	701a      	strb	r2, [r3, #0]

    for (int i = 1; i < size; i++) {
 80012a6:	2301      	movs	r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	e00c      	b.n	80012c6 <Get_Bcc_Value+0x38>
        result ^= arr[i];
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	7819      	ldrb	r1, [r3, #0]
 80012b4:	220f      	movs	r2, #15
 80012b6:	18bb      	adds	r3, r7, r2
 80012b8:	18ba      	adds	r2, r7, r2
 80012ba:	7812      	ldrb	r2, [r2, #0]
 80012bc:	404a      	eors	r2, r1
 80012be:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < size; i++) {
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3301      	adds	r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	1cfb      	adds	r3, r7, #3
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbed      	blt.n	80012ac <Get_Bcc_Value+0x1e>
    }

    // 异或取反
    result = ~result;
 80012d0:	210f      	movs	r1, #15
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	187a      	adds	r2, r7, r1
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	43d2      	mvns	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]
    return result;
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	781b      	ldrb	r3, [r3, #0]
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <insert_section_key>:
 * @param command_write_data 指向命令写入数据缓冲区的指针，该缓冲区应有足够的空间容纳插入的分区密钥
 * @param section_key 指向分区密钥的指针，该密钥将被插入到命令写入数据中
 * @return null
 */
void insert_section_key(uint8_t* command_write_data, uint8_t* section_key)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    memcpy(command_write_data + 7, section_key, 6);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3307      	adds	r3, #7
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	2206      	movs	r2, #6
 80012fa:	0018      	movs	r0, r3
 80012fc:	f002 fd90 	bl	8003e20 <memcpy>
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}

08001308 <USART_SendArray>:

void USART_SendArray(uint8_t* array,uint8_t size)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	000a      	movs	r2, r1
 8001312:	1cfb      	adds	r3, r7, #3
 8001314:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, array, size, 100);
 8001316:	1cfb      	adds	r3, r7, #3
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b29a      	uxth	r2, r3
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4804      	ldr	r0, [pc, #16]	@ (8001330 <USART_SendArray+0x28>)
 8001320:	2364      	movs	r3, #100	@ 0x64
 8001322:	f002 f811 	bl	8003348 <HAL_UART_Transmit>
}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	2000021c 	.word	0x2000021c

08001334 <USART_ReceiveArray>:

void USART_ReceiveArray(uint8_t* array, uint8_t size)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	000a      	movs	r2, r1
 800133e:	1cfb      	adds	r3, r7, #3
 8001340:	701a      	strb	r2, [r3, #0]
	memset(array,0,size);
 8001342:	1cfb      	adds	r3, r7, #3
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2100      	movs	r1, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f002 fd3c 	bl	8003dc8 <memset>
	uint8_t count = 0;
 8001350:	230f      	movs	r3, #15
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
    while(count < size)
 8001358:	e00e      	b.n	8001378 <USART_ReceiveArray+0x44>
    {
        HAL_UART_Receive(&huart1 , array + count, 1, 100);
 800135a:	240f      	movs	r4, #15
 800135c:	193b      	adds	r3, r7, r4
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	480a      	ldr	r0, [pc, #40]	@ (8001390 <USART_ReceiveArray+0x5c>)
 8001366:	2364      	movs	r3, #100	@ 0x64
 8001368:	2201      	movs	r2, #1
 800136a:	f002 f88d 	bl	8003488 <HAL_UART_Receive>
        count++;
 800136e:	193b      	adds	r3, r7, r4
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	193b      	adds	r3, r7, r4
 8001374:	3201      	adds	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
    while(count < size)
 8001378:	230f      	movs	r3, #15
 800137a:	18fa      	adds	r2, r7, r3
 800137c:	1cfb      	adds	r3, r7, #3
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d3e9      	bcc.n	800135a <USART_ReceiveArray+0x26>
    }
}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	46c0      	nop			@ (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b005      	add	sp, #20
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	2000021c 	.word	0x2000021c

08001394 <USART_ReceiveData>:

void USART_ReceiveData(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0

    uint8_t size = 0;
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive(&huart1,&size, 1, 100);
 80013a0:	1df9      	adds	r1, r7, #7
 80013a2:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <USART_ReceiveData+0x54>)
 80013a4:	2364      	movs	r3, #100	@ 0x64
 80013a6:	2201      	movs	r2, #1
 80013a8:	f002 f86e 	bl	8003488 <HAL_UART_Receive>
	if (size == 0x07)
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b07      	cmp	r3, #7
 80013b2:	d109      	bne.n	80013c8 <USART_ReceiveData+0x34>
    {
        ReadData_NOICRespond[0] = size;
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <USART_ReceiveData+0x58>)
 80013ba:	701a      	strb	r2, [r3, #0]
        USART_ReceiveArray(ReadData_NOICRespond + 1, 6);
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <USART_ReceiveData+0x5c>)
 80013be:	2106      	movs	r1, #6
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff ffb7 	bl	8001334 <USART_ReceiveArray>
    {
        ReadData_HaveICRespond[0] = size;
        USART_ReceiveArray(ReadData_HaveICRespond + 1, 28);
        IsReadDataFlag = 1;
    }
}
 80013c6:	e00b      	b.n	80013e0 <USART_ReceiveData+0x4c>
        ReadData_HaveICRespond[0] = size;
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <USART_ReceiveData+0x60>)
 80013ce:	701a      	strb	r2, [r3, #0]
        USART_ReceiveArray(ReadData_HaveICRespond + 1, 28);
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <USART_ReceiveData+0x64>)
 80013d2:	211c      	movs	r1, #28
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff ffad 	bl	8001334 <USART_ReceiveArray>
        IsReadDataFlag = 1;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <USART_ReceiveData+0x68>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
}
 80013e0:	46c0      	nop			@ (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000021c 	.word	0x2000021c
 80013ec:	200001cc 	.word	0x200001cc
 80013f0:	200001cd 	.word	0x200001cd
 80013f4:	200001ac 	.word	0x200001ac
 80013f8:	200001ad 	.word	0x200001ad
 80013fc:	20000190 	.word	0x20000190

08001400 <RFID_Rc523_Config>:

uint8_t RFID_Rc523_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
    uint8_t Config_State = 0;
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]

    USART_SendArray(Config_ModuleAddr,6);
 800140c:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <RFID_Rc523_Config+0x190>)
 800140e:	2106      	movs	r1, #6
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff ff79 	bl	8001308 <USART_SendArray>
    OLED_ShowHexArray(Config_ModuleAddr, 6, 1);
 8001416:	4b5e      	ldr	r3, [pc, #376]	@ (8001590 <RFID_Rc523_Config+0x190>)
 8001418:	2201      	movs	r2, #1
 800141a:	2106      	movs	r1, #6
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fe9c 	bl	800115a <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8001422:	4b5c      	ldr	r3, [pc, #368]	@ (8001594 <RFID_Rc523_Config+0x194>)
 8001424:	2106      	movs	r1, #6
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff ff84 	bl	8001334 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 2);
 800142c:	4b59      	ldr	r3, [pc, #356]	@ (8001594 <RFID_Rc523_Config+0x194>)
 800142e:	2202      	movs	r2, #2
 8001430:	2106      	movs	r1, #6
 8001432:	0018      	movs	r0, r3
 8001434:	f7ff fe91 	bl	800115a <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8001438:	4b56      	ldr	r3, [pc, #344]	@ (8001594 <RFID_Rc523_Config+0x194>)
 800143a:	78d9      	ldrb	r1, [r3, #3]
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	1dfa      	adds	r2, r7, #7
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]

    USART_SendArray(Config_ICType,6);
 8001446:	4b54      	ldr	r3, [pc, #336]	@ (8001598 <RFID_Rc523_Config+0x198>)
 8001448:	2106      	movs	r1, #6
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ff5c 	bl	8001308 <USART_SendArray>
    OLED_ShowHexArray(Config_ICType, 6, 3);
 8001450:	4b51      	ldr	r3, [pc, #324]	@ (8001598 <RFID_Rc523_Config+0x198>)
 8001452:	2203      	movs	r2, #3
 8001454:	2106      	movs	r1, #6
 8001456:	0018      	movs	r0, r3
 8001458:	f7ff fe7f 	bl	800115a <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 800145c:	4b4d      	ldr	r3, [pc, #308]	@ (8001594 <RFID_Rc523_Config+0x194>)
 800145e:	2106      	movs	r1, #6
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ff67 	bl	8001334 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 8001466:	4b4b      	ldr	r3, [pc, #300]	@ (8001594 <RFID_Rc523_Config+0x194>)
 8001468:	2204      	movs	r2, #4
 800146a:	2106      	movs	r1, #6
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff fe74 	bl	800115a <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 8001472:	4b48      	ldr	r3, [pc, #288]	@ (8001594 <RFID_Rc523_Config+0x194>)
 8001474:	78d9      	ldrb	r1, [r3, #3]
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	1dfa      	adds	r2, r7, #7
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 8001480:	4b46      	ldr	r3, [pc, #280]	@ (800159c <RFID_Rc523_Config+0x19c>)
 8001482:	0018      	movs	r0, r3
 8001484:	f000 faf6 	bl	8001a74 <HAL_Delay>

    USART_SendArray(Config_AutoReadID,6);
 8001488:	4b45      	ldr	r3, [pc, #276]	@ (80015a0 <RFID_Rc523_Config+0x1a0>)
 800148a:	2106      	movs	r1, #6
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff3b 	bl	8001308 <USART_SendArray>
    OLED_ShowHexArray(Config_AutoReadID, 6, 1);
 8001492:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <RFID_Rc523_Config+0x1a0>)
 8001494:	2201      	movs	r2, #1
 8001496:	2106      	movs	r1, #6
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fe5e 	bl	800115a <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 800149e:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <RFID_Rc523_Config+0x194>)
 80014a0:	2106      	movs	r1, #6
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff ff46 	bl	8001334 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 2);
 80014a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <RFID_Rc523_Config+0x194>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	2106      	movs	r1, #6
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff fe53 	bl	800115a <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 80014b4:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <RFID_Rc523_Config+0x194>)
 80014b6:	78d9      	ldrb	r1, [r3, #3]
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	1dfa      	adds	r2, r7, #7
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]


    USART_SendArray(Config_FilterCopyCard,6);
 80014c2:	4b38      	ldr	r3, [pc, #224]	@ (80015a4 <RFID_Rc523_Config+0x1a4>)
 80014c4:	2106      	movs	r1, #6
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff ff1e 	bl	8001308 <USART_SendArray>
    OLED_ShowHexArray(Config_FilterCopyCard, 6, 3);
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <RFID_Rc523_Config+0x1a4>)
 80014ce:	2203      	movs	r2, #3
 80014d0:	2106      	movs	r1, #6
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff fe41 	bl	800115a <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 80014d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <RFID_Rc523_Config+0x194>)
 80014da:	2106      	movs	r1, #6
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ff29 	bl	8001334 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 80014e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <RFID_Rc523_Config+0x194>)
 80014e4:	2204      	movs	r2, #4
 80014e6:	2106      	movs	r1, #6
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff fe36 	bl	800115a <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <RFID_Rc523_Config+0x194>)
 80014f0:	78d9      	ldrb	r1, [r3, #3]
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	1dfa      	adds	r2, r7, #7
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 80014fc:	4b27      	ldr	r3, [pc, #156]	@ (800159c <RFID_Rc523_Config+0x19c>)
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 fab8 	bl	8001a74 <HAL_Delay>

    USART_SendArray(Config_ChannelNum,6);
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <RFID_Rc523_Config+0x1a8>)
 8001506:	2106      	movs	r1, #6
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff fefd 	bl	8001308 <USART_SendArray>
    OLED_ShowHexArray(Config_ChannelNum, 6, 1);
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <RFID_Rc523_Config+0x1a8>)
 8001510:	2201      	movs	r2, #1
 8001512:	2106      	movs	r1, #6
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fe20 	bl	800115a <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 800151a:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <RFID_Rc523_Config+0x194>)
 800151c:	2106      	movs	r1, #6
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff ff08 	bl	8001334 <USART_ReceiveArray>
    Config_State |= config_respond[3];
 8001524:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <RFID_Rc523_Config+0x194>)
 8001526:	78d9      	ldrb	r1, [r3, #3]
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	1dfa      	adds	r2, r7, #7
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
    OLED_ShowHexArray(config_respond, 6, 2);
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <RFID_Rc523_Config+0x194>)
 8001534:	2202      	movs	r2, #2
 8001536:	2106      	movs	r1, #6
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff fe0e 	bl	800115a <OLED_ShowHexArray>

    USART_SendArray(Config_SectionPassward,14);
 800153e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <RFID_Rc523_Config+0x1ac>)
 8001540:	210e      	movs	r1, #14
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff fee0 	bl	8001308 <USART_SendArray>
    OLED_ShowHexArray(Config_SectionPassward, 6, 3);
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <RFID_Rc523_Config+0x1ac>)
 800154a:	2203      	movs	r2, #3
 800154c:	2106      	movs	r1, #6
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff fe03 	bl	800115a <OLED_ShowHexArray>
    USART_ReceiveArray(config_respond,6);
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <RFID_Rc523_Config+0x194>)
 8001556:	2106      	movs	r1, #6
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff feeb 	bl	8001334 <USART_ReceiveArray>
    OLED_ShowHexArray(config_respond, 6, 4);
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <RFID_Rc523_Config+0x194>)
 8001560:	2204      	movs	r2, #4
 8001562:	2106      	movs	r1, #6
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fdf8 	bl	800115a <OLED_ShowHexArray>
    Config_State |= config_respond[3];
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <RFID_Rc523_Config+0x194>)
 800156c:	78d9      	ldrb	r1, [r3, #3]
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	1dfa      	adds	r2, r7, #7
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	701a      	strb	r2, [r3, #0]
    HAL_Delay(3000);
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <RFID_Rc523_Config+0x19c>)
 800157a:	0018      	movs	r0, r3
 800157c:	f000 fa7a 	bl	8001a74 <HAL_Delay>
    OLED_Clear();
 8001580:	f7ff fcd4 	bl	8000f2c <OLED_Clear>
    return Config_State;
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000001c 	.word	0x2000001c
 8001594:	200001a4 	.word	0x200001a4
 8001598:	20000024 	.word	0x20000024
 800159c:	00000bb8 	.word	0x00000bb8
 80015a0:	2000002c 	.word	0x2000002c
 80015a4:	20000034 	.word	0x20000034
 80015a8:	2000003c 	.word	0x2000003c
 80015ac:	20000044 	.word	0x20000044

080015b0 <RFID_Rc523_Read_Block>:
 * @param Channel 通信通道号，用于指定通信信道
 * @param blockaddr 数据块地址，用于指定要读取的数据块
 * @param Data 数据缓冲区指针，用于存储读取到的数据块内容
 */
void RFID_Rc523_Read_Block(uint8_t Channel, uint8_t blockaddr, uint8_t* Data)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	603a      	str	r2, [r7, #0]
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	1c02      	adds	r2, r0, #0
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	1dbb      	adds	r3, r7, #6
 80015c0:	1c0a      	adds	r2, r1, #0
 80015c2:	701a      	strb	r2, [r3, #0]
    uint8_t bcc = 0;
 80015c4:	240f      	movs	r4, #15
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
    Command_ReadData[CHANNEL] = Channel;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <RFID_Rc523_Read_Block+0x9c>)
 80015ce:	1dfa      	adds	r2, r7, #7
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	70da      	strb	r2, [r3, #3]
    Command_ReadData[BLOCK] = blockaddr;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <RFID_Rc523_Read_Block+0x9c>)
 80015d6:	1dba      	adds	r2, r7, #6
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	711a      	strb	r2, [r3, #4]
    insert_section_key(Command_ReadData, section_key);
 80015dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001650 <RFID_Rc523_Read_Block+0xa0>)
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <RFID_Rc523_Read_Block+0x9c>)
 80015e0:	0011      	movs	r1, r2
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7ff fe80 	bl	80012e8 <insert_section_key>
    bcc = Get_Bcc_Value(Command_ReadData,13);
 80015e8:	0025      	movs	r5, r4
 80015ea:	193c      	adds	r4, r7, r4
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <RFID_Rc523_Read_Block+0x9c>)
 80015ee:	210d      	movs	r1, #13
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fe4c 	bl	800128e <Get_Bcc_Value>
 80015f6:	0003      	movs	r3, r0
 80015f8:	7023      	strb	r3, [r4, #0]
    Command_ReadData[13] = bcc;
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <RFID_Rc523_Read_Block+0x9c>)
 80015fc:	197a      	adds	r2, r7, r5
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	735a      	strb	r2, [r3, #13]

    USART_SendArray(Command_ReadData,15);
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <RFID_Rc523_Read_Block+0x9c>)
 8001604:	210f      	movs	r1, #15
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fe7e 	bl	8001308 <USART_SendArray>
    USART_ReceiveData();
 800160c:	f7ff fec2 	bl	8001394 <USART_ReceiveData>




    if (IsReadDataFlag)
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <RFID_Rc523_Read_Block+0xa4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <RFID_Rc523_Read_Block+0x7c>
    {
		memcpy(Data,ReadData_HaveICRespond + 11, 16);
 8001618:	490f      	ldr	r1, [pc, #60]	@ (8001658 <RFID_Rc523_Read_Block+0xa8>)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2210      	movs	r2, #16
 800161e:	0018      	movs	r0, r3
 8001620:	f002 fbfe 	bl	8003e20 <memcpy>
//	    OLED_ShowHexArray(Data, 8, 1);
//	    OLED_ShowHexArray(Data + 8, 8, 2);
//	    HAL_Delay(5000);
//	    OLED_Clear();
		IsReadDataFlag = 0;
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <RFID_Rc523_Read_Block+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
	    OLED_ShowHexArray(ReadData_NOICRespond, 8, 1);
	    HAL_Delay(5000);
	    OLED_Clear();
    }

}
 800162a:	e00b      	b.n	8001644 <RFID_Rc523_Read_Block+0x94>
	    OLED_ShowHexArray(ReadData_NOICRespond, 8, 1);
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <RFID_Rc523_Read_Block+0xac>)
 800162e:	2201      	movs	r2, #1
 8001630:	2108      	movs	r1, #8
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff fd91 	bl	800115a <OLED_ShowHexArray>
	    HAL_Delay(5000);
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <RFID_Rc523_Read_Block+0xb0>)
 800163a:	0018      	movs	r0, r3
 800163c:	f000 fa1a 	bl	8001a74 <HAL_Delay>
	    OLED_Clear();
 8001640:	f7ff fc74 	bl	8000f2c <OLED_Clear>
}
 8001644:	46c0      	nop			@ (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b004      	add	sp, #16
 800164a:	bdb0      	pop	{r4, r5, r7, pc}
 800164c:	20000054 	.word	0x20000054
 8001650:	20000014 	.word	0x20000014
 8001654:	20000190 	.word	0x20000190
 8001658:	200001b7 	.word	0x200001b7
 800165c:	200001cc 	.word	0x200001cc
 8001660:	00001388 	.word	0x00001388

08001664 <rfid_read_channel_data>:
//        RFID_Rc523_Write_Block(channel, 1 + 4 * (i-1), (uint8_t*)data + ((i - 1) * 16));
//    }
}

void rfid_read_channel_data(uint8_t channel, Material_Data* data)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	0002      	movs	r2, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	701a      	strb	r2, [r3, #0]
//	    OLED_ShowHexArray((uint8_t*)data + 40, 8, 2);
//	    HAL_Delay(5000);
//	    OLED_Clear();
//    }

	for(uint8_t i = 1; i <= count; i++)
 8001672:	230f      	movs	r3, #15
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e039      	b.n	80016f0 <rfid_read_channel_data+0x8c>
	{
		RFID_Rc523_Read_Block(channel, 1 + 4 * (i - 1),plaintext);
 800167c:	240f      	movs	r4, #15
 800167e:	193b      	adds	r3, r7, r4
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	3b01      	subs	r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	b2db      	uxtb	r3, r3
 800168a:	3301      	adds	r3, #1
 800168c:	b2d9      	uxtb	r1, r3
 800168e:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <rfid_read_channel_data+0xa4>)
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff ff8b 	bl	80015b0 <RFID_Rc523_Read_Block>
	    OLED_ShowHexArray(plaintext, 8, 1);
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <rfid_read_channel_data+0xa4>)
 800169c:	2201      	movs	r2, #1
 800169e:	2108      	movs	r1, #8
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fd5a 	bl	800115a <OLED_ShowHexArray>
	    OLED_ShowHexArray(plaintext + 8, 8, 2);
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <rfid_read_channel_data+0xa8>)
 80016a8:	2202      	movs	r2, #2
 80016aa:	2108      	movs	r1, #8
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fd54 	bl	800115a <OLED_ShowHexArray>

	    HAL_Delay(5000);
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <rfid_read_channel_data+0xac>)
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 f9dd 	bl	8001a74 <HAL_Delay>
	    OLED_Clear();
 80016ba:	f7ff fc37 	bl	8000f2c <OLED_Clear>
		invcipher(plaintext, key);
 80016be:	4a15      	ldr	r2, [pc, #84]	@ (8001714 <rfid_read_channel_data+0xb0>)
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <rfid_read_channel_data+0xa4>)
 80016c2:	0011      	movs	r1, r2
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff f8f3 	bl	80008b0 <invcipher>
		memcpy((uint8_t*)data + ((i - 1) * 16), plaintext, 16);
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	001a      	movs	r2, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	189a      	adds	r2, r3, r2
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <rfid_read_channel_data+0xa4>)
 80016da:	0010      	movs	r0, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	2310      	movs	r3, #16
 80016e0:	001a      	movs	r2, r3
 80016e2:	f002 fb9d 	bl	8003e20 <memcpy>
	for(uint8_t i = 1; i <= count; i++)
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	3201      	adds	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <rfid_read_channel_data+0xb4>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	220f      	movs	r2, #15
 80016f6:	18ba      	adds	r2, r7, r2
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d9be      	bls.n	800167c <rfid_read_channel_data+0x18>
	}
}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b005      	add	sp, #20
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	20000194 	.word	0x20000194
 800170c:	2000019c 	.word	0x2000019c
 8001710:	00001388 	.word	0x00001388
 8001714:	20000004 	.word	0x20000004
 8001718:	20000000 	.word	0x20000000

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_MspInit+0x44>)
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <HAL_MspInit+0x44>)
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <HAL_MspInit+0x44>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2201      	movs	r2, #1
 8001734:	4013      	ands	r3, r2
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_MspInit+0x44>)
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_MspInit+0x44>)
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	0549      	lsls	r1, r1, #21
 8001744:	430a      	orrs	r2, r1
 8001746:	61da      	str	r2, [r3, #28]
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_MspInit+0x44>)
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	2380      	movs	r3, #128	@ 0x80
 800174e:	055b      	lsls	r3, r3, #21
 8001750:	4013      	ands	r3, r2
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	b08c      	sub	sp, #48	@ 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001774:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <HAL_InitTick+0xf4>)
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HAL_InitTick+0xf4>)
 800177a:	2180      	movs	r1, #128	@ 0x80
 800177c:	0109      	lsls	r1, r1, #4
 800177e:	430a      	orrs	r2, r1
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <HAL_InitTick+0xf4>)
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4013      	ands	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001790:	230c      	movs	r3, #12
 8001792:	18fa      	adds	r2, r7, r3
 8001794:	2410      	movs	r4, #16
 8001796:	193b      	adds	r3, r7, r4
 8001798:	0011      	movs	r1, r2
 800179a:	0018      	movs	r0, r3
 800179c:	f001 fa02 	bl	8002ba4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ac:	f001 f9e4 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 80017b0:	0003      	movs	r3, r0
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017b4:	e004      	b.n	80017c0 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017b6:	f001 f9df 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 80017ba:	0003      	movs	r3, r0
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c2:	4926      	ldr	r1, [pc, #152]	@ (800185c <HAL_InitTick+0xf8>)
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7fe fc9f 	bl	8000108 <__udivsi3>
 80017ca:	0003      	movs	r3, r0
 80017cc:	3b01      	subs	r3, #1
 80017ce:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017d0:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <HAL_InitTick+0xfc>)
 80017d2:	4a24      	ldr	r2, [pc, #144]	@ (8001864 <HAL_InitTick+0x100>)
 80017d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_InitTick+0xfc>)
 80017d8:	4a23      	ldr	r2, [pc, #140]	@ (8001868 <HAL_InitTick+0x104>)
 80017da:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_InitTick+0xfc>)
 80017de:	6a3a      	ldr	r2, [r7, #32]
 80017e0:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_InitTick+0xfc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_InitTick+0xfc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_InitTick+0xfc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80017f4:	252b      	movs	r5, #43	@ 0x2b
 80017f6:	197c      	adds	r4, r7, r5
 80017f8:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_InitTick+0xfc>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f001 fafa 	bl	8002df4 <HAL_TIM_Base_Init>
 8001800:	0003      	movs	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001804:	197b      	adds	r3, r7, r5
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d11e      	bne.n	800184a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800180c:	197c      	adds	r4, r7, r5
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <HAL_InitTick+0xfc>)
 8001810:	0018      	movs	r0, r3
 8001812:	f001 fb47 	bl	8002ea4 <HAL_TIM_Base_Start_IT>
 8001816:	0003      	movs	r3, r0
 8001818:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800181a:	197b      	adds	r3, r7, r5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d113      	bne.n	800184a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001822:	200d      	movs	r0, #13
 8001824:	f000 f9e7 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d809      	bhi.n	8001842 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	0019      	movs	r1, r3
 8001834:	200d      	movs	r0, #13
 8001836:	f000 f9c9 	bl	8001bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183a:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <HAL_InitTick+0x108>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e003      	b.n	800184a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8001842:	232b      	movs	r3, #43	@ 0x2b
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800184a:	232b      	movs	r3, #43	@ 0x2b
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b00c      	add	sp, #48	@ 0x30
 8001856:	bdb0      	pop	{r4, r5, r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	000f4240 	.word	0x000f4240
 8001860:	200001d4 	.word	0x200001d4
 8001864:	40012c00 	.word	0x40012c00
 8001868:	000003e7 	.word	0x000003e7
 800186c:	20000068 	.word	0x20000068

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001874:	46c0      	nop			@ (mov r8, r8)
 8001876:	e7fd      	b.n	8001874 <NMI_Handler+0x4>

08001878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	e7fd      	b.n	800187c <HardFault_Handler+0x4>

08001880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f001 fb4e 	bl	8002f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80018ac:	46c0      	nop			@ (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	200001d4 	.word	0x200001d4

080018b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	@ (8001920 <MX_USART1_UART_Init+0x5c>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018d0:	22e1      	movs	r2, #225	@ 0xe1
 80018d2:	0252      	lsls	r2, r2, #9
 80018d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <MX_USART1_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_USART1_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <MX_USART1_UART_Init+0x58>)
 8001908:	0018      	movs	r0, r3
 800190a:	f001 fcc9 	bl	80032a0 <HAL_UART_Init>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d001      	beq.n	8001916 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001912:	f7ff f9f5 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2000021c 	.word	0x2000021c
 8001920:	40013800 	.word	0x40013800

08001924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b08b      	sub	sp, #44	@ 0x2c
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	2414      	movs	r4, #20
 800192e:	193b      	adds	r3, r7, r4
 8001930:	0018      	movs	r0, r3
 8001932:	2314      	movs	r3, #20
 8001934:	001a      	movs	r2, r3
 8001936:	2100      	movs	r1, #0
 8001938:	f002 fa46 	bl	8003dc8 <memset>
  if(uartHandle->Instance==USART1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1d      	ldr	r2, [pc, #116]	@ (80019b8 <HAL_UART_MspInit+0x94>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d133      	bne.n	80019ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001946:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_UART_MspInit+0x98>)
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <HAL_UART_MspInit+0x98>)
 800194c:	2180      	movs	r1, #128	@ 0x80
 800194e:	01c9      	lsls	r1, r1, #7
 8001950:	430a      	orrs	r2, r1
 8001952:	619a      	str	r2, [r3, #24]
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_UART_MspInit+0x98>)
 8001956:	699a      	ldr	r2, [r3, #24]
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	01db      	lsls	r3, r3, #7
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_UART_MspInit+0x98>)
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <HAL_UART_MspInit+0x98>)
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	0289      	lsls	r1, r1, #10
 800196c:	430a      	orrs	r2, r1
 800196e:	615a      	str	r2, [r3, #20]
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_UART_MspInit+0x98>)
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	029b      	lsls	r3, r3, #10
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800197e:	193b      	adds	r3, r7, r4
 8001980:	22c0      	movs	r2, #192	@ 0xc0
 8001982:	00d2      	lsls	r2, r2, #3
 8001984:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	0021      	movs	r1, r4
 8001988:	187b      	adds	r3, r7, r1
 800198a:	2202      	movs	r2, #2
 800198c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	187b      	adds	r3, r7, r1
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001994:	187b      	adds	r3, r7, r1
 8001996:	2203      	movs	r2, #3
 8001998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800199a:	187b      	adds	r3, r7, r1
 800199c:	2201      	movs	r2, #1
 800199e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	187a      	adds	r2, r7, r1
 80019a2:	2390      	movs	r3, #144	@ 0x90
 80019a4:	05db      	lsls	r3, r3, #23
 80019a6:	0011      	movs	r1, r2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 f935 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b00b      	add	sp, #44	@ 0x2c
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	40013800 	.word	0x40013800
 80019bc:	40021000 	.word	0x40021000

080019c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c0:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c4:	f7ff ff78 	bl	80018b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480c      	ldr	r0, [pc, #48]	@ (80019fc <LoopForever+0x6>)
  ldr r1, =_edata
 80019ca:	490d      	ldr	r1, [pc, #52]	@ (8001a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <LoopForever+0xe>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e0:	4c0a      	ldr	r4, [pc, #40]	@ (8001a0c <LoopForever+0x16>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ee:	f002 f9f3 	bl	8003dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019f2:	f7ff f86b 	bl	8000acc <main>

080019f6 <LoopForever>:

LoopForever:
    b LoopForever
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
  ldr   r0, =_estack
 80019f8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a04:	080046a4 	.word	0x080046a4
  ldr r2, =_sbss
 8001a08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a0c:	200002a8 	.word	0x200002a8

08001a10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC1_COMP_IRQHandler>
	...

08001a14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <HAL_Init+0x24>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_Init+0x24>)
 8001a1e:	2110      	movs	r1, #16
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f7ff fe9d 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2a:	f7ff fe77 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	40022000 	.word	0x40022000

08001a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_IncTick+0x1c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	001a      	movs	r2, r3
 8001a46:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	18d2      	adds	r2, r2, r3
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	2000006c 	.word	0x2000006c
 8001a5c:	200002a4 	.word	0x200002a4

08001a60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b02      	ldr	r3, [pc, #8]	@ (8001a70 <HAL_GetTick+0x10>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	200002a4 	.word	0x200002a4

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff fff0 	bl	8001a60 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	001a      	movs	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	189b      	adds	r3, r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	f7ff ffe0 	bl	8001a60 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b004      	add	sp, #16
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	2000006c 	.word	0x2000006c

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	1dfb      	adds	r3, r7, #7
 8001ac6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ace:	d809      	bhi.n	8001ae4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	231f      	movs	r3, #31
 8001ad8:	401a      	ands	r2, r3
 8001ada:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <__NVIC_EnableIRQ+0x30>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	4091      	lsls	r1, r2
 8001ae0:	000a      	movs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
  }
}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	0002      	movs	r2, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b04:	d828      	bhi.n	8001b58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b06:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc4 <__NVIC_SetPriority+0xd4>)
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b25b      	sxtb	r3, r3
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	33c0      	adds	r3, #192	@ 0xc0
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	589b      	ldr	r3, [r3, r2]
 8001b16:	1dfa      	adds	r2, r7, #7
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	400a      	ands	r2, r1
 8001b20:	00d2      	lsls	r2, r2, #3
 8001b22:	21ff      	movs	r1, #255	@ 0xff
 8001b24:	4091      	lsls	r1, r2
 8001b26:	000a      	movs	r2, r1
 8001b28:	43d2      	mvns	r2, r2
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	22ff      	movs	r2, #255	@ 0xff
 8001b34:	401a      	ands	r2, r3
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	4003      	ands	r3, r0
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b44:	481f      	ldr	r0, [pc, #124]	@ (8001bc4 <__NVIC_SetPriority+0xd4>)
 8001b46:	1dfb      	adds	r3, r7, #7
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	33c0      	adds	r3, #192	@ 0xc0
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b56:	e031      	b.n	8001bbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b58:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc8 <__NVIC_SetPriority+0xd8>)
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	0019      	movs	r1, r3
 8001b60:	230f      	movs	r3, #15
 8001b62:	400b      	ands	r3, r1
 8001b64:	3b08      	subs	r3, #8
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3306      	adds	r3, #6
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	18d3      	adds	r3, r2, r3
 8001b6e:	3304      	adds	r3, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1dfa      	adds	r2, r7, #7
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	0011      	movs	r1, r2
 8001b78:	2203      	movs	r2, #3
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	00d2      	lsls	r2, r2, #3
 8001b7e:	21ff      	movs	r1, #255	@ 0xff
 8001b80:	4091      	lsls	r1, r2
 8001b82:	000a      	movs	r2, r1
 8001b84:	43d2      	mvns	r2, r2
 8001b86:	401a      	ands	r2, r3
 8001b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	22ff      	movs	r2, #255	@ 0xff
 8001b90:	401a      	ands	r2, r3
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	0018      	movs	r0, r3
 8001b98:	2303      	movs	r3, #3
 8001b9a:	4003      	ands	r3, r0
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba0:	4809      	ldr	r0, [pc, #36]	@ (8001bc8 <__NVIC_SetPriority+0xd8>)
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	001c      	movs	r4, r3
 8001ba8:	230f      	movs	r3, #15
 8001baa:	4023      	ands	r3, r4
 8001bac:	3b08      	subs	r3, #8
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	3306      	adds	r3, #6
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	18c3      	adds	r3, r0, r3
 8001bb8:	3304      	adds	r3, #4
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b003      	add	sp, #12
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	1c02      	adds	r2, r0, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	0011      	movs	r1, r2
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff ff81 	bl	8001af0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b004      	add	sp, #16
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff ff57 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b002      	add	sp, #8
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	e155      	b.n	8001ed4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4091      	lsls	r1, r2
 8001c32:	000a      	movs	r2, r1
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d100      	bne.n	8001c40 <HAL_GPIO_Init+0x28>
 8001c3e:	e146      	b.n	8001ece <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2203      	movs	r2, #3
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d005      	beq.n	8001c58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2203      	movs	r2, #3
 8001c52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	409a      	lsls	r2, r3
 8001c66:	0013      	movs	r3, r2
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	43da      	mvns	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d017      	beq.n	8001cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d123      	bne.n	8001d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	58d3      	ldr	r3, [r2, r3]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2207      	movs	r2, #7
 8001d14:	4013      	ands	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2107      	movs	r1, #7
 8001d2e:	400b      	ands	r3, r1
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	409a      	lsls	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	6939      	ldr	r1, [r7, #16]
 8001d48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	409a      	lsls	r2, r3
 8001d58:	0013      	movs	r3, r2
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2203      	movs	r2, #3
 8001d68:	401a      	ands	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	23c0      	movs	r3, #192	@ 0xc0
 8001d84:	029b      	lsls	r3, r3, #10
 8001d86:	4013      	ands	r3, r2
 8001d88:	d100      	bne.n	8001d8c <HAL_GPIO_Init+0x174>
 8001d8a:	e0a0      	b.n	8001ece <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8c:	4b57      	ldr	r3, [pc, #348]	@ (8001eec <HAL_GPIO_Init+0x2d4>)
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	4b56      	ldr	r3, [pc, #344]	@ (8001eec <HAL_GPIO_Init+0x2d4>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	619a      	str	r2, [r3, #24]
 8001d98:	4b54      	ldr	r3, [pc, #336]	@ (8001eec <HAL_GPIO_Init+0x2d4>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001da4:	4a52      	ldr	r2, [pc, #328]	@ (8001ef0 <HAL_GPIO_Init+0x2d8>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	589b      	ldr	r3, [r3, r2]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4013      	ands	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	2390      	movs	r3, #144	@ 0x90
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a47      	ldr	r2, [pc, #284]	@ (8001ef4 <HAL_GPIO_Init+0x2dc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x1ea>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a46      	ldr	r2, [pc, #280]	@ (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x1e6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a45      	ldr	r2, [pc, #276]	@ (8001efc <HAL_GPIO_Init+0x2e4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x1e2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a44      	ldr	r2, [pc, #272]	@ (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x1de>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e008      	b.n	8001e08 <HAL_GPIO_Init+0x1f0>
 8001df6:	2305      	movs	r3, #5
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x1f0>
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e004      	b.n	8001e08 <HAL_GPIO_Init+0x1f0>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_Init+0x1f0>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x1f0>
 8001e06:	2300      	movs	r3, #0
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	2103      	movs	r1, #3
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	4093      	lsls	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e18:	4935      	ldr	r1, [pc, #212]	@ (8001ef0 <HAL_GPIO_Init+0x2d8>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e26:	4b37      	ldr	r3, [pc, #220]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	2380      	movs	r3, #128	@ 0x80
 8001e3c:	035b      	lsls	r3, r3, #13
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e50:	4b2c      	ldr	r3, [pc, #176]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	039b      	lsls	r3, r3, #14
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001e7a:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43da      	mvns	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	2380      	movs	r3, #128	@ 0x80
 8001e90:	029b      	lsls	r3, r3, #10
 8001e92:	4013      	ands	r3, r2
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43da      	mvns	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	40da      	lsrs	r2, r3
 8001edc:	1e13      	subs	r3, r2, #0
 8001ede:	d000      	beq.n	8001ee2 <HAL_GPIO_Init+0x2ca>
 8001ee0:	e6a2      	b.n	8001c28 <HAL_GPIO_Init+0x10>
  } 
}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b006      	add	sp, #24
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	48000400 	.word	0x48000400
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	48000c00 	.word	0x48000c00
 8001f00:	48001000 	.word	0x48001000
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	0008      	movs	r0, r1
 8001f12:	0011      	movs	r1, r2
 8001f14:	1cbb      	adds	r3, r7, #2
 8001f16:	1c02      	adds	r2, r0, #0
 8001f18:	801a      	strh	r2, [r3, #0]
 8001f1a:	1c7b      	adds	r3, r7, #1
 8001f1c:	1c0a      	adds	r2, r1, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f20:	1c7b      	adds	r3, r7, #1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f28:	1cbb      	adds	r3, r7, #2
 8001f2a:	881a      	ldrh	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f32:	1cbb      	adds	r3, r7, #2
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e08f      	b.n	8002076 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2241      	movs	r2, #65	@ 0x41
 8001f5a:	5c9b      	ldrb	r3, [r3, r2]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d107      	bne.n	8001f72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2240      	movs	r2, #64	@ 0x40
 8001f66:	2100      	movs	r1, #0
 8001f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7fe fd5f 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2241      	movs	r2, #65	@ 0x41
 8001f76:	2124      	movs	r1, #36	@ 0x24
 8001f78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	438a      	bics	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	493b      	ldr	r1, [pc, #236]	@ (8002080 <HAL_I2C_Init+0x13c>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4938      	ldr	r1, [pc, #224]	@ (8002084 <HAL_I2C_Init+0x140>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2180      	movs	r1, #128	@ 0x80
 8001fba:	0209      	lsls	r1, r1, #8
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e007      	b.n	8001fd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2184      	movs	r1, #132	@ 0x84
 8001fcc:	0209      	lsls	r1, r1, #8
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d109      	bne.n	8001fee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	0109      	lsls	r1, r1, #4
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	e007      	b.n	8001ffe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4923      	ldr	r1, [pc, #140]	@ (8002088 <HAL_I2C_Init+0x144>)
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4920      	ldr	r1, [pc, #128]	@ (800208c <HAL_I2C_Init+0x148>)
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	491a      	ldr	r1, [pc, #104]	@ (8002084 <HAL_I2C_Init+0x140>)
 800201a:	400a      	ands	r2, r1
 800201c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	431a      	orrs	r2, r3
 8002028:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69d9      	ldr	r1, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2101      	movs	r1, #1
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2241      	movs	r2, #65	@ 0x41
 8002062:	2120      	movs	r1, #32
 8002064:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2242      	movs	r2, #66	@ 0x42
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	f0ffffff 	.word	0xf0ffffff
 8002084:	ffff7fff 	.word	0xffff7fff
 8002088:	fffff7ff 	.word	0xfffff7ff
 800208c:	02008000 	.word	0x02008000

08002090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2241      	movs	r2, #65	@ 0x41
 800209e:	5c9b      	ldrb	r3, [r3, r2]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d138      	bne.n	8002118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2240      	movs	r2, #64	@ 0x40
 80020aa:	5c9b      	ldrb	r3, [r3, r2]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e032      	b.n	800211a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2240      	movs	r2, #64	@ 0x40
 80020b8:	2101      	movs	r1, #1
 80020ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2241      	movs	r2, #65	@ 0x41
 80020c0:	2124      	movs	r1, #36	@ 0x24
 80020c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2101      	movs	r1, #1
 80020d0:	438a      	bics	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4911      	ldr	r1, [pc, #68]	@ (8002124 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2101      	movs	r1, #1
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2241      	movs	r2, #65	@ 0x41
 8002108:	2120      	movs	r1, #32
 800210a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2240      	movs	r2, #64	@ 0x40
 8002110:	2100      	movs	r1, #0
 8002112:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	ffffefff 	.word	0xffffefff

08002128 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2241      	movs	r2, #65	@ 0x41
 8002136:	5c9b      	ldrb	r3, [r3, r2]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	d139      	bne.n	80021b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2240      	movs	r2, #64	@ 0x40
 8002142:	5c9b      	ldrb	r3, [r3, r2]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002148:	2302      	movs	r3, #2
 800214a:	e033      	b.n	80021b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	@ 0x40
 8002150:	2101      	movs	r1, #1
 8002152:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2241      	movs	r2, #65	@ 0x41
 8002158:	2124      	movs	r1, #36	@ 0x24
 800215a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2101      	movs	r1, #1
 8002168:	438a      	bics	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002178:	4013      	ands	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2241      	movs	r2, #65	@ 0x41
 80021a2:	2120      	movs	r1, #32
 80021a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2240      	movs	r2, #64	@ 0x40
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
  }
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b004      	add	sp, #16
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	fffff0ff 	.word	0xfffff0ff

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f000 fb76 	bl	80028c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2201      	movs	r2, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	d100      	bne.n	80021e0 <HAL_RCC_OscConfig+0x20>
 80021de:	e08e      	b.n	80022fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021e0:	4bc5      	ldr	r3, [pc, #788]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	220c      	movs	r2, #12
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d00e      	beq.n	800220a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ec:	4bc2      	ldr	r3, [pc, #776]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	220c      	movs	r2, #12
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d117      	bne.n	8002228 <HAL_RCC_OscConfig+0x68>
 80021f8:	4bbf      	ldr	r3, [pc, #764]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	23c0      	movs	r3, #192	@ 0xc0
 80021fe:	025b      	lsls	r3, r3, #9
 8002200:	401a      	ands	r2, r3
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	025b      	lsls	r3, r3, #9
 8002206:	429a      	cmp	r2, r3
 8002208:	d10e      	bne.n	8002228 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220a:	4bbb      	ldr	r3, [pc, #748]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d100      	bne.n	8002218 <HAL_RCC_OscConfig+0x58>
 8002216:	e071      	b.n	80022fc <HAL_RCC_OscConfig+0x13c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d000      	beq.n	8002222 <HAL_RCC_OscConfig+0x62>
 8002220:	e06c      	b.n	80022fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	f000 fb4c 	bl	80028c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x80>
 8002230:	4bb1      	ldr	r3, [pc, #708]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4bb0      	ldr	r3, [pc, #704]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002236:	2180      	movs	r1, #128	@ 0x80
 8002238:	0249      	lsls	r1, r1, #9
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e02f      	b.n	80022a0 <HAL_RCC_OscConfig+0xe0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_OscConfig+0xa2>
 8002248:	4bab      	ldr	r3, [pc, #684]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4baa      	ldr	r3, [pc, #680]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800224e:	49ab      	ldr	r1, [pc, #684]	@ (80024fc <HAL_RCC_OscConfig+0x33c>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	4ba8      	ldr	r3, [pc, #672]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4ba7      	ldr	r3, [pc, #668]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800225a:	49a9      	ldr	r1, [pc, #676]	@ (8002500 <HAL_RCC_OscConfig+0x340>)
 800225c:	400a      	ands	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e01e      	b.n	80022a0 <HAL_RCC_OscConfig+0xe0>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d10e      	bne.n	8002288 <HAL_RCC_OscConfig+0xc8>
 800226a:	4ba3      	ldr	r3, [pc, #652]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4ba2      	ldr	r3, [pc, #648]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	02c9      	lsls	r1, r1, #11
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	4b9f      	ldr	r3, [pc, #636]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b9e      	ldr	r3, [pc, #632]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800227e:	2180      	movs	r1, #128	@ 0x80
 8002280:	0249      	lsls	r1, r1, #9
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xe0>
 8002288:	4b9b      	ldr	r3, [pc, #620]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b9a      	ldr	r3, [pc, #616]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800228e:	499b      	ldr	r1, [pc, #620]	@ (80024fc <HAL_RCC_OscConfig+0x33c>)
 8002290:	400a      	ands	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	4b98      	ldr	r3, [pc, #608]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b97      	ldr	r3, [pc, #604]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800229a:	4999      	ldr	r1, [pc, #612]	@ (8002500 <HAL_RCC_OscConfig+0x340>)
 800229c:	400a      	ands	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d014      	beq.n	80022d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fbda 	bl	8001a60 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b2:	f7ff fbd5 	bl	8001a60 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	@ 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e2fd      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c4:	4b8c      	ldr	r3, [pc, #560]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	4013      	ands	r3, r2
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0xf2>
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff fbc5 	bl	8001a60 <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fbc0 	bl	8001a60 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e2e8      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	4b82      	ldr	r3, [pc, #520]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	029b      	lsls	r3, r3, #10
 80022f6:	4013      	ands	r3, r2
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x11c>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2202      	movs	r2, #2
 8002304:	4013      	ands	r3, r2
 8002306:	d100      	bne.n	800230a <HAL_RCC_OscConfig+0x14a>
 8002308:	e06c      	b.n	80023e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800230a:	4b7b      	ldr	r3, [pc, #492]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	220c      	movs	r2, #12
 8002310:	4013      	ands	r3, r2
 8002312:	d00e      	beq.n	8002332 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002314:	4b78      	ldr	r3, [pc, #480]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	220c      	movs	r2, #12
 800231a:	4013      	ands	r3, r2
 800231c:	2b08      	cmp	r3, #8
 800231e:	d11f      	bne.n	8002360 <HAL_RCC_OscConfig+0x1a0>
 8002320:	4b75      	ldr	r3, [pc, #468]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	23c0      	movs	r3, #192	@ 0xc0
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	401a      	ands	r2, r3
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	429a      	cmp	r2, r3
 8002330:	d116      	bne.n	8002360 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	4b71      	ldr	r3, [pc, #452]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2202      	movs	r2, #2
 8002338:	4013      	ands	r3, r2
 800233a:	d005      	beq.n	8002348 <HAL_RCC_OscConfig+0x188>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e2bb      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b6b      	ldr	r3, [pc, #428]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	22f8      	movs	r2, #248	@ 0xf8
 800234e:	4393      	bics	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00da      	lsls	r2, r3, #3
 8002358:	4b67      	ldr	r3, [pc, #412]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	e041      	b.n	80023e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d024      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002368:	4b63      	ldr	r3, [pc, #396]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b62      	ldr	r3, [pc, #392]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800236e:	2101      	movs	r1, #1
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fb74 	bl	8001a60 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237e:	f7ff fb6f 	bl	8001a60 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e297      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	4b59      	ldr	r3, [pc, #356]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d0f1      	beq.n	800237e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b57      	ldr	r3, [pc, #348]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	22f8      	movs	r2, #248	@ 0xf8
 80023a0:	4393      	bics	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	00da      	lsls	r2, r3, #3
 80023aa:	4b53      	ldr	r3, [pc, #332]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e018      	b.n	80023e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b51      	ldr	r3, [pc, #324]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b50      	ldr	r3, [pc, #320]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	438a      	bics	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff fb4f 	bl	8001a60 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7ff fb4a 	bl	8001a60 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e272      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d1f1      	bne.n	80023c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2208      	movs	r2, #8
 80023ea:	4013      	ands	r3, r2
 80023ec:	d036      	beq.n	800245c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d019      	beq.n	800242a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f6:	4b40      	ldr	r3, [pc, #256]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80023f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fa:	4b3f      	ldr	r3, [pc, #252]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80023fc:	2101      	movs	r1, #1
 80023fe:	430a      	orrs	r2, r1
 8002400:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7ff fb2d 	bl	8001a60 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fb28 	bl	8001a60 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e250      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	4b36      	ldr	r3, [pc, #216]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	2202      	movs	r2, #2
 8002424:	4013      	ands	r3, r2
 8002426:	d0f1      	beq.n	800240c <HAL_RCC_OscConfig+0x24c>
 8002428:	e018      	b.n	800245c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242a:	4b33      	ldr	r3, [pc, #204]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800242c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800242e:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002430:	2101      	movs	r1, #1
 8002432:	438a      	bics	r2, r1
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff fb13 	bl	8001a60 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002440:	f7ff fb0e 	bl	8001a60 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e236      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002452:	4b29      	ldr	r3, [pc, #164]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d1f1      	bne.n	8002440 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2204      	movs	r2, #4
 8002462:	4013      	ands	r3, r2
 8002464:	d100      	bne.n	8002468 <HAL_RCC_OscConfig+0x2a8>
 8002466:	e0b5      	b.n	80025d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002468:	201f      	movs	r0, #31
 800246a:	183b      	adds	r3, r7, r0
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002470:	4b21      	ldr	r3, [pc, #132]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	055b      	lsls	r3, r3, #21
 8002478:	4013      	ands	r3, r2
 800247a:	d110      	bne.n	800249e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002482:	2180      	movs	r1, #128	@ 0x80
 8002484:	0549      	lsls	r1, r1, #21
 8002486:	430a      	orrs	r2, r1
 8002488:	61da      	str	r2, [r3, #28]
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	055b      	lsls	r3, r3, #21
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002498:	183b      	adds	r3, r7, r0
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_OscConfig+0x344>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d11a      	bne.n	80024e0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <HAL_RCC_OscConfig+0x344>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_RCC_OscConfig+0x344>)
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	0049      	lsls	r1, r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b8:	f7ff fad2 	bl	8001a60 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7ff facd 	bl	8001a60 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	@ 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1f5      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_OscConfig+0x344>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10f      	bne.n	8002508 <HAL_RCC_OscConfig+0x348>
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80024ea:	6a1a      	ldr	r2, [r3, #32]
 80024ec:	4b02      	ldr	r3, [pc, #8]	@ (80024f8 <HAL_RCC_OscConfig+0x338>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	430a      	orrs	r2, r1
 80024f2:	621a      	str	r2, [r3, #32]
 80024f4:	e036      	b.n	8002564 <HAL_RCC_OscConfig+0x3a4>
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	40021000 	.word	0x40021000
 80024fc:	fffeffff 	.word	0xfffeffff
 8002500:	fffbffff 	.word	0xfffbffff
 8002504:	40007000 	.word	0x40007000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x36a>
 8002510:	4bca      	ldr	r3, [pc, #808]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	4bc9      	ldr	r3, [pc, #804]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002516:	2101      	movs	r1, #1
 8002518:	438a      	bics	r2, r1
 800251a:	621a      	str	r2, [r3, #32]
 800251c:	4bc7      	ldr	r3, [pc, #796]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800251e:	6a1a      	ldr	r2, [r3, #32]
 8002520:	4bc6      	ldr	r3, [pc, #792]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002522:	2104      	movs	r1, #4
 8002524:	438a      	bics	r2, r1
 8002526:	621a      	str	r2, [r3, #32]
 8002528:	e01c      	b.n	8002564 <HAL_RCC_OscConfig+0x3a4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b05      	cmp	r3, #5
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0x38c>
 8002532:	4bc2      	ldr	r3, [pc, #776]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002534:	6a1a      	ldr	r2, [r3, #32]
 8002536:	4bc1      	ldr	r3, [pc, #772]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002538:	2104      	movs	r1, #4
 800253a:	430a      	orrs	r2, r1
 800253c:	621a      	str	r2, [r3, #32]
 800253e:	4bbf      	ldr	r3, [pc, #764]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	4bbe      	ldr	r3, [pc, #760]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002544:	2101      	movs	r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	621a      	str	r2, [r3, #32]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0x3a4>
 800254c:	4bbb      	ldr	r3, [pc, #748]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	4bba      	ldr	r3, [pc, #744]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002552:	2101      	movs	r1, #1
 8002554:	438a      	bics	r2, r1
 8002556:	621a      	str	r2, [r3, #32]
 8002558:	4bb8      	ldr	r3, [pc, #736]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	4bb7      	ldr	r3, [pc, #732]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800255e:	2104      	movs	r1, #4
 8002560:	438a      	bics	r2, r1
 8002562:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d014      	beq.n	8002596 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7ff fa78 	bl	8001a60 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e009      	b.n	800258a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff fa73 	bl	8001a60 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4aaf      	ldr	r2, [pc, #700]	@ (8002840 <HAL_RCC_OscConfig+0x680>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e19a      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258a:	4bac      	ldr	r3, [pc, #688]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	2202      	movs	r2, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x3b6>
 8002594:	e013      	b.n	80025be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7ff fa63 	bl	8001a60 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259e:	e009      	b.n	80025b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7ff fa5e 	bl	8001a60 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	4aa5      	ldr	r2, [pc, #660]	@ (8002840 <HAL_RCC_OscConfig+0x680>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e185      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	4ba1      	ldr	r3, [pc, #644]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	2202      	movs	r2, #2
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025be:	231f      	movs	r3, #31
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b9c      	ldr	r3, [pc, #624]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	4b9b      	ldr	r3, [pc, #620]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80025ce:	499d      	ldr	r1, [pc, #628]	@ (8002844 <HAL_RCC_OscConfig+0x684>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2210      	movs	r2, #16
 80025da:	4013      	ands	r3, r2
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d12a      	bne.n	800263c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025e6:	4b95      	ldr	r3, [pc, #596]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80025e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ea:	4b94      	ldr	r3, [pc, #592]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80025ec:	2104      	movs	r1, #4
 80025ee:	430a      	orrs	r2, r1
 80025f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80025f2:	4b92      	ldr	r3, [pc, #584]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80025f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025f6:	4b91      	ldr	r3, [pc, #580]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7ff fa2f 	bl	8001a60 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002608:	f7ff fa2a 	bl	8001a60 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e152      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800261a:	4b88      	ldr	r3, [pc, #544]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261e:	2202      	movs	r2, #2
 8002620:	4013      	ands	r3, r2
 8002622:	d0f1      	beq.n	8002608 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002624:	4b85      	ldr	r3, [pc, #532]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002628:	22f8      	movs	r2, #248	@ 0xf8
 800262a:	4393      	bics	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	00da      	lsls	r2, r3, #3
 8002634:	4b81      	ldr	r3, [pc, #516]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002636:	430a      	orrs	r2, r1
 8002638:	635a      	str	r2, [r3, #52]	@ 0x34
 800263a:	e034      	b.n	80026a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	3305      	adds	r3, #5
 8002642:	d111      	bne.n	8002668 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002644:	4b7d      	ldr	r3, [pc, #500]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002648:	4b7c      	ldr	r3, [pc, #496]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800264a:	2104      	movs	r1, #4
 800264c:	438a      	bics	r2, r1
 800264e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002650:	4b7a      	ldr	r3, [pc, #488]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002654:	22f8      	movs	r2, #248	@ 0xf8
 8002656:	4393      	bics	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	00da      	lsls	r2, r3, #3
 8002660:	4b76      	ldr	r3, [pc, #472]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002662:	430a      	orrs	r2, r1
 8002664:	635a      	str	r2, [r3, #52]	@ 0x34
 8002666:	e01e      	b.n	80026a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002668:	4b74      	ldr	r3, [pc, #464]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800266a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800266c:	4b73      	ldr	r3, [pc, #460]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800266e:	2104      	movs	r1, #4
 8002670:	430a      	orrs	r2, r1
 8002672:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002674:	4b71      	ldr	r3, [pc, #452]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002678:	4b70      	ldr	r3, [pc, #448]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800267a:	2101      	movs	r1, #1
 800267c:	438a      	bics	r2, r1
 800267e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7ff f9ee 	bl	8001a60 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800268a:	f7ff f9e9 	bl	8001a60 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e111      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800269c:	4b67      	ldr	r3, [pc, #412]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800269e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a0:	2202      	movs	r2, #2
 80026a2:	4013      	ands	r3, r2
 80026a4:	d1f1      	bne.n	800268a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2220      	movs	r2, #32
 80026ac:	4013      	ands	r3, r2
 80026ae:	d05c      	beq.n	800276a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80026b0:	4b62      	ldr	r3, [pc, #392]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	220c      	movs	r2, #12
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d00e      	beq.n	80026da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80026bc:	4b5f      	ldr	r3, [pc, #380]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	220c      	movs	r2, #12
 80026c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d114      	bne.n	80026f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80026c8:	4b5c      	ldr	r3, [pc, #368]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	23c0      	movs	r3, #192	@ 0xc0
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	401a      	ands	r2, r3
 80026d2:	23c0      	movs	r3, #192	@ 0xc0
 80026d4:	025b      	lsls	r3, r3, #9
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10b      	bne.n	80026f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80026da:	4b58      	ldr	r3, [pc, #352]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80026dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	029b      	lsls	r3, r3, #10
 80026e2:	4013      	ands	r3, r2
 80026e4:	d040      	beq.n	8002768 <HAL_RCC_OscConfig+0x5a8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d03c      	beq.n	8002768 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0e6      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01b      	beq.n	8002732 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80026fa:	4b50      	ldr	r3, [pc, #320]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80026fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026fe:	4b4f      	ldr	r3, [pc, #316]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002700:	2180      	movs	r1, #128	@ 0x80
 8002702:	0249      	lsls	r1, r1, #9
 8002704:	430a      	orrs	r2, r1
 8002706:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff f9aa 	bl	8001a60 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002712:	f7ff f9a5 	bl	8001a60 <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0cd      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002724:	4b45      	ldr	r3, [pc, #276]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x552>
 8002730:	e01b      	b.n	800276a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002732:	4b42      	ldr	r3, [pc, #264]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002736:	4b41      	ldr	r3, [pc, #260]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002738:	4943      	ldr	r1, [pc, #268]	@ (8002848 <HAL_RCC_OscConfig+0x688>)
 800273a:	400a      	ands	r2, r1
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7ff f98f 	bl	8001a60 <HAL_GetTick>
 8002742:	0003      	movs	r3, r0
 8002744:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002748:	f7ff f98a 	bl	8001a60 <HAL_GetTick>
 800274c:	0002      	movs	r2, r0
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0b2      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800275a:	4b38      	ldr	r3, [pc, #224]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800275c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	029b      	lsls	r3, r3, #10
 8002762:	4013      	ands	r3, r2
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x588>
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002768:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	2b00      	cmp	r3, #0
 8002770:	d100      	bne.n	8002774 <HAL_RCC_OscConfig+0x5b4>
 8002772:	e0a4      	b.n	80028be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002774:	4b31      	ldr	r3, [pc, #196]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	220c      	movs	r2, #12
 800277a:	4013      	ands	r3, r2
 800277c:	2b08      	cmp	r3, #8
 800277e:	d100      	bne.n	8002782 <HAL_RCC_OscConfig+0x5c2>
 8002780:	e078      	b.n	8002874 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	2b02      	cmp	r3, #2
 8002788:	d14c      	bne.n	8002824 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b2c      	ldr	r3, [pc, #176]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002790:	492e      	ldr	r1, [pc, #184]	@ (800284c <HAL_RCC_OscConfig+0x68c>)
 8002792:	400a      	ands	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7ff f963 	bl	8001a60 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff f95e 	bl	8001a60 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e086      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	@ 0x80
 80027b8:	049b      	lsls	r3, r3, #18
 80027ba:	4013      	ands	r3, r2
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027be:	4b1f      	ldr	r3, [pc, #124]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	220f      	movs	r2, #15
 80027c4:	4393      	bics	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027cc:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027d2:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002850 <HAL_RCC_OscConfig+0x690>)
 80027d8:	4013      	ands	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	431a      	orrs	r2, r3
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b13      	ldr	r3, [pc, #76]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	0449      	lsls	r1, r1, #17
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7ff f931 	bl	8001a60 <HAL_GetTick>
 80027fe:	0003      	movs	r3, r0
 8002800:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7ff f92c 	bl	8001a60 <HAL_GetTick>
 8002808:	0002      	movs	r2, r0
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e054      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002816:	4b09      	ldr	r3, [pc, #36]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	049b      	lsls	r3, r3, #18
 800281e:	4013      	ands	r3, r2
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x644>
 8002822:	e04c      	b.n	80028be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b04      	ldr	r3, [pc, #16]	@ (800283c <HAL_RCC_OscConfig+0x67c>)
 800282a:	4908      	ldr	r1, [pc, #32]	@ (800284c <HAL_RCC_OscConfig+0x68c>)
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7ff f916 	bl	8001a60 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0x6a6>
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	40021000 	.word	0x40021000
 8002840:	00001388 	.word	0x00001388
 8002844:	efffffff 	.word	0xefffffff
 8002848:	fffeffff 	.word	0xfffeffff
 800284c:	feffffff 	.word	0xfeffffff
 8002850:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7ff f904 	bl	8001a60 <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e02c      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <HAL_RCC_OscConfig+0x708>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	049b      	lsls	r3, r3, #18
 800286e:	4013      	ands	r3, r2
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x694>
 8002872:	e024      	b.n	80028be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e01f      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002880:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_RCC_OscConfig+0x708>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_RCC_OscConfig+0x708>)
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	23c0      	movs	r3, #192	@ 0xc0
 8002890:	025b      	lsls	r3, r3, #9
 8002892:	401a      	ands	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	429a      	cmp	r2, r3
 800289a:	d10e      	bne.n	80028ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	220f      	movs	r2, #15
 80028a0:	401a      	ands	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	23f0      	movs	r3, #240	@ 0xf0
 80028ae:	039b      	lsls	r3, r3, #14
 80028b0:	401a      	ands	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b008      	add	sp, #32
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0bf      	b.n	8002a60 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b61      	ldr	r3, [pc, #388]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4013      	ands	r3, r2
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d911      	bls.n	8002912 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4393      	bics	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002900:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	4013      	ands	r3, r2
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0a6      	b.n	8002a60 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d015      	beq.n	8002948 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2204      	movs	r2, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d006      	beq.n	8002934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002926:	4b51      	ldr	r3, [pc, #324]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 800292c:	21e0      	movs	r1, #224	@ 0xe0
 800292e:	00c9      	lsls	r1, r1, #3
 8002930:	430a      	orrs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002934:	4b4d      	ldr	r3, [pc, #308]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	22f0      	movs	r2, #240	@ 0xf0
 800293a:	4393      	bics	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	4b4a      	ldr	r3, [pc, #296]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d04c      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	2380      	movs	r3, #128	@ 0x80
 8002960:	029b      	lsls	r3, r3, #10
 8002962:	4013      	ands	r3, r2
 8002964:	d120      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e07a      	b.n	8002a60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	4b3e      	ldr	r3, [pc, #248]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	049b      	lsls	r3, r3, #18
 800297a:	4013      	ands	r3, r2
 800297c:	d114      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06e      	b.n	8002a60 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800298a:	4b38      	ldr	r3, [pc, #224]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 800298c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	029b      	lsls	r3, r3, #10
 8002992:	4013      	ands	r3, r2
 8002994:	d108      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e062      	b.n	8002a60 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2202      	movs	r2, #2
 80029a0:	4013      	ands	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e05b      	b.n	8002a60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a8:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	4393      	bics	r3, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 80029b8:	430a      	orrs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7ff f850 	bl	8001a60 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c4:	e009      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c6:	f7ff f84b 	bl	8001a60 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	4a27      	ldr	r2, [pc, #156]	@ (8002a70 <HAL_RCC_ClockConfig+0x1a4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e042      	b.n	8002a60 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	220c      	movs	r2, #12
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1ec      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d211      	bcs.n	8002a1e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e020      	b.n	8002a60 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2204      	movs	r2, #4
 8002a24:	4013      	ands	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <HAL_RCC_ClockConfig+0x1a8>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a3c:	f000 f820 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a40:	0001      	movs	r1, r0
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_RCC_ClockConfig+0x1a0>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	220f      	movs	r2, #15
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <HAL_RCC_ClockConfig+0x1ac>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	000a      	movs	r2, r1
 8002a52:	40da      	lsrs	r2, r3
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_ClockConfig+0x1b0>)
 8002a56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a58:	2003      	movs	r0, #3
 8002a5a:	f7fe fe83 	bl	8001764 <HAL_InitTick>
  
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	00001388 	.word	0x00001388
 8002a74:	fffff8ff 	.word	0xfffff8ff
 8002a78:	08004664 	.word	0x08004664
 8002a7c:	20000064 	.word	0x20000064

08002a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d046      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0xb8>
 8002aaa:	d848      	bhi.n	8002b3e <HAL_RCC_GetSysClockFreq+0xbe>
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d002      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d003      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x3c>
 8002ab4:	e043      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab6:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ab8:	613b      	str	r3, [r7, #16]
      break;
 8002aba:	e043      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	4a24      	ldr	r2, [pc, #144]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002aca:	4b21      	ldr	r3, [pc, #132]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	220f      	movs	r2, #15
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xdc>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	23c0      	movs	r3, #192	@ 0xc0
 8002adc:	025b      	lsls	r3, r3, #9
 8002ade:	401a      	ands	r2, r3
 8002ae0:	2380      	movs	r3, #128	@ 0x80
 8002ae2:	025b      	lsls	r3, r3, #9
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d109      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	481a      	ldr	r0, [pc, #104]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002aec:	f7fd fb0c 	bl	8000108 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	001a      	movs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4353      	muls	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e01a      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	23c0      	movs	r3, #192	@ 0xc0
 8002b00:	025b      	lsls	r3, r3, #9
 8002b02:	401a      	ands	r2, r3
 8002b04:	23c0      	movs	r3, #192	@ 0xc0
 8002b06:	025b      	lsls	r3, r3, #9
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	4814      	ldr	r0, [pc, #80]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002b10:	f7fd fafa 	bl	8000108 <__udivsi3>
 8002b14:	0003      	movs	r3, r0
 8002b16:	001a      	movs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4353      	muls	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	480c      	ldr	r0, [pc, #48]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b24:	f7fd faf0 	bl	8000108 <__udivsi3>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4353      	muls	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	613b      	str	r3, [r7, #16]
      break;
 8002b36:	e005      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002b3a:	613b      	str	r3, [r7, #16]
      break;
 8002b3c:	e002      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b40:	613b      	str	r3, [r7, #16]
      break;
 8002b42:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b44:	693b      	ldr	r3, [r7, #16]
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b006      	add	sp, #24
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	40021000 	.word	0x40021000
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	0800467c 	.word	0x0800467c
 8002b5c:	0800468c 	.word	0x0800468c
 8002b60:	02dc6c00 	.word	0x02dc6c00

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b02      	ldr	r3, [pc, #8]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	20000064 	.word	0x20000064

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b7c:	f7ff fff2 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b80:	0001      	movs	r1, r0
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	40d9      	lsrs	r1, r3
 8002b92:	000b      	movs	r3, r1
}    
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08004674 	.word	0x08004674

08002ba4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x4c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x4c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	22f0      	movs	r2, #240	@ 0xf0
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002bcc:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x4c>)
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	23e0      	movs	r3, #224	@ 0xe0
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_GetClockConfig+0x50>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	401a      	ands	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	601a      	str	r2, [r3, #0]
}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b002      	add	sp, #8
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			@ (mov r8, r8)
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40022000 	.word	0x40022000

08002bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	4013      	ands	r3, r2
 8002c12:	d100      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002c14:	e08e      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002c16:	2017      	movs	r0, #23
 8002c18:	183b      	adds	r3, r7, r0
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	2380      	movs	r3, #128	@ 0x80
 8002c24:	055b      	lsls	r3, r3, #21
 8002c26:	4013      	ands	r3, r2
 8002c28:	d110      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	4b6b      	ldr	r3, [pc, #428]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c30:	2180      	movs	r1, #128	@ 0x80
 8002c32:	0549      	lsls	r1, r1, #21
 8002c34:	430a      	orrs	r2, r1
 8002c36:	61da      	str	r2, [r3, #28]
 8002c38:	4b67      	ldr	r3, [pc, #412]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	2380      	movs	r3, #128	@ 0x80
 8002c3e:	055b      	lsls	r3, r3, #21
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c46:	183b      	adds	r3, r7, r0
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d11a      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c58:	4b60      	ldr	r3, [pc, #384]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b5f      	ldr	r3, [pc, #380]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c5e:	2180      	movs	r1, #128	@ 0x80
 8002c60:	0049      	lsls	r1, r1, #1
 8002c62:	430a      	orrs	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fefb 	bl	8001a60 <HAL_GetTick>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	e008      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c70:	f7fe fef6 	bl	8001a60 <HAL_GetTick>
 8002c74:	0002      	movs	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0a6      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	4b56      	ldr	r3, [pc, #344]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2380      	movs	r3, #128	@ 0x80
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c8e:	4b52      	ldr	r3, [pc, #328]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c90:	6a1a      	ldr	r2, [r3, #32]
 8002c92:	23c0      	movs	r3, #192	@ 0xc0
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4013      	ands	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d034      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	23c0      	movs	r3, #192	@ 0xc0
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d02c      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb0:	4b49      	ldr	r3, [pc, #292]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cba:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	4b46      	ldr	r3, [pc, #280]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cc0:	2180      	movs	r1, #128	@ 0x80
 8002cc2:	0249      	lsls	r1, r1, #9
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc8:	4b43      	ldr	r3, [pc, #268]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cca:	6a1a      	ldr	r2, [r3, #32]
 8002ccc:	4b42      	ldr	r3, [pc, #264]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cce:	4945      	ldr	r1, [pc, #276]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cd4:	4b40      	ldr	r3, [pc, #256]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe febd 	bl	8001a60 <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	e009      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe feb8 	bl	8001a60 <HAL_GetTick>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e067      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d0a:	4b33      	ldr	r3, [pc, #204]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d1e:	2317      	movs	r3, #23
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d2e:	492f      	ldr	r1, [pc, #188]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3e:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	2203      	movs	r2, #3
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2202      	movs	r2, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	4a23      	ldr	r2, [pc, #140]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2220      	movs	r2, #32
 8002d76:	4013      	ands	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d7a:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	2210      	movs	r2, #16
 8002d80:	4393      	bics	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	4013      	ands	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	2280      	movs	r2, #128	@ 0x80
 8002da0:	4393      	bics	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4013      	ands	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dba:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	2240      	movs	r2, #64	@ 0x40
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	4b03      	ldr	r3, [pc, #12]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b006      	add	sp, #24
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	fffffcff 	.word	0xfffffcff
 8002de4:	fffeffff 	.word	0xfffeffff
 8002de8:	00001388 	.word	0x00001388
 8002dec:	efffffff 	.word	0xefffffff
 8002df0:	fffcffff 	.word	0xfffcffff

08002df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e042      	b.n	8002e8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	223d      	movs	r2, #61	@ 0x3d
 8002e0a:	5c9b      	ldrb	r3, [r3, r2]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	223c      	movs	r2, #60	@ 0x3c
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f839 	bl	8002e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	223d      	movs	r2, #61	@ 0x3d
 8002e26:	2102      	movs	r1, #2
 8002e28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	0019      	movs	r1, r3
 8002e34:	0010      	movs	r0, r2
 8002e36:	f000 f995 	bl	8003164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2246      	movs	r2, #70	@ 0x46
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223e      	movs	r2, #62	@ 0x3e
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223f      	movs	r2, #63	@ 0x3f
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2240      	movs	r2, #64	@ 0x40
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2241      	movs	r2, #65	@ 0x41
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2242      	movs	r2, #66	@ 0x42
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2243      	movs	r2, #67	@ 0x43
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2244      	movs	r2, #68	@ 0x44
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2245      	movs	r2, #69	@ 0x45
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	223d      	movs	r2, #61	@ 0x3d
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e9c:	46c0      	nop			@ (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	223d      	movs	r2, #61	@ 0x3d
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e03b      	b.n	8002f34 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	223d      	movs	r2, #61	@ 0x3d
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2101      	movs	r1, #1
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a18      	ldr	r2, [pc, #96]	@ (8002f3c <HAL_TIM_Base_Start_IT+0x98>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00f      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x5a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	@ 0x80
 8002ee4:	05db      	lsls	r3, r3, #23
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d009      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x5a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a14      	ldr	r2, [pc, #80]	@ (8002f40 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x5a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a12      	ldr	r2, [pc, #72]	@ (8002f44 <HAL_TIM_Base_Start_IT+0xa0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d111      	bne.n	8002f22 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2207      	movs	r2, #7
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d010      	beq.n	8002f32 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f20:	e007      	b.n	8002f32 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b004      	add	sp, #16
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40012c00 	.word	0x40012c00
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40014000 	.word	0x40014000

08002f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d021      	beq.n	8002fac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d01d      	beq.n	8002fac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2203      	movs	r2, #3
 8002f76:	4252      	negs	r2, r2
 8002f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2203      	movs	r2, #3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 f8d0 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e007      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f8c3 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f8cf 	bl	8003144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d01e      	beq.n	8002ffa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	4252      	negs	r2, r2
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	23c0      	movs	r3, #192	@ 0xc0
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f8a9 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 8002fe2:	e007      	b.n	8002ff4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f89c 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 f8a8 	bl	8003144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	4013      	ands	r3, r2
 8003000:	d021      	beq.n	8003046 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2208      	movs	r2, #8
 8003006:	4013      	ands	r3, r2
 8003008:	d01d      	beq.n	8003046 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2209      	movs	r2, #9
 8003010:	4252      	negs	r2, r2
 8003012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2204      	movs	r2, #4
 8003018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2203      	movs	r2, #3
 8003022:	4013      	ands	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 f883 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 800302e:	e007      	b.n	8003040 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f876 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f882 	bl	8003144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2210      	movs	r2, #16
 800304a:	4013      	ands	r3, r2
 800304c:	d022      	beq.n	8003094 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2210      	movs	r2, #16
 8003052:	4013      	ands	r3, r2
 8003054:	d01e      	beq.n	8003094 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2211      	movs	r2, #17
 800305c:	4252      	negs	r2, r2
 800305e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2208      	movs	r2, #8
 8003064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	23c0      	movs	r3, #192	@ 0xc0
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4013      	ands	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	0018      	movs	r0, r3
 8003078:	f000 f85c 	bl	8003134 <HAL_TIM_IC_CaptureCallback>
 800307c:	e007      	b.n	800308e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f000 f84f 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 f85b 	bl	8003144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2201      	movs	r2, #1
 8003098:	4013      	ands	r3, r2
 800309a:	d00c      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	d008      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2202      	movs	r2, #2
 80030aa:	4252      	negs	r2, r2
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7fd fe13 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2280      	movs	r2, #128	@ 0x80
 80030ba:	4013      	ands	r3, r2
 80030bc:	d00c      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2280      	movs	r2, #128	@ 0x80
 80030c2:	4013      	ands	r3, r2
 80030c4:	d008      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2281      	movs	r2, #129	@ 0x81
 80030cc:	4252      	negs	r2, r2
 80030ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 f8dc 	bl	8003290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2240      	movs	r2, #64	@ 0x40
 80030dc:	4013      	ands	r3, r2
 80030de:	d00c      	beq.n	80030fa <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2240      	movs	r2, #64	@ 0x40
 80030e4:	4013      	ands	r3, r2
 80030e6:	d008      	beq.n	80030fa <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2241      	movs	r2, #65	@ 0x41
 80030ee:	4252      	negs	r2, r2
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 f82d 	bl	8003154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2220      	movs	r2, #32
 80030fe:	4013      	ands	r3, r2
 8003100:	d00c      	beq.n	800311c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	4013      	ands	r3, r2
 8003108:	d008      	beq.n	800311c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2221      	movs	r2, #33	@ 0x21
 8003110:	4252      	negs	r2, r2
 8003112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f000 f8b2 	bl	8003280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b004      	add	sp, #16
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313c:	46c0      	nop			@ (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800314c:	46c0      	nop			@ (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}

08003164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3b      	ldr	r2, [pc, #236]	@ (8003264 <TIM_Base_SetConfig+0x100>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d008      	beq.n	800318e <TIM_Base_SetConfig+0x2a>
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	2380      	movs	r3, #128	@ 0x80
 8003180:	05db      	lsls	r3, r3, #23
 8003182:	429a      	cmp	r2, r3
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x2a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a37      	ldr	r2, [pc, #220]	@ (8003268 <TIM_Base_SetConfig+0x104>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2270      	movs	r2, #112	@ 0x70
 8003192:	4393      	bics	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a30      	ldr	r2, [pc, #192]	@ (8003264 <TIM_Base_SetConfig+0x100>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d018      	beq.n	80031da <TIM_Base_SetConfig+0x76>
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	2380      	movs	r3, #128	@ 0x80
 80031ac:	05db      	lsls	r3, r3, #23
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d013      	beq.n	80031da <TIM_Base_SetConfig+0x76>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003268 <TIM_Base_SetConfig+0x104>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00f      	beq.n	80031da <TIM_Base_SetConfig+0x76>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2b      	ldr	r2, [pc, #172]	@ (800326c <TIM_Base_SetConfig+0x108>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0x76>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003270 <TIM_Base_SetConfig+0x10c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0x76>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a29      	ldr	r2, [pc, #164]	@ (8003274 <TIM_Base_SetConfig+0x110>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0x76>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a28      	ldr	r2, [pc, #160]	@ (8003278 <TIM_Base_SetConfig+0x114>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a27      	ldr	r2, [pc, #156]	@ (800327c <TIM_Base_SetConfig+0x118>)
 80031de:	4013      	ands	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2280      	movs	r2, #128	@ 0x80
 80031f0:	4393      	bics	r3, r2
 80031f2:	001a      	movs	r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a13      	ldr	r2, [pc, #76]	@ (8003264 <TIM_Base_SetConfig+0x100>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_Base_SetConfig+0xce>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <TIM_Base_SetConfig+0x10c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_Base_SetConfig+0xce>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a13      	ldr	r2, [pc, #76]	@ (8003274 <TIM_Base_SetConfig+0x110>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_Base_SetConfig+0xce>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a12      	ldr	r2, [pc, #72]	@ (8003278 <TIM_Base_SetConfig+0x114>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d103      	bne.n	800323a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2201      	movs	r2, #1
 8003246:	4013      	ands	r3, r2
 8003248:	2b01      	cmp	r3, #1
 800324a:	d106      	bne.n	800325a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2201      	movs	r2, #1
 8003252:	4393      	bics	r3, r2
 8003254:	001a      	movs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]
  }
}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40000400 	.word	0x40000400
 800326c:	40002000 	.word	0x40002000
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800
 800327c:	fffffcff 	.word	0xfffffcff

08003280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003288:	46c0      	nop			@ (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e044      	b.n	800333c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d107      	bne.n	80032ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2278      	movs	r2, #120	@ 0x78
 80032be:	2100      	movs	r1, #0
 80032c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7fe fb2d 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2224      	movs	r2, #36	@ 0x24
 80032ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	438a      	bics	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 fb3c 	bl	8003968 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 f9b0 	bl	8003658 <UART_SetConfig>
 80032f8:	0003      	movs	r3, r0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e01c      	b.n	800333c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	490d      	ldr	r1, [pc, #52]	@ (8003344 <HAL_UART_Init+0xa4>)
 800330e:	400a      	ands	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	212a      	movs	r1, #42	@ 0x2a
 800331e:	438a      	bics	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f000 fbcb 	bl	8003ad0 <UART_CheckIdleState>
 800333a:	0003      	movs	r3, r0
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}
 8003344:	ffffb7ff 	.word	0xffffb7ff

08003348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	1dbb      	adds	r3, r7, #6
 8003356:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800335c:	2b20      	cmp	r3, #32
 800335e:	d000      	beq.n	8003362 <HAL_UART_Transmit+0x1a>
 8003360:	e08c      	b.n	800347c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_UART_Transmit+0x28>
 8003368:	1dbb      	adds	r3, r7, #6
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e084      	b.n	800347e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	2380      	movs	r3, #128	@ 0x80
 800337a:	015b      	lsls	r3, r3, #5
 800337c:	429a      	cmp	r2, r3
 800337e:	d109      	bne.n	8003394 <HAL_UART_Transmit+0x4c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2201      	movs	r2, #1
 800338c:	4013      	ands	r3, r2
 800338e:	d001      	beq.n	8003394 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e074      	b.n	800347e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2284      	movs	r2, #132	@ 0x84
 8003398:	2100      	movs	r1, #0
 800339a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2221      	movs	r2, #33	@ 0x21
 80033a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033a2:	f7fe fb5d 	bl	8001a60 <HAL_GetTick>
 80033a6:	0003      	movs	r3, r0
 80033a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1dba      	adds	r2, r7, #6
 80033ae:	2150      	movs	r1, #80	@ 0x50
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1dba      	adds	r2, r7, #6
 80033b8:	2152      	movs	r1, #82	@ 0x52
 80033ba:	8812      	ldrh	r2, [r2, #0]
 80033bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	015b      	lsls	r3, r3, #5
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d108      	bne.n	80033dc <HAL_UART_Transmit+0x94>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	e003      	b.n	80033e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033e4:	e02f      	b.n	8003446 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	0013      	movs	r3, r2
 80033f0:	2200      	movs	r2, #0
 80033f2:	2180      	movs	r1, #128	@ 0x80
 80033f4:	f000 fc14 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 80033f8:	1e03      	subs	r3, r0, #0
 80033fa:	d004      	beq.n	8003406 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e03b      	b.n	800347e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	05d2      	lsls	r2, r2, #23
 8003416:	0dd2      	lsrs	r2, r2, #23
 8003418:	b292      	uxth	r2, r2
 800341a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	3302      	adds	r3, #2
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e007      	b.n	8003434 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	781a      	ldrb	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3301      	adds	r3, #1
 8003432:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2252      	movs	r2, #82	@ 0x52
 8003438:	5a9b      	ldrh	r3, [r3, r2]
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b299      	uxth	r1, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2252      	movs	r2, #82	@ 0x52
 8003444:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2252      	movs	r2, #82	@ 0x52
 800344a:	5a9b      	ldrh	r3, [r3, r2]
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1c9      	bne.n	80033e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	0013      	movs	r3, r2
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	@ 0x40
 8003460:	f000 fbde 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d004      	beq.n	8003472 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e005      	b.n	800347e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b008      	add	sp, #32
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	@ 0x28
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	1dbb      	adds	r3, r7, #6
 8003496:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2280      	movs	r2, #128	@ 0x80
 800349c:	589b      	ldr	r3, [r3, r2]
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d000      	beq.n	80034a4 <HAL_UART_Receive+0x1c>
 80034a2:	e0d1      	b.n	8003648 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_UART_Receive+0x2a>
 80034aa:	1dbb      	adds	r3, r7, #6
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0c9      	b.n	800364a <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	015b      	lsls	r3, r3, #5
 80034be:	429a      	cmp	r2, r3
 80034c0:	d109      	bne.n	80034d6 <HAL_UART_Receive+0x4e>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2201      	movs	r2, #1
 80034ce:	4013      	ands	r3, r2
 80034d0:	d001      	beq.n	80034d6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0b9      	b.n	800364a <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2284      	movs	r2, #132	@ 0x84
 80034da:	2100      	movs	r1, #0
 80034dc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2280      	movs	r2, #128	@ 0x80
 80034e2:	2122      	movs	r1, #34	@ 0x22
 80034e4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ec:	f7fe fab8 	bl	8001a60 <HAL_GetTick>
 80034f0:	0003      	movs	r3, r0
 80034f2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1dba      	adds	r2, r7, #6
 80034f8:	2158      	movs	r1, #88	@ 0x58
 80034fa:	8812      	ldrh	r2, [r2, #0]
 80034fc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1dba      	adds	r2, r7, #6
 8003502:	215a      	movs	r1, #90	@ 0x5a
 8003504:	8812      	ldrh	r2, [r2, #0]
 8003506:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	015b      	lsls	r3, r3, #5
 8003510:	429a      	cmp	r2, r3
 8003512:	d10d      	bne.n	8003530 <HAL_UART_Receive+0xa8>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <HAL_UART_Receive+0x9e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	225c      	movs	r2, #92	@ 0x5c
 8003520:	494c      	ldr	r1, [pc, #304]	@ (8003654 <HAL_UART_Receive+0x1cc>)
 8003522:	5299      	strh	r1, [r3, r2]
 8003524:	e02e      	b.n	8003584 <HAL_UART_Receive+0xfc>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	225c      	movs	r2, #92	@ 0x5c
 800352a:	21ff      	movs	r1, #255	@ 0xff
 800352c:	5299      	strh	r1, [r3, r2]
 800352e:	e029      	b.n	8003584 <HAL_UART_Receive+0xfc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_UART_Receive+0xcc>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <HAL_UART_Receive+0xc2>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	225c      	movs	r2, #92	@ 0x5c
 8003544:	21ff      	movs	r1, #255	@ 0xff
 8003546:	5299      	strh	r1, [r3, r2]
 8003548:	e01c      	b.n	8003584 <HAL_UART_Receive+0xfc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	225c      	movs	r2, #92	@ 0x5c
 800354e:	217f      	movs	r1, #127	@ 0x7f
 8003550:	5299      	strh	r1, [r3, r2]
 8003552:	e017      	b.n	8003584 <HAL_UART_Receive+0xfc>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	2380      	movs	r3, #128	@ 0x80
 800355a:	055b      	lsls	r3, r3, #21
 800355c:	429a      	cmp	r2, r3
 800355e:	d10d      	bne.n	800357c <HAL_UART_Receive+0xf4>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d104      	bne.n	8003572 <HAL_UART_Receive+0xea>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	225c      	movs	r2, #92	@ 0x5c
 800356c:	217f      	movs	r1, #127	@ 0x7f
 800356e:	5299      	strh	r1, [r3, r2]
 8003570:	e008      	b.n	8003584 <HAL_UART_Receive+0xfc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	225c      	movs	r2, #92	@ 0x5c
 8003576:	213f      	movs	r1, #63	@ 0x3f
 8003578:	5299      	strh	r1, [r3, r2]
 800357a:	e003      	b.n	8003584 <HAL_UART_Receive+0xfc>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	225c      	movs	r2, #92	@ 0x5c
 8003580:	2100      	movs	r1, #0
 8003582:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003584:	2312      	movs	r3, #18
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	215c      	movs	r1, #92	@ 0x5c
 800358c:	5a52      	ldrh	r2, [r2, r1]
 800358e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	429a      	cmp	r2, r3
 800359a:	d108      	bne.n	80035ae <HAL_UART_Receive+0x126>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e003      	b.n	80035b6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80035b6:	e03b      	b.n	8003630 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	0013      	movs	r3, r2
 80035c2:	2200      	movs	r2, #0
 80035c4:	2120      	movs	r1, #32
 80035c6:	f000 fb2b 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 80035ca:	1e03      	subs	r3, r0, #0
 80035cc:	d005      	beq.n	80035da <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2280      	movs	r2, #128	@ 0x80
 80035d2:	2120      	movs	r1, #32
 80035d4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e037      	b.n	800364a <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10e      	bne.n	80035fe <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2212      	movs	r2, #18
 80035ea:	18ba      	adds	r2, r7, r2
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	3302      	adds	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e00f      	b.n	800361e <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003604:	b29b      	uxth	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2212      	movs	r2, #18
 800360a:	18ba      	adds	r2, r7, r2
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	4013      	ands	r3, r2
 8003612:	b2da      	uxtb	r2, r3
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3301      	adds	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	225a      	movs	r2, #90	@ 0x5a
 8003622:	5a9b      	ldrh	r3, [r3, r2]
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b299      	uxth	r1, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	225a      	movs	r2, #90	@ 0x5a
 800362e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	225a      	movs	r2, #90	@ 0x5a
 8003634:	5a9b      	ldrh	r3, [r3, r2]
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1bd      	bne.n	80035b8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2280      	movs	r2, #128	@ 0x80
 8003640:	2120      	movs	r1, #32
 8003642:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b008      	add	sp, #32
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	000001ff 	.word	0x000001ff

08003658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003660:	231e      	movs	r3, #30
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4aaf      	ldr	r2, [pc, #700]	@ (8003944 <UART_SetConfig+0x2ec>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4aaa      	ldr	r2, [pc, #680]	@ (8003948 <UART_SetConfig+0x2f0>)
 800369e:	4013      	ands	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4aa1      	ldr	r2, [pc, #644]	@ (800394c <UART_SetConfig+0x2f4>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a9d      	ldr	r2, [pc, #628]	@ (8003950 <UART_SetConfig+0x2f8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d127      	bne.n	800372e <UART_SetConfig+0xd6>
 80036de:	4b9d      	ldr	r3, [pc, #628]	@ (8003954 <UART_SetConfig+0x2fc>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	2203      	movs	r2, #3
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d00d      	beq.n	8003706 <UART_SetConfig+0xae>
 80036ea:	d81b      	bhi.n	8003724 <UART_SetConfig+0xcc>
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d014      	beq.n	800371a <UART_SetConfig+0xc2>
 80036f0:	d818      	bhi.n	8003724 <UART_SetConfig+0xcc>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <UART_SetConfig+0xa4>
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d00a      	beq.n	8003710 <UART_SetConfig+0xb8>
 80036fa:	e013      	b.n	8003724 <UART_SetConfig+0xcc>
 80036fc:	231f      	movs	r3, #31
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e065      	b.n	80037d2 <UART_SetConfig+0x17a>
 8003706:	231f      	movs	r3, #31
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e060      	b.n	80037d2 <UART_SetConfig+0x17a>
 8003710:	231f      	movs	r3, #31
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2204      	movs	r2, #4
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e05b      	b.n	80037d2 <UART_SetConfig+0x17a>
 800371a:	231f      	movs	r3, #31
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2208      	movs	r2, #8
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e056      	b.n	80037d2 <UART_SetConfig+0x17a>
 8003724:	231f      	movs	r3, #31
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	2210      	movs	r2, #16
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e051      	b.n	80037d2 <UART_SetConfig+0x17a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a89      	ldr	r2, [pc, #548]	@ (8003958 <UART_SetConfig+0x300>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d134      	bne.n	80037a2 <UART_SetConfig+0x14a>
 8003738:	4b86      	ldr	r3, [pc, #536]	@ (8003954 <UART_SetConfig+0x2fc>)
 800373a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800373c:	23c0      	movs	r3, #192	@ 0xc0
 800373e:	029b      	lsls	r3, r3, #10
 8003740:	4013      	ands	r3, r2
 8003742:	22c0      	movs	r2, #192	@ 0xc0
 8003744:	0292      	lsls	r2, r2, #10
 8003746:	4293      	cmp	r3, r2
 8003748:	d017      	beq.n	800377a <UART_SetConfig+0x122>
 800374a:	22c0      	movs	r2, #192	@ 0xc0
 800374c:	0292      	lsls	r2, r2, #10
 800374e:	4293      	cmp	r3, r2
 8003750:	d822      	bhi.n	8003798 <UART_SetConfig+0x140>
 8003752:	2280      	movs	r2, #128	@ 0x80
 8003754:	0292      	lsls	r2, r2, #10
 8003756:	4293      	cmp	r3, r2
 8003758:	d019      	beq.n	800378e <UART_SetConfig+0x136>
 800375a:	2280      	movs	r2, #128	@ 0x80
 800375c:	0292      	lsls	r2, r2, #10
 800375e:	4293      	cmp	r3, r2
 8003760:	d81a      	bhi.n	8003798 <UART_SetConfig+0x140>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <UART_SetConfig+0x118>
 8003766:	2280      	movs	r2, #128	@ 0x80
 8003768:	0252      	lsls	r2, r2, #9
 800376a:	4293      	cmp	r3, r2
 800376c:	d00a      	beq.n	8003784 <UART_SetConfig+0x12c>
 800376e:	e013      	b.n	8003798 <UART_SetConfig+0x140>
 8003770:	231f      	movs	r3, #31
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e02b      	b.n	80037d2 <UART_SetConfig+0x17a>
 800377a:	231f      	movs	r3, #31
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	2202      	movs	r2, #2
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e026      	b.n	80037d2 <UART_SetConfig+0x17a>
 8003784:	231f      	movs	r3, #31
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2204      	movs	r2, #4
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e021      	b.n	80037d2 <UART_SetConfig+0x17a>
 800378e:	231f      	movs	r3, #31
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	2208      	movs	r2, #8
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	e01c      	b.n	80037d2 <UART_SetConfig+0x17a>
 8003798:	231f      	movs	r3, #31
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2210      	movs	r2, #16
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e017      	b.n	80037d2 <UART_SetConfig+0x17a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a6d      	ldr	r2, [pc, #436]	@ (800395c <UART_SetConfig+0x304>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d104      	bne.n	80037b6 <UART_SetConfig+0x15e>
 80037ac:	231f      	movs	r3, #31
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e00d      	b.n	80037d2 <UART_SetConfig+0x17a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a69      	ldr	r2, [pc, #420]	@ (8003960 <UART_SetConfig+0x308>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d104      	bne.n	80037ca <UART_SetConfig+0x172>
 80037c0:	231f      	movs	r3, #31
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e003      	b.n	80037d2 <UART_SetConfig+0x17a>
 80037ca:	231f      	movs	r3, #31
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	2210      	movs	r2, #16
 80037d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	429a      	cmp	r2, r3
 80037dc:	d15c      	bne.n	8003898 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80037de:	231f      	movs	r3, #31
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d015      	beq.n	8003814 <UART_SetConfig+0x1bc>
 80037e8:	dc18      	bgt.n	800381c <UART_SetConfig+0x1c4>
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d00d      	beq.n	800380a <UART_SetConfig+0x1b2>
 80037ee:	dc15      	bgt.n	800381c <UART_SetConfig+0x1c4>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <UART_SetConfig+0x1a2>
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d005      	beq.n	8003804 <UART_SetConfig+0x1ac>
 80037f8:	e010      	b.n	800381c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037fa:	f7ff f9bd 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 80037fe:	0003      	movs	r3, r0
 8003800:	61bb      	str	r3, [r7, #24]
        break;
 8003802:	e012      	b.n	800382a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003804:	4b57      	ldr	r3, [pc, #348]	@ (8003964 <UART_SetConfig+0x30c>)
 8003806:	61bb      	str	r3, [r7, #24]
        break;
 8003808:	e00f      	b.n	800382a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380a:	f7ff f939 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 800380e:	0003      	movs	r3, r0
 8003810:	61bb      	str	r3, [r7, #24]
        break;
 8003812:	e00a      	b.n	800382a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	61bb      	str	r3, [r7, #24]
        break;
 800381a:	e006      	b.n	800382a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003820:	231e      	movs	r3, #30
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
        break;
 8003828:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d100      	bne.n	8003832 <UART_SetConfig+0x1da>
 8003830:	e07a      	b.n	8003928 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	005a      	lsls	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	18d2      	adds	r2, r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	0019      	movs	r1, r3
 8003844:	0010      	movs	r0, r2
 8003846:	f7fc fc5f 	bl	8000108 <__udivsi3>
 800384a:	0003      	movs	r3, r0
 800384c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d91c      	bls.n	800388e <UART_SetConfig+0x236>
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	025b      	lsls	r3, r3, #9
 800385a:	429a      	cmp	r2, r3
 800385c:	d217      	bcs.n	800388e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	b29a      	uxth	r2, r3
 8003862:	200e      	movs	r0, #14
 8003864:	183b      	adds	r3, r7, r0
 8003866:	210f      	movs	r1, #15
 8003868:	438a      	bics	r2, r1
 800386a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	b29b      	uxth	r3, r3
 8003872:	2207      	movs	r2, #7
 8003874:	4013      	ands	r3, r2
 8003876:	b299      	uxth	r1, r3
 8003878:	183b      	adds	r3, r7, r0
 800387a:	183a      	adds	r2, r7, r0
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	183a      	adds	r2, r7, r0
 8003888:	8812      	ldrh	r2, [r2, #0]
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	e04c      	b.n	8003928 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800388e:	231e      	movs	r3, #30
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2201      	movs	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e047      	b.n	8003928 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003898:	231f      	movs	r3, #31
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d015      	beq.n	80038ce <UART_SetConfig+0x276>
 80038a2:	dc18      	bgt.n	80038d6 <UART_SetConfig+0x27e>
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d00d      	beq.n	80038c4 <UART_SetConfig+0x26c>
 80038a8:	dc15      	bgt.n	80038d6 <UART_SetConfig+0x27e>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <UART_SetConfig+0x25c>
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d005      	beq.n	80038be <UART_SetConfig+0x266>
 80038b2:	e010      	b.n	80038d6 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7ff f960 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 80038b8:	0003      	movs	r3, r0
 80038ba:	61bb      	str	r3, [r7, #24]
        break;
 80038bc:	e012      	b.n	80038e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038be:	4b29      	ldr	r3, [pc, #164]	@ (8003964 <UART_SetConfig+0x30c>)
 80038c0:	61bb      	str	r3, [r7, #24]
        break;
 80038c2:	e00f      	b.n	80038e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c4:	f7ff f8dc 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 80038c8:	0003      	movs	r3, r0
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e00a      	b.n	80038e4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e006      	b.n	80038e4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	231e      	movs	r3, #30
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
        break;
 80038e2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01e      	beq.n	8003928 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085a      	lsrs	r2, r3, #1
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	18d2      	adds	r2, r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0019      	movs	r1, r3
 80038fa:	0010      	movs	r0, r2
 80038fc:	f7fc fc04 	bl	8000108 <__udivsi3>
 8003900:	0003      	movs	r3, r0
 8003902:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	d90a      	bls.n	8003920 <UART_SetConfig+0x2c8>
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	025b      	lsls	r3, r3, #9
 8003910:	429a      	cmp	r2, r3
 8003912:	d205      	bcs.n	8003920 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	e003      	b.n	8003928 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003920:	231e      	movs	r3, #30
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003934:	231e      	movs	r3, #30
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	781b      	ldrb	r3, [r3, #0]
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b008      	add	sp, #32
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	efff69f3 	.word	0xefff69f3
 8003948:	ffffcfff 	.word	0xffffcfff
 800394c:	fffff4ff 	.word	0xfffff4ff
 8003950:	40013800 	.word	0x40013800
 8003954:	40021000 	.word	0x40021000
 8003958:	40004400 	.word	0x40004400
 800395c:	40004800 	.word	0x40004800
 8003960:	40004c00 	.word	0x40004c00
 8003964:	007a1200 	.word	0x007a1200

08003968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	2208      	movs	r2, #8
 8003976:	4013      	ands	r3, r2
 8003978:	d00b      	beq.n	8003992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a4a      	ldr	r2, [pc, #296]	@ (8003aac <UART_AdvFeatureConfig+0x144>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	2201      	movs	r2, #1
 8003998:	4013      	ands	r3, r2
 800399a:	d00b      	beq.n	80039b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4a43      	ldr	r2, [pc, #268]	@ (8003ab0 <UART_AdvFeatureConfig+0x148>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ab4 <UART_AdvFeatureConfig+0x14c>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	2204      	movs	r2, #4
 80039dc:	4013      	ands	r3, r2
 80039de:	d00b      	beq.n	80039f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a34      	ldr	r2, [pc, #208]	@ (8003ab8 <UART_AdvFeatureConfig+0x150>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	2210      	movs	r2, #16
 80039fe:	4013      	ands	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a2c      	ldr	r2, [pc, #176]	@ (8003abc <UART_AdvFeatureConfig+0x154>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2220      	movs	r2, #32
 8003a20:	4013      	ands	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4a25      	ldr	r2, [pc, #148]	@ (8003ac0 <UART_AdvFeatureConfig+0x158>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	2240      	movs	r2, #64	@ 0x40
 8003a42:	4013      	ands	r3, r2
 8003a44:	d01d      	beq.n	8003a82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac4 <UART_AdvFeatureConfig+0x15c>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a62:	2380      	movs	r3, #128	@ 0x80
 8003a64:	035b      	lsls	r3, r3, #13
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10b      	bne.n	8003a82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a15      	ldr	r2, [pc, #84]	@ (8003ac8 <UART_AdvFeatureConfig+0x160>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	2280      	movs	r2, #128	@ 0x80
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4a0e      	ldr	r2, [pc, #56]	@ (8003acc <UART_AdvFeatureConfig+0x164>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  }
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	ffff7fff 	.word	0xffff7fff
 8003ab0:	fffdffff 	.word	0xfffdffff
 8003ab4:	fffeffff 	.word	0xfffeffff
 8003ab8:	fffbffff 	.word	0xfffbffff
 8003abc:	ffffefff 	.word	0xffffefff
 8003ac0:	ffffdfff 	.word	0xffffdfff
 8003ac4:	ffefffff 	.word	0xffefffff
 8003ac8:	ff9fffff 	.word	0xff9fffff
 8003acc:	fff7ffff 	.word	0xfff7ffff

08003ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b092      	sub	sp, #72	@ 0x48
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2284      	movs	r2, #132	@ 0x84
 8003adc:	2100      	movs	r1, #0
 8003ade:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ae0:	f7fd ffbe 	bl	8001a60 <HAL_GetTick>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2208      	movs	r2, #8
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d12c      	bne.n	8003b50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af8:	2280      	movs	r2, #128	@ 0x80
 8003afa:	0391      	lsls	r1, r2, #14
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4a46      	ldr	r2, [pc, #280]	@ (8003c18 <UART_CheckIdleState+0x148>)
 8003b00:	9200      	str	r2, [sp, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f000 f88c 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003b08:	1e03      	subs	r3, r0, #0
 8003b0a:	d021      	beq.n	8003b50 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b16:	2301      	movs	r3, #1
 8003b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2180      	movs	r1, #128	@ 0x80
 8003b2e:	438a      	bics	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2278      	movs	r2, #120	@ 0x78
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e05f      	b.n	8003c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d146      	bne.n	8003bec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b60:	2280      	movs	r2, #128	@ 0x80
 8003b62:	03d1      	lsls	r1, r2, #15
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <UART_CheckIdleState+0x148>)
 8003b68:	9200      	str	r2, [sp, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f000 f858 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003b70:	1e03      	subs	r3, r0, #0
 8003b72:	d03b      	beq.n	8003bec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b74:	f3ef 8310 	mrs	r3, PRIMASK
 8003b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7e:	2301      	movs	r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f383 8810 	msr	PRIMASK, r3
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4921      	ldr	r1, [pc, #132]	@ (8003c1c <UART_CheckIdleState+0x14c>)
 8003b96:	400a      	ands	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f383 8810 	msr	PRIMASK, r3
}
 8003ba4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	438a      	bics	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2280      	movs	r2, #128	@ 0x80
 8003bdc:	2120      	movs	r1, #32
 8003bde:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2278      	movs	r2, #120	@ 0x78
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e011      	b.n	8003c10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2280      	movs	r2, #128	@ 0x80
 8003bf6:	2120      	movs	r1, #32
 8003bf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2278      	movs	r2, #120	@ 0x78
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b010      	add	sp, #64	@ 0x40
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	01ffffff 	.word	0x01ffffff
 8003c1c:	fffffedf 	.word	0xfffffedf

08003c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	1dfb      	adds	r3, r7, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c30:	e051      	b.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	3301      	adds	r3, #1
 8003c36:	d04e      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c38:	f7fd ff12 	bl	8001a60 <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d302      	bcc.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e051      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d03b      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b80      	cmp	r3, #128	@ 0x80
 8003c62:	d038      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b40      	cmp	r3, #64	@ 0x40
 8003c68:	d035      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	2208      	movs	r2, #8
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d111      	bne.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 f83c 	bl	8003d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2284      	movs	r2, #132	@ 0x84
 8003c8c:	2108      	movs	r1, #8
 8003c8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2278      	movs	r2, #120	@ 0x78
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e02c      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	2380      	movs	r3, #128	@ 0x80
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d112      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2280      	movs	r2, #128	@ 0x80
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f000 f81f 	bl	8003d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2284      	movs	r2, #132	@ 0x84
 8003cc6:	2120      	movs	r1, #32
 8003cc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2278      	movs	r2, #120	@ 0x78
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00f      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	425a      	negs	r2, r3
 8003ce6:	4153      	adcs	r3, r2
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	001a      	movs	r2, r3
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d09e      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b004      	add	sp, #16
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	@ 0x38
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d08:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d12:	2301      	movs	r3, #1
 8003d14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f383 8810 	msr	PRIMASK, r3
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4926      	ldr	r1, [pc, #152]	@ (8003dc4 <UART_EndRxTransfer+0xc4>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f383 8810 	msr	PRIMASK, r3
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d3e:	623b      	str	r3, [r7, #32]
  return(result);
 8003d40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d44:	2301      	movs	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	f383 8810 	msr	PRIMASK, r3
}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	f383 8810 	msr	PRIMASK, r3
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d118      	bne.n	8003da6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d74:	f3ef 8310 	mrs	r3, PRIMASK
 8003d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7e:	2301      	movs	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f383 8810 	msr	PRIMASK, r3
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2110      	movs	r1, #16
 8003d96:	438a      	bics	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f383 8810 	msr	PRIMASK, r3
}
 8003da4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2280      	movs	r2, #128	@ 0x80
 8003daa:	2120      	movs	r1, #32
 8003dac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b00e      	add	sp, #56	@ 0x38
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	fffffedf 	.word	0xfffffedf

08003dc8 <memset>:
 8003dc8:	0003      	movs	r3, r0
 8003dca:	1882      	adds	r2, r0, r2
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <memset+0xa>
 8003dd0:	4770      	bx	lr
 8003dd2:	7019      	strb	r1, [r3, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	e7f9      	b.n	8003dcc <memset+0x4>

08003dd8 <__libc_init_array>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	2600      	movs	r6, #0
 8003ddc:	4c0c      	ldr	r4, [pc, #48]	@ (8003e10 <__libc_init_array+0x38>)
 8003dde:	4d0d      	ldr	r5, [pc, #52]	@ (8003e14 <__libc_init_array+0x3c>)
 8003de0:	1b64      	subs	r4, r4, r5
 8003de2:	10a4      	asrs	r4, r4, #2
 8003de4:	42a6      	cmp	r6, r4
 8003de6:	d109      	bne.n	8003dfc <__libc_init_array+0x24>
 8003de8:	2600      	movs	r6, #0
 8003dea:	f000 f823 	bl	8003e34 <_init>
 8003dee:	4c0a      	ldr	r4, [pc, #40]	@ (8003e18 <__libc_init_array+0x40>)
 8003df0:	4d0a      	ldr	r5, [pc, #40]	@ (8003e1c <__libc_init_array+0x44>)
 8003df2:	1b64      	subs	r4, r4, r5
 8003df4:	10a4      	asrs	r4, r4, #2
 8003df6:	42a6      	cmp	r6, r4
 8003df8:	d105      	bne.n	8003e06 <__libc_init_array+0x2e>
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	00b3      	lsls	r3, r6, #2
 8003dfe:	58eb      	ldr	r3, [r5, r3]
 8003e00:	4798      	blx	r3
 8003e02:	3601      	adds	r6, #1
 8003e04:	e7ee      	b.n	8003de4 <__libc_init_array+0xc>
 8003e06:	00b3      	lsls	r3, r6, #2
 8003e08:	58eb      	ldr	r3, [r5, r3]
 8003e0a:	4798      	blx	r3
 8003e0c:	3601      	adds	r6, #1
 8003e0e:	e7f2      	b.n	8003df6 <__libc_init_array+0x1e>
 8003e10:	0800469c 	.word	0x0800469c
 8003e14:	0800469c 	.word	0x0800469c
 8003e18:	080046a0 	.word	0x080046a0
 8003e1c:	0800469c 	.word	0x0800469c

08003e20 <memcpy>:
 8003e20:	2300      	movs	r3, #0
 8003e22:	b510      	push	{r4, lr}
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d100      	bne.n	8003e2a <memcpy+0xa>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	5ccc      	ldrb	r4, [r1, r3]
 8003e2c:	54c4      	strb	r4, [r0, r3]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	e7f8      	b.n	8003e24 <memcpy+0x4>
	...

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
