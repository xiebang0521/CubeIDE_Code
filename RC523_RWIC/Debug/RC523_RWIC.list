
RC523_RWIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002294  08002294  00003294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022cc  080022cc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080022cc  080022cc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022cc  080022cc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022cc  080022cc  000032cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022d0  080022d0  000032d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080022e0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080022e0  00004118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f37  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001917  00000000  00000000  0000cf6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0000e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000658  00000000  00000000  0000f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000019c2  00000000  00000000  0000f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be52  00000000  00000000  000110e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed29  00000000  00000000  0001cf34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000abc5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc0  00000000  00000000  000abca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000ad860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800227c 	.word	0x0800227c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800227c 	.word	0x0800227c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	@ 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f001 fff7 	bl	8002224 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b50      	ldr	r3, [pc, #320]	@ (8000378 <MX_GPIO_Init+0x158>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b4f      	ldr	r3, [pc, #316]	@ (8000378 <MX_GPIO_Init+0x158>)
 800023c:	2180      	movs	r1, #128	@ 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b4c      	ldr	r3, [pc, #304]	@ (8000378 <MX_GPIO_Init+0x158>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b49      	ldr	r3, [pc, #292]	@ (8000378 <MX_GPIO_Init+0x158>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b48      	ldr	r3, [pc, #288]	@ (8000378 <MX_GPIO_Init+0x158>)
 8000258:	2180      	movs	r1, #128	@ 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b45      	ldr	r3, [pc, #276]	@ (8000378 <MX_GPIO_Init+0x158>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b42      	ldr	r3, [pc, #264]	@ (8000378 <MX_GPIO_Init+0x158>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b41      	ldr	r3, [pc, #260]	@ (8000378 <MX_GPIO_Init+0x158>)
 8000274:	2180      	movs	r1, #128	@ 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b3e      	ldr	r3, [pc, #248]	@ (8000378 <MX_GPIO_Init+0x158>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	@ 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b3b      	ldr	r3, [pc, #236]	@ (8000378 <MX_GPIO_Init+0x158>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b3a      	ldr	r3, [pc, #232]	@ (8000378 <MX_GPIO_Init+0x158>)
 8000290:	2180      	movs	r1, #128	@ 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b37      	ldr	r3, [pc, #220]	@ (8000378 <MX_GPIO_Init+0x158>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	@ 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O8A_GPIO_Port, O8A_Pin, GPIO_PIN_RESET);
 80002a6:	2380      	movs	r3, #128	@ 0x80
 80002a8:	019b      	lsls	r3, r3, #6
 80002aa:	4834      	ldr	r0, [pc, #208]	@ (800037c <MX_GPIO_Init+0x15c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	0019      	movs	r1, r3
 80002b0:	f000 fce6 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O8B_GPIO_Port, O8B_Pin, GPIO_PIN_SET);
 80002b4:	2380      	movs	r3, #128	@ 0x80
 80002b6:	01db      	lsls	r3, r3, #7
 80002b8:	4830      	ldr	r0, [pc, #192]	@ (800037c <MX_GPIO_Init+0x15c>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	0019      	movs	r1, r3
 80002be:	f000 fcdf 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1B_Pin|O2B_Pin|O3B_Pin|O5B_Pin
 80002c2:	492f      	ldr	r1, [pc, #188]	@ (8000380 <MX_GPIO_Init+0x160>)
 80002c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000384 <MX_GPIO_Init+0x164>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fcd9 	bl	8000c80 <HAL_GPIO_WritePin>
                          |O6B_Pin|O7B_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O1A_Pin|O2A_Pin|O4A_Pin|O5A_Pin
 80002ce:	492e      	ldr	r1, [pc, #184]	@ (8000388 <MX_GPIO_Init+0x168>)
 80002d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000384 <MX_GPIO_Init+0x164>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fcd3 	bl	8000c80 <HAL_GPIO_WritePin>
                          |O6A_Pin|O7A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O3A_GPIO_Port, O3A_Pin, GPIO_PIN_RESET);
 80002da:	2380      	movs	r3, #128	@ 0x80
 80002dc:	0059      	lsls	r1, r3, #1
 80002de:	2390      	movs	r3, #144	@ 0x90
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	2200      	movs	r2, #0
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fccb 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O4B_GPIO_Port, O4B_Pin, GPIO_PIN_SET);
 80002ea:	2380      	movs	r3, #128	@ 0x80
 80002ec:	0219      	lsls	r1, r3, #8
 80002ee:	2390      	movs	r3, #144	@ 0x90
 80002f0:	05db      	lsls	r3, r3, #23
 80002f2:	2201      	movs	r2, #1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fcc3 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O8A_Pin|O8B_Pin;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	22c0      	movs	r2, #192	@ 0xc0
 80002fe:	01d2      	lsls	r2, r2, #7
 8000300:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2201      	movs	r2, #1
 8000306:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000314:	193b      	adds	r3, r7, r4
 8000316:	4a19      	ldr	r2, [pc, #100]	@ (800037c <MX_GPIO_Init+0x15c>)
 8000318:	0019      	movs	r1, r3
 800031a:	0010      	movs	r0, r2
 800031c:	f000 fb38 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O1B_Pin|O1A_Pin|O2B_Pin|O2A_Pin
 8000320:	193b      	adds	r3, r7, r4
 8000322:	4a1a      	ldr	r2, [pc, #104]	@ (800038c <MX_GPIO_Init+0x16c>)
 8000324:	601a      	str	r2, [r3, #0]
                          |O3B_Pin|O4A_Pin|O5B_Pin|O5A_Pin
                          |O6B_Pin|O6A_Pin|O7B_Pin|O7A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2201      	movs	r2, #1
 800032a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	193b      	adds	r3, r7, r4
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000332:	193b      	adds	r3, r7, r4
 8000334:	2203      	movs	r2, #3
 8000336:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000338:	193b      	adds	r3, r7, r4
 800033a:	4a12      	ldr	r2, [pc, #72]	@ (8000384 <MX_GPIO_Init+0x164>)
 800033c:	0019      	movs	r1, r3
 800033e:	0010      	movs	r0, r2
 8000340:	f000 fb26 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = O3A_Pin|O4B_Pin;
 8000344:	0021      	movs	r1, r4
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2281      	movs	r2, #129	@ 0x81
 800034a:	0212      	lsls	r2, r2, #8
 800034c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2201      	movs	r2, #1
 8000352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2203      	movs	r2, #3
 800035e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000360:	187a      	adds	r2, r7, r1
 8000362:	2390      	movs	r3, #144	@ 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	0011      	movs	r1, r2
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fb11 	bl	8000990 <HAL_GPIO_Init>

}
 800036e:	46c0      	nop			@ (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b00b      	add	sp, #44	@ 0x2c
 8000374:	bd90      	pop	{r4, r7, pc}
 8000376:	46c0      	nop			@ (mov r8, r8)
 8000378:	40021000 	.word	0x40021000
 800037c:	48000800 	.word	0x48000800
 8000380:	0000a950 	.word	0x0000a950
 8000384:	48000400 	.word	0x48000400
 8000388:	000052a8 	.word	0x000052a8
 800038c:	0000fbf8 	.word	0x0000fbf8

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 f9e4 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f808 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f7ff ff40 	bl	8000220 <MX_GPIO_Init>
  MX_SPI1_Init();
 80003a0:	f000 f86a 	bl	8000478 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80003a4:	f000 f934 	bl	8000610 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a8:	46c0      	nop			@ (mov r8, r8)
 80003aa:	e7fd      	b.n	80003a8 <main+0x18>

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b099      	sub	sp, #100	@ 0x64
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	242c      	movs	r4, #44	@ 0x2c
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	0018      	movs	r0, r3
 80003b8:	2334      	movs	r3, #52	@ 0x34
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f001 ff31 	bl	8002224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c2:	231c      	movs	r3, #28
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	0018      	movs	r0, r3
 80003c8:	2310      	movs	r3, #16
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f001 ff29 	bl	8002224 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d2:	003b      	movs	r3, r7
 80003d4:	0018      	movs	r0, r3
 80003d6:	231c      	movs	r3, #28
 80003d8:	001a      	movs	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	f001 ff22 	bl	8002224 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e0:	0021      	movs	r1, r4
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2201      	movs	r2, #1
 80003e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2201      	movs	r2, #1
 80003ec:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2202      	movs	r2, #2
 80003f2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2280      	movs	r2, #128	@ 0x80
 80003f8:	0252      	lsls	r2, r2, #9
 80003fa:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2280      	movs	r2, #128	@ 0x80
 8000400:	0352      	lsls	r2, r2, #13
 8000402:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	187b      	adds	r3, r7, r1
 800040c:	0018      	movs	r0, r3
 800040e:	f000 fc55 	bl	8000cbc <HAL_RCC_OscConfig>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000416:	f000 f828 	bl	800046a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041a:	211c      	movs	r1, #28
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2207      	movs	r2, #7
 8000420:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2202      	movs	r2, #2
 8000426:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2101      	movs	r1, #1
 8000438:	0018      	movs	r0, r3
 800043a:	f000 ffc5 	bl	80013c8 <HAL_RCC_ClockConfig>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000442:	f000 f812 	bl	800046a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000446:	003b      	movs	r3, r7
 8000448:	2201      	movs	r2, #1
 800044a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800044c:	003b      	movs	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	f001 f923 	bl	80016a0 <HAL_RCCEx_PeriphCLKConfig>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800045e:	f000 f804 	bl	800046a <Error_Handler>
  }
}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b019      	add	sp, #100	@ 0x64
 8000468:	bd90      	pop	{r4, r7, pc}

0800046a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046e:	b672      	cpsid	i
}
 8000470:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	e7fd      	b.n	8000472 <Error_Handler+0x8>
	...

08000478 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <MX_SPI1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	@ (80004f0 <MX_SPI1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <MX_SPI1_Init+0x74>)
 8000484:	2282      	movs	r2, #130	@ 0x82
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <MX_SPI1_Init+0x74>)
 8000492:	22e0      	movs	r2, #224	@ 0xe0
 8000494:	00d2      	lsls	r2, r2, #3
 8000496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000498:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <MX_SPI1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004ac:	2208      	movs	r2, #8
 80004ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b6:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004c4:	2207      	movs	r2, #7
 80004c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004d0:	2208      	movs	r2, #8
 80004d2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d4:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <MX_SPI1_Init+0x74>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f9e0 	bl	800189c <HAL_SPI_Init>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80004e0:	f7ff ffc3 	bl	800046a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	20000028 	.word	0x20000028
 80004f0:	40013000 	.word	0x40013000

080004f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b08b      	sub	sp, #44	@ 0x2c
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	2414      	movs	r4, #20
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f001 fe8c 	bl	8002224 <memset>
  if(spiHandle->Instance==SPI1)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a1c      	ldr	r2, [pc, #112]	@ (8000584 <HAL_SPI_MspInit+0x90>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d132      	bne.n	800057c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000516:	4b1c      	ldr	r3, [pc, #112]	@ (8000588 <HAL_SPI_MspInit+0x94>)
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	4b1b      	ldr	r3, [pc, #108]	@ (8000588 <HAL_SPI_MspInit+0x94>)
 800051c:	2180      	movs	r1, #128	@ 0x80
 800051e:	0149      	lsls	r1, r1, #5
 8000520:	430a      	orrs	r2, r1
 8000522:	619a      	str	r2, [r3, #24]
 8000524:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <HAL_SPI_MspInit+0x94>)
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	015b      	lsls	r3, r3, #5
 800052c:	4013      	ands	r3, r2
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <HAL_SPI_MspInit+0x94>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <HAL_SPI_MspInit+0x94>)
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b11      	ldr	r3, [pc, #68]	@ (8000588 <HAL_SPI_MspInit+0x94>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800054e:	0021      	movs	r1, r4
 8000550:	187b      	adds	r3, r7, r1
 8000552:	22f0      	movs	r2, #240	@ 0xf0
 8000554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2202      	movs	r2, #2
 800055a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2203      	movs	r2, #3
 8000566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	187a      	adds	r2, r7, r1
 8000570:	2390      	movs	r3, #144	@ 0x90
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fa0a 	bl	8000990 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b00b      	add	sp, #44	@ 0x2c
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	40013000 	.word	0x40013000
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <HAL_MspInit+0x44>)
 8000594:	699a      	ldr	r2, [r3, #24]
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <HAL_MspInit+0x44>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	619a      	str	r2, [r3, #24]
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <HAL_MspInit+0x44>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <HAL_MspInit+0x44>)
 80005ac:	69da      	ldr	r2, [r3, #28]
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <HAL_MspInit+0x44>)
 80005b0:	2180      	movs	r1, #128	@ 0x80
 80005b2:	0549      	lsls	r1, r1, #21
 80005b4:	430a      	orrs	r2, r1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <HAL_MspInit+0x44>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	055b      	lsls	r3, r3, #21
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d8:	46c0      	nop			@ (mov r8, r8)
 80005da:	e7fd      	b.n	80005d8 <NMI_Handler+0x4>

080005dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	e7fd      	b.n	80005e0 <HardFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 f8f8 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	@ (800066c <MX_USART1_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 800061c:	22e1      	movs	r2, #225	@ 0xe1
 800061e:	0252      	lsls	r2, r2, #9
 8000620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000652:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <MX_USART1_UART_Init+0x58>)
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f9d9 	bl	8001a0c <HAL_UART_Init>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f7ff ff04 	bl	800046a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000008c 	.word	0x2000008c
 800066c:	40013800 	.word	0x40013800

08000670 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b08b      	sub	sp, #44	@ 0x2c
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	2414      	movs	r4, #20
 800067a:	193b      	adds	r3, r7, r4
 800067c:	0018      	movs	r0, r3
 800067e:	2314      	movs	r3, #20
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f001 fdce 	bl	8002224 <memset>
  if(uartHandle->Instance==USART1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <HAL_UART_MspInit+0x94>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d133      	bne.n	80006fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000692:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <HAL_UART_MspInit+0x98>)
 8000694:	699a      	ldr	r2, [r3, #24]
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <HAL_UART_MspInit+0x98>)
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	01c9      	lsls	r1, r1, #7
 800069c:	430a      	orrs	r2, r1
 800069e:	619a      	str	r2, [r3, #24]
 80006a0:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <HAL_UART_MspInit+0x98>)
 80006a2:	699a      	ldr	r2, [r3, #24]
 80006a4:	2380      	movs	r3, #128	@ 0x80
 80006a6:	01db      	lsls	r3, r3, #7
 80006a8:	4013      	ands	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <HAL_UART_MspInit+0x98>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <HAL_UART_MspInit+0x98>)
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	0289      	lsls	r1, r1, #10
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <HAL_UART_MspInit+0x98>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	@ 0x80
 80006c2:	029b      	lsls	r3, r3, #10
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	22c0      	movs	r2, #192	@ 0xc0
 80006ce:	00d2      	lsls	r2, r2, #3
 80006d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2202      	movs	r2, #2
 80006d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2203      	movs	r2, #3
 80006e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2201      	movs	r2, #1
 80006ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	187a      	adds	r2, r7, r1
 80006ee:	2390      	movs	r3, #144	@ 0x90
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 f94b 	bl	8000990 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b00b      	add	sp, #44	@ 0x2c
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	40013800 	.word	0x40013800
 8000708:	40021000 	.word	0x40021000

0800070c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800070c:	480d      	ldr	r0, [pc, #52]	@ (8000744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000710:	f7ff ff79 	bl	8000606 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	@ (8000748 <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	@ (800074c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	@ (8000750 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	@ (8000758 <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073a:	f001 fd7b 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff fe27 	bl	8000390 <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   r0, =_estack
 8000744:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000750:	080022d4 	.word	0x080022d4
  ldr r2, =_sbss
 8000754:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000758:	20000118 	.word	0x20000118

0800075c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_COMP_IRQHandler>
	...

08000760 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <HAL_Init+0x24>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_Init+0x24>)
 800076a:	2110      	movs	r1, #16
 800076c:	430a      	orrs	r2, r1
 800076e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f809 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000776:	f7ff ff09 	bl	800058c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <HAL_InitTick+0x5c>)
 8000792:	681c      	ldr	r4, [r3, #0]
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <HAL_InitTick+0x60>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	0019      	movs	r1, r3
 800079a:	23fa      	movs	r3, #250	@ 0xfa
 800079c:	0098      	lsls	r0, r3, #2
 800079e:	f7ff fcb3 	bl	8000108 <__udivsi3>
 80007a2:	0003      	movs	r3, r0
 80007a4:	0019      	movs	r1, r3
 80007a6:	0020      	movs	r0, r4
 80007a8:	f7ff fcae 	bl	8000108 <__udivsi3>
 80007ac:	0003      	movs	r3, r0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f8e1 	bl	8000976 <HAL_SYSTICK_Config>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e00f      	b.n	80007dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d80b      	bhi.n	80007da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	2301      	movs	r3, #1
 80007c6:	425b      	negs	r3, r3
 80007c8:	2200      	movs	r2, #0
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 f8be 	bl	800094c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <HAL_InitTick+0x64>)
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b003      	add	sp, #12
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	001a      	movs	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	18d2      	adds	r2, r2, r3
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <HAL_IncTick+0x20>)
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	20000008 	.word	0x20000008
 8000810:	20000114 	.word	0x20000114

08000814 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b02      	ldr	r3, [pc, #8]	@ (8000824 <HAL_GetTick+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	20000114 	.word	0x20000114

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b7f      	cmp	r3, #127	@ 0x7f
 800083c:	d828      	bhi.n	8000890 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083e:	4a2f      	ldr	r2, [pc, #188]	@ (80008fc <__NVIC_SetPriority+0xd4>)
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	33c0      	adds	r3, #192	@ 0xc0
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	589b      	ldr	r3, [r3, r2]
 800084e:	1dfa      	adds	r2, r7, #7
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	0011      	movs	r1, r2
 8000854:	2203      	movs	r2, #3
 8000856:	400a      	ands	r2, r1
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	21ff      	movs	r1, #255	@ 0xff
 800085c:	4091      	lsls	r1, r2
 800085e:	000a      	movs	r2, r1
 8000860:	43d2      	mvns	r2, r2
 8000862:	401a      	ands	r2, r3
 8000864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	22ff      	movs	r2, #255	@ 0xff
 800086c:	401a      	ands	r2, r3
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0018      	movs	r0, r3
 8000874:	2303      	movs	r3, #3
 8000876:	4003      	ands	r3, r0
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	481f      	ldr	r0, [pc, #124]	@ (80008fc <__NVIC_SetPriority+0xd4>)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	089b      	lsrs	r3, r3, #2
 8000886:	430a      	orrs	r2, r1
 8000888:	33c0      	adds	r3, #192	@ 0xc0
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800088e:	e031      	b.n	80008f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000890:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <__NVIC_SetPriority+0xd8>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	0019      	movs	r1, r3
 8000898:	230f      	movs	r3, #15
 800089a:	400b      	ands	r3, r1
 800089c:	3b08      	subs	r3, #8
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	3306      	adds	r3, #6
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	3304      	adds	r3, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	0011      	movs	r1, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	400a      	ands	r2, r1
 80008b4:	00d2      	lsls	r2, r2, #3
 80008b6:	21ff      	movs	r1, #255	@ 0xff
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	22ff      	movs	r2, #255	@ 0xff
 80008c8:	401a      	ands	r2, r3
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	2303      	movs	r3, #3
 80008d2:	4003      	ands	r3, r0
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <__NVIC_SetPriority+0xd8>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	001c      	movs	r4, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	4023      	ands	r3, r4
 80008e4:	3b08      	subs	r3, #8
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	430a      	orrs	r2, r1
 80008ea:	3306      	adds	r3, #6
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	18c3      	adds	r3, r0, r3
 80008f0:	3304      	adds	r3, #4
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b003      	add	sp, #12
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	1e5a      	subs	r2, r3, #1
 8000910:	2380      	movs	r3, #128	@ 0x80
 8000912:	045b      	lsls	r3, r3, #17
 8000914:	429a      	cmp	r2, r3
 8000916:	d301      	bcc.n	800091c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000918:	2301      	movs	r3, #1
 800091a:	e010      	b.n	800093e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091c:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <SysTick_Config+0x44>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	3a01      	subs	r2, #1
 8000922:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000924:	2301      	movs	r3, #1
 8000926:	425b      	negs	r3, r3
 8000928:	2103      	movs	r1, #3
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff ff7c 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <SysTick_Config+0x44>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <SysTick_Config+0x44>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	210f      	movs	r1, #15
 8000958:	187b      	adds	r3, r7, r1
 800095a:	1c02      	adds	r2, r0, #0
 800095c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	187b      	adds	r3, r7, r1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff ff5d 	bl	8000828 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ffbf 	bl	8000904 <SysTick_Config>
 8000986:	0003      	movs	r3, r0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e155      	b.n	8000c4c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d100      	bne.n	80009b8 <HAL_GPIO_Init+0x28>
 80009b6:	e146      	b.n	8000c46 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2203      	movs	r2, #3
 80009be:	4013      	ands	r3, r2
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d005      	beq.n	80009d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2203      	movs	r2, #3
 80009ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d130      	bne.n	8000a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	2203      	movs	r2, #3
 80009dc:	409a      	lsls	r2, r3
 80009de:	0013      	movs	r3, r2
 80009e0:	43da      	mvns	r2, r3
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68da      	ldr	r2, [r3, #12]
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	409a      	lsls	r2, r3
 80009f2:	0013      	movs	r3, r2
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a06:	2201      	movs	r2, #1
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2203      	movs	r2, #3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d017      	beq.n	8000a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2203      	movs	r2, #3
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d123      	bne.n	8000ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	08da      	lsrs	r2, r3, #3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3208      	adds	r2, #8
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	58d3      	ldr	r3, [r2, r3]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	220f      	movs	r2, #15
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	691a      	ldr	r2, [r3, #16]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2107      	movs	r1, #7
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	08da      	lsrs	r2, r3, #3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3208      	adds	r2, #8
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	6939      	ldr	r1, [r7, #16]
 8000ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2203      	movs	r2, #3
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	23c0      	movs	r3, #192	@ 0xc0
 8000afc:	029b      	lsls	r3, r3, #10
 8000afe:	4013      	ands	r3, r2
 8000b00:	d100      	bne.n	8000b04 <HAL_GPIO_Init+0x174>
 8000b02:	e0a0      	b.n	8000c46 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b04:	4b57      	ldr	r3, [pc, #348]	@ (8000c64 <HAL_GPIO_Init+0x2d4>)
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	4b56      	ldr	r3, [pc, #344]	@ (8000c64 <HAL_GPIO_Init+0x2d4>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	619a      	str	r2, [r3, #24]
 8000b10:	4b54      	ldr	r3, [pc, #336]	@ (8000c64 <HAL_GPIO_Init+0x2d4>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	2201      	movs	r2, #1
 8000b16:	4013      	ands	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b1c:	4a52      	ldr	r2, [pc, #328]	@ (8000c68 <HAL_GPIO_Init+0x2d8>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	589b      	ldr	r3, [r3, r2]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	409a      	lsls	r2, r3
 8000b36:	0013      	movs	r3, r2
 8000b38:	43da      	mvns	r2, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	2390      	movs	r3, #144	@ 0x90
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d019      	beq.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a47      	ldr	r2, [pc, #284]	@ (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d013      	beq.n	8000b7a <HAL_GPIO_Init+0x1ea>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a46      	ldr	r2, [pc, #280]	@ (8000c70 <HAL_GPIO_Init+0x2e0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d00d      	beq.n	8000b76 <HAL_GPIO_Init+0x1e6>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a45      	ldr	r2, [pc, #276]	@ (8000c74 <HAL_GPIO_Init+0x2e4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d007      	beq.n	8000b72 <HAL_GPIO_Init+0x1e2>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a44      	ldr	r2, [pc, #272]	@ (8000c78 <HAL_GPIO_Init+0x2e8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_GPIO_Init+0x1de>
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	e008      	b.n	8000b80 <HAL_GPIO_Init+0x1f0>
 8000b6e:	2305      	movs	r3, #5
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x1f0>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x1f0>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x1f0>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x1f0>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	2103      	movs	r1, #3
 8000b84:	400a      	ands	r2, r1
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b90:	4935      	ldr	r1, [pc, #212]	@ (8000c68 <HAL_GPIO_Init+0x2d8>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9e:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	035b      	lsls	r3, r3, #13
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43da      	mvns	r2, r3
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	039b      	lsls	r3, r3, #14
 8000be0:	4013      	ands	r3, r2
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bec:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bf2:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	2380      	movs	r3, #128	@ 0x80
 8000c08:	029b      	lsls	r3, r3, #10
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43da      	mvns	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	025b      	lsls	r3, r3, #9
 8000c34:	4013      	ands	r3, r2
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	40da      	lsrs	r2, r3
 8000c54:	1e13      	subs	r3, r2, #0
 8000c56:	d000      	beq.n	8000c5a <HAL_GPIO_Init+0x2ca>
 8000c58:	e6a2      	b.n	80009a0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b006      	add	sp, #24
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48000800 	.word	0x48000800
 8000c74:	48000c00 	.word	0x48000c00
 8000c78:	48001000 	.word	0x48001000
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	0008      	movs	r0, r1
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	1cbb      	adds	r3, r7, #2
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	801a      	strh	r2, [r3, #0]
 8000c92:	1c7b      	adds	r3, r7, #1
 8000c94:	1c0a      	adds	r2, r1, #0
 8000c96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c98:	1c7b      	adds	r3, r7, #1
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d004      	beq.n	8000caa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca0:	1cbb      	adds	r3, r7, #2
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca8:	e003      	b.n	8000cb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000caa:	1cbb      	adds	r3, r7, #2
 8000cac:	881a      	ldrh	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f000 fb76 	bl	80013bc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d100      	bne.n	8000cdc <HAL_RCC_OscConfig+0x20>
 8000cda:	e08e      	b.n	8000dfa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cdc:	4bc5      	ldr	r3, [pc, #788]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	220c      	movs	r2, #12
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d00e      	beq.n	8000d06 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce8:	4bc2      	ldr	r3, [pc, #776]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	220c      	movs	r2, #12
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b08      	cmp	r3, #8
 8000cf2:	d117      	bne.n	8000d24 <HAL_RCC_OscConfig+0x68>
 8000cf4:	4bbf      	ldr	r3, [pc, #764]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	23c0      	movs	r3, #192	@ 0xc0
 8000cfa:	025b      	lsls	r3, r3, #9
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	2380      	movs	r3, #128	@ 0x80
 8000d00:	025b      	lsls	r3, r3, #9
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d10e      	bne.n	8000d24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	4bbb      	ldr	r3, [pc, #748]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	029b      	lsls	r3, r3, #10
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d100      	bne.n	8000d14 <HAL_RCC_OscConfig+0x58>
 8000d12:	e071      	b.n	8000df8 <HAL_RCC_OscConfig+0x13c>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d000      	beq.n	8000d1e <HAL_RCC_OscConfig+0x62>
 8000d1c:	e06c      	b.n	8000df8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f000 fb4c 	bl	80013bc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d107      	bne.n	8000d3c <HAL_RCC_OscConfig+0x80>
 8000d2c:	4bb1      	ldr	r3, [pc, #708]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4bb0      	ldr	r3, [pc, #704]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	0249      	lsls	r1, r1, #9
 8000d36:	430a      	orrs	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e02f      	b.n	8000d9c <HAL_RCC_OscConfig+0xe0>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10c      	bne.n	8000d5e <HAL_RCC_OscConfig+0xa2>
 8000d44:	4bab      	ldr	r3, [pc, #684]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4baa      	ldr	r3, [pc, #680]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d4a:	49ab      	ldr	r1, [pc, #684]	@ (8000ff8 <HAL_RCC_OscConfig+0x33c>)
 8000d4c:	400a      	ands	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	4ba8      	ldr	r3, [pc, #672]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4ba7      	ldr	r3, [pc, #668]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d56:	49a9      	ldr	r1, [pc, #676]	@ (8000ffc <HAL_RCC_OscConfig+0x340>)
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e01e      	b.n	8000d9c <HAL_RCC_OscConfig+0xe0>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d10e      	bne.n	8000d84 <HAL_RCC_OscConfig+0xc8>
 8000d66:	4ba3      	ldr	r3, [pc, #652]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4ba2      	ldr	r3, [pc, #648]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	02c9      	lsls	r1, r1, #11
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	4b9f      	ldr	r3, [pc, #636]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b9e      	ldr	r3, [pc, #632]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xe0>
 8000d84:	4b9b      	ldr	r3, [pc, #620]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b9a      	ldr	r3, [pc, #616]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d8a:	499b      	ldr	r1, [pc, #620]	@ (8000ff8 <HAL_RCC_OscConfig+0x33c>)
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	4b98      	ldr	r3, [pc, #608]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b97      	ldr	r3, [pc, #604]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000d96:	4999      	ldr	r1, [pc, #612]	@ (8000ffc <HAL_RCC_OscConfig+0x340>)
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d014      	beq.n	8000dce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fd36 	bl	8000814 <HAL_GetTick>
 8000da8:	0003      	movs	r3, r0
 8000daa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dae:	f7ff fd31 	bl	8000814 <HAL_GetTick>
 8000db2:	0002      	movs	r2, r0
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b64      	cmp	r3, #100	@ 0x64
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e2fd      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	029b      	lsls	r3, r3, #10
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d0f0      	beq.n	8000dae <HAL_RCC_OscConfig+0xf2>
 8000dcc:	e015      	b.n	8000dfa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dce:	f7ff fd21 	bl	8000814 <HAL_GetTick>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fd1c 	bl	8000814 <HAL_GetTick>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	@ 0x64
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e2e8      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	4b82      	ldr	r3, [pc, #520]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	029b      	lsls	r3, r3, #10
 8000df2:	4013      	ands	r3, r2
 8000df4:	d1f0      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x11c>
 8000df6:	e000      	b.n	8000dfa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4013      	ands	r3, r2
 8000e02:	d100      	bne.n	8000e06 <HAL_RCC_OscConfig+0x14a>
 8000e04:	e06c      	b.n	8000ee0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e06:	4b7b      	ldr	r3, [pc, #492]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d00e      	beq.n	8000e2e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e10:	4b78      	ldr	r3, [pc, #480]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	220c      	movs	r2, #12
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d11f      	bne.n	8000e5c <HAL_RCC_OscConfig+0x1a0>
 8000e1c:	4b75      	ldr	r3, [pc, #468]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	23c0      	movs	r3, #192	@ 0xc0
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	401a      	ands	r2, r3
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d116      	bne.n	8000e5c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2e:	4b71      	ldr	r3, [pc, #452]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2202      	movs	r2, #2
 8000e34:	4013      	ands	r3, r2
 8000e36:	d005      	beq.n	8000e44 <HAL_RCC_OscConfig+0x188>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d001      	beq.n	8000e44 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e2bb      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e44:	4b6b      	ldr	r3, [pc, #428]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	22f8      	movs	r2, #248	@ 0xf8
 8000e4a:	4393      	bics	r3, r2
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	00da      	lsls	r2, r3, #3
 8000e54:	4b67      	ldr	r3, [pc, #412]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	e041      	b.n	8000ee0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d024      	beq.n	8000eae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e64:	4b63      	ldr	r3, [pc, #396]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b62      	ldr	r3, [pc, #392]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fcd0 	bl	8000814 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e7a:	f7ff fccb 	bl	8000814 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e297      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8c:	4b59      	ldr	r3, [pc, #356]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2202      	movs	r2, #2
 8000e92:	4013      	ands	r3, r2
 8000e94:	d0f1      	beq.n	8000e7a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e96:	4b57      	ldr	r3, [pc, #348]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	22f8      	movs	r2, #248	@ 0xf8
 8000e9c:	4393      	bics	r3, r2
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	00da      	lsls	r2, r3, #3
 8000ea6:	4b53      	ldr	r3, [pc, #332]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e018      	b.n	8000ee0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eae:	4b51      	ldr	r3, [pc, #324]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b50      	ldr	r3, [pc, #320]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	438a      	bics	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fcab 	bl	8000814 <HAL_GetTick>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fca6 	bl	8000814 <HAL_GetTick>
 8000ec8:	0002      	movs	r2, r0
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e272      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed6:	4b47      	ldr	r3, [pc, #284]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2202      	movs	r2, #2
 8000edc:	4013      	ands	r3, r2
 8000ede:	d1f1      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d036      	beq.n	8000f58 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d019      	beq.n	8000f26 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef2:	4b40      	ldr	r3, [pc, #256]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fc89 	bl	8000814 <HAL_GetTick>
 8000f02:	0003      	movs	r3, r0
 8000f04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f08:	f7ff fc84 	bl	8000814 <HAL_GetTick>
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e250      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1a:	4b36      	ldr	r3, [pc, #216]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	2202      	movs	r2, #2
 8000f20:	4013      	ands	r3, r2
 8000f22:	d0f1      	beq.n	8000f08 <HAL_RCC_OscConfig+0x24c>
 8000f24:	e018      	b.n	8000f58 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f26:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f2a:	4b32      	ldr	r3, [pc, #200]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	438a      	bics	r2, r1
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fc6f 	bl	8000814 <HAL_GetTick>
 8000f36:	0003      	movs	r3, r0
 8000f38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fc6a 	bl	8000814 <HAL_GetTick>
 8000f40:	0002      	movs	r2, r0
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e236      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	2202      	movs	r2, #2
 8000f54:	4013      	ands	r3, r2
 8000f56:	d1f1      	bne.n	8000f3c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d100      	bne.n	8000f64 <HAL_RCC_OscConfig+0x2a8>
 8000f62:	e0b5      	b.n	80010d0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f64:	201f      	movs	r0, #31
 8000f66:	183b      	adds	r3, r7, r0
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	69da      	ldr	r2, [r3, #28]
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	055b      	lsls	r3, r3, #21
 8000f74:	4013      	ands	r3, r2
 8000f76:	d110      	bne.n	8000f9a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f7a:	69da      	ldr	r2, [r3, #28]
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	2180      	movs	r1, #128	@ 0x80
 8000f80:	0549      	lsls	r1, r1, #21
 8000f82:	430a      	orrs	r2, r1
 8000f84:	61da      	str	r2, [r3, #28]
 8000f86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	055b      	lsls	r3, r3, #21
 8000f8e:	4013      	ands	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_RCC_OscConfig+0x344>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d11a      	bne.n	8000fdc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_RCC_OscConfig+0x344>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_RCC_OscConfig+0x344>)
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	0049      	lsls	r1, r1, #1
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fc2e 	bl	8000814 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fbe:	f7ff fc29 	bl	8000814 <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b64      	cmp	r3, #100	@ 0x64
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e1f5      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_RCC_OscConfig+0x344>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d10f      	bne.n	8001004 <HAL_RCC_OscConfig+0x348>
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000fe6:	6a1a      	ldr	r2, [r3, #32]
 8000fe8:	4b02      	ldr	r3, [pc, #8]	@ (8000ff4 <HAL_RCC_OscConfig+0x338>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	621a      	str	r2, [r3, #32]
 8000ff0:	e036      	b.n	8001060 <HAL_RCC_OscConfig+0x3a4>
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	fffeffff 	.word	0xfffeffff
 8000ffc:	fffbffff 	.word	0xfffbffff
 8001000:	40007000 	.word	0x40007000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10c      	bne.n	8001026 <HAL_RCC_OscConfig+0x36a>
 800100c:	4bca      	ldr	r3, [pc, #808]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800100e:	6a1a      	ldr	r2, [r3, #32]
 8001010:	4bc9      	ldr	r3, [pc, #804]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001012:	2101      	movs	r1, #1
 8001014:	438a      	bics	r2, r1
 8001016:	621a      	str	r2, [r3, #32]
 8001018:	4bc7      	ldr	r3, [pc, #796]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	4bc6      	ldr	r3, [pc, #792]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800101e:	2104      	movs	r1, #4
 8001020:	438a      	bics	r2, r1
 8001022:	621a      	str	r2, [r3, #32]
 8001024:	e01c      	b.n	8001060 <HAL_RCC_OscConfig+0x3a4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b05      	cmp	r3, #5
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x38c>
 800102e:	4bc2      	ldr	r3, [pc, #776]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001030:	6a1a      	ldr	r2, [r3, #32]
 8001032:	4bc1      	ldr	r3, [pc, #772]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001034:	2104      	movs	r1, #4
 8001036:	430a      	orrs	r2, r1
 8001038:	621a      	str	r2, [r3, #32]
 800103a:	4bbf      	ldr	r3, [pc, #764]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800103c:	6a1a      	ldr	r2, [r3, #32]
 800103e:	4bbe      	ldr	r3, [pc, #760]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001040:	2101      	movs	r1, #1
 8001042:	430a      	orrs	r2, r1
 8001044:	621a      	str	r2, [r3, #32]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0x3a4>
 8001048:	4bbb      	ldr	r3, [pc, #748]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800104a:	6a1a      	ldr	r2, [r3, #32]
 800104c:	4bba      	ldr	r3, [pc, #744]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800104e:	2101      	movs	r1, #1
 8001050:	438a      	bics	r2, r1
 8001052:	621a      	str	r2, [r3, #32]
 8001054:	4bb8      	ldr	r3, [pc, #736]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001056:	6a1a      	ldr	r2, [r3, #32]
 8001058:	4bb7      	ldr	r3, [pc, #732]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800105a:	2104      	movs	r1, #4
 800105c:	438a      	bics	r2, r1
 800105e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d014      	beq.n	8001092 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001068:	f7ff fbd4 	bl	8000814 <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001070:	e009      	b.n	8001086 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001072:	f7ff fbcf 	bl	8000814 <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	4aaf      	ldr	r2, [pc, #700]	@ (800133c <HAL_RCC_OscConfig+0x680>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e19a      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001086:	4bac      	ldr	r3, [pc, #688]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	2202      	movs	r2, #2
 800108c:	4013      	ands	r3, r2
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x3b6>
 8001090:	e013      	b.n	80010ba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001092:	f7ff fbbf 	bl	8000814 <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109a:	e009      	b.n	80010b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800109c:	f7ff fbba 	bl	8000814 <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	4aa5      	ldr	r2, [pc, #660]	@ (800133c <HAL_RCC_OscConfig+0x680>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e185      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b0:	4ba1      	ldr	r3, [pc, #644]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	2202      	movs	r2, #2
 80010b6:	4013      	ands	r3, r2
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010ba:	231f      	movs	r3, #31
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d105      	bne.n	80010d0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80010c6:	69da      	ldr	r2, [r3, #28]
 80010c8:	4b9b      	ldr	r3, [pc, #620]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80010ca:	499d      	ldr	r1, [pc, #628]	@ (8001340 <HAL_RCC_OscConfig+0x684>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2210      	movs	r2, #16
 80010d6:	4013      	ands	r3, r2
 80010d8:	d063      	beq.n	80011a2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d12a      	bne.n	8001138 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010e2:	4b95      	ldr	r3, [pc, #596]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80010e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e6:	4b94      	ldr	r3, [pc, #592]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80010e8:	2104      	movs	r1, #4
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010ee:	4b92      	ldr	r3, [pc, #584]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80010f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010f2:	4b91      	ldr	r3, [pc, #580]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80010f4:	2101      	movs	r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fb8b 	bl	8000814 <HAL_GetTick>
 80010fe:	0003      	movs	r3, r0
 8001100:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001104:	f7ff fb86 	bl	8000814 <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e152      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001116:	4b88      	ldr	r3, [pc, #544]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111a:	2202      	movs	r2, #2
 800111c:	4013      	ands	r3, r2
 800111e:	d0f1      	beq.n	8001104 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001120:	4b85      	ldr	r3, [pc, #532]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001124:	22f8      	movs	r2, #248	@ 0xf8
 8001126:	4393      	bics	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	00da      	lsls	r2, r3, #3
 8001130:	4b81      	ldr	r3, [pc, #516]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001132:	430a      	orrs	r2, r1
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34
 8001136:	e034      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	3305      	adds	r3, #5
 800113e:	d111      	bne.n	8001164 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001140:	4b7d      	ldr	r3, [pc, #500]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001144:	4b7c      	ldr	r3, [pc, #496]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001146:	2104      	movs	r1, #4
 8001148:	438a      	bics	r2, r1
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800114c:	4b7a      	ldr	r3, [pc, #488]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800114e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001150:	22f8      	movs	r2, #248	@ 0xf8
 8001152:	4393      	bics	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	00da      	lsls	r2, r3, #3
 800115c:	4b76      	ldr	r3, [pc, #472]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800115e:	430a      	orrs	r2, r1
 8001160:	635a      	str	r2, [r3, #52]	@ 0x34
 8001162:	e01e      	b.n	80011a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001164:	4b74      	ldr	r3, [pc, #464]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001168:	4b73      	ldr	r3, [pc, #460]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800116a:	2104      	movs	r1, #4
 800116c:	430a      	orrs	r2, r1
 800116e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001170:	4b71      	ldr	r3, [pc, #452]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001174:	4b70      	ldr	r3, [pc, #448]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001176:	2101      	movs	r1, #1
 8001178:	438a      	bics	r2, r1
 800117a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117c:	f7ff fb4a 	bl	8000814 <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001186:	f7ff fb45 	bl	8000814 <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e111      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001198:	4b67      	ldr	r3, [pc, #412]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800119a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119c:	2202      	movs	r2, #2
 800119e:	4013      	ands	r3, r2
 80011a0:	d1f1      	bne.n	8001186 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2220      	movs	r2, #32
 80011a8:	4013      	ands	r3, r2
 80011aa:	d05c      	beq.n	8001266 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011ac:	4b62      	ldr	r3, [pc, #392]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	220c      	movs	r2, #12
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b0c      	cmp	r3, #12
 80011b6:	d00e      	beq.n	80011d6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	220c      	movs	r2, #12
 80011be:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d114      	bne.n	80011ee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	23c0      	movs	r3, #192	@ 0xc0
 80011ca:	025b      	lsls	r3, r3, #9
 80011cc:	401a      	ands	r2, r3
 80011ce:	23c0      	movs	r3, #192	@ 0xc0
 80011d0:	025b      	lsls	r3, r3, #9
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d10b      	bne.n	80011ee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011d6:	4b58      	ldr	r3, [pc, #352]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80011d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011da:	2380      	movs	r3, #128	@ 0x80
 80011dc:	029b      	lsls	r3, r3, #10
 80011de:	4013      	ands	r3, r2
 80011e0:	d040      	beq.n	8001264 <HAL_RCC_OscConfig+0x5a8>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d03c      	beq.n	8001264 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0e6      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01b      	beq.n	800122e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011f6:	4b50      	ldr	r3, [pc, #320]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80011f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80011fc:	2180      	movs	r1, #128	@ 0x80
 80011fe:	0249      	lsls	r1, r1, #9
 8001200:	430a      	orrs	r2, r1
 8001202:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb06 	bl	8000814 <HAL_GetTick>
 8001208:	0003      	movs	r3, r0
 800120a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800120e:	f7ff fb01 	bl	8000814 <HAL_GetTick>
 8001212:	0002      	movs	r2, r0
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0cd      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001220:	4b45      	ldr	r3, [pc, #276]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x552>
 800122c:	e01b      	b.n	8001266 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800122e:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001232:	4b41      	ldr	r3, [pc, #260]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001234:	4943      	ldr	r1, [pc, #268]	@ (8001344 <HAL_RCC_OscConfig+0x688>)
 8001236:	400a      	ands	r2, r1
 8001238:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff faeb 	bl	8000814 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001244:	f7ff fae6 	bl	8000814 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e0b2      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001256:	4b38      	ldr	r3, [pc, #224]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	029b      	lsls	r3, r3, #10
 800125e:	4013      	ands	r3, r2
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x588>
 8001262:	e000      	b.n	8001266 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001264:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	2b00      	cmp	r3, #0
 800126c:	d100      	bne.n	8001270 <HAL_RCC_OscConfig+0x5b4>
 800126e:	e0a4      	b.n	80013ba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001270:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	220c      	movs	r2, #12
 8001276:	4013      	ands	r3, r2
 8001278:	2b08      	cmp	r3, #8
 800127a:	d100      	bne.n	800127e <HAL_RCC_OscConfig+0x5c2>
 800127c:	e078      	b.n	8001370 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001282:	2b02      	cmp	r3, #2
 8001284:	d14c      	bne.n	8001320 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001286:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 800128c:	492e      	ldr	r1, [pc, #184]	@ (8001348 <HAL_RCC_OscConfig+0x68c>)
 800128e:	400a      	ands	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fabf 	bl	8000814 <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff faba 	bl	8000814 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e086      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	049b      	lsls	r3, r3, #18
 80012b6:	4013      	ands	r3, r2
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80012bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012be:	220f      	movs	r2, #15
 80012c0:	4393      	bics	r3, r2
 80012c2:	0019      	movs	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a1e      	ldr	r2, [pc, #120]	@ (800134c <HAL_RCC_OscConfig+0x690>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	431a      	orrs	r2, r3
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 80012ee:	2180      	movs	r1, #128	@ 0x80
 80012f0:	0449      	lsls	r1, r1, #17
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fa8d 	bl	8000814 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff fa88 	bl	8000814 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e054      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	049b      	lsls	r3, r3, #18
 800131a:	4013      	ands	r3, r2
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x644>
 800131e:	e04c      	b.n	80013ba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <HAL_RCC_OscConfig+0x67c>)
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <HAL_RCC_OscConfig+0x68c>)
 8001328:	400a      	ands	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fa72 	bl	8000814 <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x6a6>
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	40021000 	.word	0x40021000
 800133c:	00001388 	.word	0x00001388
 8001340:	efffffff 	.word	0xefffffff
 8001344:	fffeffff 	.word	0xfffeffff
 8001348:	feffffff 	.word	0xfeffffff
 800134c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff fa60 	bl	8000814 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e02c      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_RCC_OscConfig+0x708>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	049b      	lsls	r3, r3, #18
 800136a:	4013      	ands	r3, r2
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x694>
 800136e:	e024      	b.n	80013ba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e01f      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_RCC_OscConfig+0x708>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <HAL_RCC_OscConfig+0x708>)
 8001384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001386:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	23c0      	movs	r3, #192	@ 0xc0
 800138c:	025b      	lsls	r3, r3, #9
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	429a      	cmp	r2, r3
 8001396:	d10e      	bne.n	80013b6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	220f      	movs	r2, #15
 800139c:	401a      	ands	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	23f0      	movs	r3, #240	@ 0xf0
 80013aa:	039b      	lsls	r3, r3, #14
 80013ac:	401a      	ands	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b008      	add	sp, #32
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0bf      	b.n	800155c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b61      	ldr	r3, [pc, #388]	@ (8001564 <HAL_RCC_ClockConfig+0x19c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d911      	bls.n	800140e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001564 <HAL_RCC_ClockConfig+0x19c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2201      	movs	r2, #1
 80013f0:	4393      	bics	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001564 <HAL_RCC_ClockConfig+0x19c>)
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fc:	4b59      	ldr	r3, [pc, #356]	@ (8001564 <HAL_RCC_ClockConfig+0x19c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d001      	beq.n	800140e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0a6      	b.n	800155c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d015      	beq.n	8001444 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2204      	movs	r2, #4
 800141e:	4013      	ands	r3, r2
 8001420:	d006      	beq.n	8001430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001422:	4b51      	ldr	r3, [pc, #324]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001428:	21e0      	movs	r1, #224	@ 0xe0
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001430:	4b4d      	ldr	r3, [pc, #308]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	22f0      	movs	r2, #240	@ 0xf0
 8001436:	4393      	bics	r3, r2
 8001438:	0019      	movs	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4b4a      	ldr	r3, [pc, #296]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4013      	ands	r3, r2
 800144c:	d04c      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b44      	ldr	r3, [pc, #272]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	4013      	ands	r3, r2
 8001460:	d120      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e07a      	b.n	800155c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	049b      	lsls	r3, r3, #18
 8001476:	4013      	ands	r3, r2
 8001478:	d114      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e06e      	b.n	800155c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001486:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	029b      	lsls	r3, r3, #10
 800148e:	4013      	ands	r3, r2
 8001490:	d108      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e062      	b.n	800155c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b34      	ldr	r3, [pc, #208]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e05b      	b.n	800155c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a4:	4b30      	ldr	r3, [pc, #192]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2203      	movs	r2, #3
 80014aa:	4393      	bics	r3, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff f9ac 	bl	8000814 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c0:	e009      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c2:	f7ff f9a7 	bl	8000814 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a27      	ldr	r2, [pc, #156]	@ (800156c <HAL_RCC_ClockConfig+0x1a4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e042      	b.n	800155c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	220c      	movs	r2, #12
 80014dc:	401a      	ands	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1ec      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <HAL_RCC_ClockConfig+0x19c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d211      	bcs.n	800151a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_ClockConfig+0x19c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2201      	movs	r2, #1
 80014fc:	4393      	bics	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_RCC_ClockConfig+0x19c>)
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_RCC_ClockConfig+0x19c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	4013      	ands	r3, r2
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d001      	beq.n	800151a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e020      	b.n	800155c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2204      	movs	r2, #4
 8001520:	4013      	ands	r3, r2
 8001522:	d009      	beq.n	8001538 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a11      	ldr	r2, [pc, #68]	@ (8001570 <HAL_RCC_ClockConfig+0x1a8>)
 800152a:	4013      	ands	r3, r2
 800152c:	0019      	movs	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001538:	f000 f820 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800153c:	0001      	movs	r1, r0
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_RCC_ClockConfig+0x1a0>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	220f      	movs	r2, #15
 8001546:	4013      	ands	r3, r2
 8001548:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_RCC_ClockConfig+0x1ac>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	000a      	movs	r2, r1
 800154e:	40da      	lsrs	r2, r3
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_RCC_ClockConfig+0x1b0>)
 8001552:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001554:	2003      	movs	r0, #3
 8001556:	f7ff f917 	bl	8000788 <HAL_InitTick>
  
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40022000 	.word	0x40022000
 8001568:	40021000 	.word	0x40021000
 800156c:	00001388 	.word	0x00001388
 8001570:	fffff8ff 	.word	0xfffff8ff
 8001574:	08002294 	.word	0x08002294
 8001578:	20000000 	.word	0x20000000

0800157c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	220c      	movs	r2, #12
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d046      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0xb8>
 80015a6:	d848      	bhi.n	800163a <HAL_RCC_GetSysClockFreq+0xbe>
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d002      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x36>
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d003      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x3c>
 80015b0:	e043      	b.n	800163a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015b2:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015b4:	613b      	str	r3, [r7, #16]
      break;
 80015b6:	e043      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	220f      	movs	r2, #15
 80015be:	4013      	ands	r3, r2
 80015c0:	4a24      	ldr	r2, [pc, #144]	@ (8001654 <HAL_RCC_GetSysClockFreq+0xd8>)
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_RCC_GetSysClockFreq+0xd0>)
 80015c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ca:	220f      	movs	r2, #15
 80015cc:	4013      	ands	r3, r2
 80015ce:	4a22      	ldr	r2, [pc, #136]	@ (8001658 <HAL_RCC_GetSysClockFreq+0xdc>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	23c0      	movs	r3, #192	@ 0xc0
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	401a      	ands	r2, r3
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d109      	bne.n	80015f8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	481a      	ldr	r0, [pc, #104]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015e8:	f7fe fd8e 	bl	8000108 <__udivsi3>
 80015ec:	0003      	movs	r3, r0
 80015ee:	001a      	movs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4353      	muls	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e01a      	b.n	800162e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	23c0      	movs	r3, #192	@ 0xc0
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	401a      	ands	r2, r3
 8001600:	23c0      	movs	r3, #192	@ 0xc0
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	429a      	cmp	r2, r3
 8001606:	d109      	bne.n	800161c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	4814      	ldr	r0, [pc, #80]	@ (800165c <HAL_RCC_GetSysClockFreq+0xe0>)
 800160c:	f7fe fd7c 	bl	8000108 <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	001a      	movs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4353      	muls	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e008      	b.n	800162e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	480c      	ldr	r0, [pc, #48]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001620:	f7fe fd72 	bl	8000108 <__udivsi3>
 8001624:	0003      	movs	r3, r0
 8001626:	001a      	movs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4353      	muls	r3, r2
 800162c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	613b      	str	r3, [r7, #16]
      break;
 8001632:	e005      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001636:	613b      	str	r3, [r7, #16]
      break;
 8001638:	e002      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800163a:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xd4>)
 800163c:	613b      	str	r3, [r7, #16]
      break;
 800163e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001640:	693b      	ldr	r3, [r7, #16]
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b006      	add	sp, #24
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	40021000 	.word	0x40021000
 8001650:	007a1200 	.word	0x007a1200
 8001654:	080022ac 	.word	0x080022ac
 8001658:	080022bc 	.word	0x080022bc
 800165c:	02dc6c00 	.word	0x02dc6c00

08001660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001664:	4b02      	ldr	r3, [pc, #8]	@ (8001670 <HAL_RCC_GetHCLKFreq+0x10>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001678:	f7ff fff2 	bl	8001660 <HAL_RCC_GetHCLKFreq>
 800167c:	0001      	movs	r1, r0
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	2207      	movs	r2, #7
 8001686:	4013      	ands	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <HAL_RCC_GetPCLK1Freq+0x28>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	40d9      	lsrs	r1, r3
 800168e:	000b      	movs	r3, r1
}    
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	40021000 	.word	0x40021000
 800169c:	080022a4 	.word	0x080022a4

080016a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	025b      	lsls	r3, r3, #9
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016bc:	e08e      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2017      	movs	r0, #23
 80016c0:	183b      	adds	r3, r7, r0
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	055b      	lsls	r3, r3, #21
 80016ce:	4013      	ands	r3, r2
 80016d0:	d110      	bne.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	0549      	lsls	r1, r1, #21
 80016dc:	430a      	orrs	r2, r1
 80016de:	61da      	str	r2, [r3, #28]
 80016e0:	4b67      	ldr	r3, [pc, #412]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	055b      	lsls	r3, r3, #21
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b63      	ldr	r3, [pc, #396]	@ (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	d11a      	bne.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001700:	4b60      	ldr	r3, [pc, #384]	@ (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b5f      	ldr	r3, [pc, #380]	@ (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	0049      	lsls	r1, r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff f881 	bl	8000814 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	e008      	b.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001718:	f7ff f87c 	bl	8000814 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	@ 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0a6      	b.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	4b56      	ldr	r3, [pc, #344]	@ (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	@ 0x80
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4013      	ands	r3, r2
 8001734:	d0f0      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001736:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001738:	6a1a      	ldr	r2, [r3, #32]
 800173a:	23c0      	movs	r3, #192	@ 0xc0
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d034      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	23c0      	movs	r3, #192	@ 0xc0
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4013      	ands	r3, r2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d02c      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001758:	4b49      	ldr	r3, [pc, #292]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a4a      	ldr	r2, [pc, #296]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001762:	4b47      	ldr	r3, [pc, #284]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	4b46      	ldr	r3, [pc, #280]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001768:	2180      	movs	r1, #128	@ 0x80
 800176a:	0249      	lsls	r1, r1, #9
 800176c:	430a      	orrs	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001770:	4b43      	ldr	r3, [pc, #268]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4b42      	ldr	r3, [pc, #264]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001776:	4945      	ldr	r1, [pc, #276]	@ (800188c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001778:	400a      	ands	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800177c:	4b40      	ldr	r3, [pc, #256]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff f843 	bl	8000814 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	e009      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff f83e 	bl	8000814 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a3c      	ldr	r2, [pc, #240]	@ (8001890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e067      	b.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017b2:	4b33      	ldr	r3, [pc, #204]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a34      	ldr	r2, [pc, #208]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017c6:	2317      	movs	r3, #23
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d6:	492f      	ldr	r1, [pc, #188]	@ (8001894 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80017d8:	400a      	ands	r2, r1
 80017da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	d009      	beq.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017e6:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	2203      	movs	r2, #3
 80017ec:	4393      	bics	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d009      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001808:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800180a:	4013      	ands	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001814:	430a      	orrs	r2, r1
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2220      	movs	r2, #32
 800181e:	4013      	ands	r3, r2
 8001820:	d009      	beq.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	2210      	movs	r2, #16
 8001828:	4393      	bics	r3, r2
 800182a:	0019      	movs	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001832:	430a      	orrs	r2, r1
 8001834:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4013      	ands	r3, r2
 8001840:	d009      	beq.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	2280      	movs	r2, #128	@ 0x80
 8001848:	4393      	bics	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001852:	430a      	orrs	r2, r1
 8001854:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4013      	ands	r3, r2
 8001860:	d009      	beq.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	2240      	movs	r2, #64	@ 0x40
 8001868:	4393      	bics	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001872:	430a      	orrs	r2, r1
 8001874:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b006      	add	sp, #24
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
 8001888:	fffffcff 	.word	0xfffffcff
 800188c:	fffeffff 	.word	0xfffeffff
 8001890:	00001388 	.word	0x00001388
 8001894:	efffffff 	.word	0xefffffff
 8001898:	fffcffff 	.word	0xfffcffff

0800189c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0a8      	b.n	8001a00 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	2382      	movs	r3, #130	@ 0x82
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	429a      	cmp	r2, r3
 80018c0:	d009      	beq.n	80018d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
 80018c8:	e005      	b.n	80018d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	225d      	movs	r2, #93	@ 0x5d
 80018e0:	5c9b      	ldrb	r3, [r3, r2]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	225c      	movs	r2, #92	@ 0x5c
 80018ec:	2100      	movs	r1, #0
 80018ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7fe fdfe 	bl	80004f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	225d      	movs	r2, #93	@ 0x5d
 80018fc:	2102      	movs	r1, #2
 80018fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2140      	movs	r1, #64	@ 0x40
 800190c:	438a      	bics	r2, r1
 800190e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	23e0      	movs	r3, #224	@ 0xe0
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	429a      	cmp	r2, r3
 800191a:	d902      	bls.n	8001922 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e002      	b.n	8001928 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	015b      	lsls	r3, r3, #5
 8001926:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	23f0      	movs	r3, #240	@ 0xf0
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	429a      	cmp	r2, r3
 8001932:	d008      	beq.n	8001946 <HAL_SPI_Init+0xaa>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	23e0      	movs	r3, #224	@ 0xe0
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	429a      	cmp	r2, r3
 800193e:	d002      	beq.n	8001946 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	2382      	movs	r3, #130	@ 0x82
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6899      	ldr	r1, [r3, #8]
 8001954:	2384      	movs	r3, #132	@ 0x84
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	400b      	ands	r3, r1
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2102      	movs	r1, #2
 8001962:	400b      	ands	r3, r1
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2101      	movs	r1, #1
 800196c:	400b      	ands	r3, r1
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6999      	ldr	r1, [r3, #24]
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	400b      	ands	r3, r1
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2138      	movs	r1, #56	@ 0x38
 8001982:	400b      	ands	r3, r1
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	400b      	ands	r3, r1
 800198e:	431a      	orrs	r2, r3
 8001990:	0011      	movs	r1, r2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	401a      	ands	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	2204      	movs	r2, #4
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	2110      	movs	r1, #16
 80019b4:	400b      	ands	r3, r1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019bc:	2108      	movs	r1, #8
 80019be:	400b      	ands	r3, r1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68d9      	ldr	r1, [r3, #12]
 80019c6:	23f0      	movs	r3, #240	@ 0xf0
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	400b      	ands	r3, r1
 80019cc:	431a      	orrs	r2, r3
 80019ce:	0011      	movs	r1, r2
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	2380      	movs	r3, #128	@ 0x80
 80019d4:	015b      	lsls	r3, r3, #5
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4907      	ldr	r1, [pc, #28]	@ (8001a08 <HAL_SPI_Init+0x16c>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	225d      	movs	r2, #93	@ 0x5d
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b004      	add	sp, #16
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	fffff7ff 	.word	0xfffff7ff

08001a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e044      	b.n	8001aa8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d107      	bne.n	8001a36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2278      	movs	r2, #120	@ 0x78
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7fe fe1d 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2224      	movs	r2, #36	@ 0x24
 8001a3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 f9b4 	bl	8001dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 f828 	bl	8001ab4 <UART_SetConfig>
 8001a64:	0003      	movs	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e01c      	b.n	8001aa8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	490d      	ldr	r1, [pc, #52]	@ (8001ab0 <HAL_UART_Init+0xa4>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	212a      	movs	r1, #42	@ 0x2a
 8001a8a:	438a      	bics	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 fa43 	bl	8001f2c <UART_CheckIdleState>
 8001aa6:	0003      	movs	r3, r0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	ffffb7ff 	.word	0xffffb7ff

08001ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001abc:	231e      	movs	r3, #30
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4aaf      	ldr	r2, [pc, #700]	@ (8001da0 <UART_SetConfig+0x2ec>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4aaa      	ldr	r2, [pc, #680]	@ (8001da4 <UART_SetConfig+0x2f0>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4aa1      	ldr	r2, [pc, #644]	@ (8001da8 <UART_SetConfig+0x2f4>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a9d      	ldr	r2, [pc, #628]	@ (8001dac <UART_SetConfig+0x2f8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d127      	bne.n	8001b8a <UART_SetConfig+0xd6>
 8001b3a:	4b9d      	ldr	r3, [pc, #628]	@ (8001db0 <UART_SetConfig+0x2fc>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	2203      	movs	r2, #3
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d00d      	beq.n	8001b62 <UART_SetConfig+0xae>
 8001b46:	d81b      	bhi.n	8001b80 <UART_SetConfig+0xcc>
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d014      	beq.n	8001b76 <UART_SetConfig+0xc2>
 8001b4c:	d818      	bhi.n	8001b80 <UART_SetConfig+0xcc>
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <UART_SetConfig+0xa4>
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00a      	beq.n	8001b6c <UART_SetConfig+0xb8>
 8001b56:	e013      	b.n	8001b80 <UART_SetConfig+0xcc>
 8001b58:	231f      	movs	r3, #31
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	e065      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001b62:	231f      	movs	r3, #31
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2202      	movs	r2, #2
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	e060      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001b6c:	231f      	movs	r3, #31
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2204      	movs	r2, #4
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e05b      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001b76:	231f      	movs	r3, #31
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e056      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001b80:	231f      	movs	r3, #31
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2210      	movs	r2, #16
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e051      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a89      	ldr	r2, [pc, #548]	@ (8001db4 <UART_SetConfig+0x300>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d134      	bne.n	8001bfe <UART_SetConfig+0x14a>
 8001b94:	4b86      	ldr	r3, [pc, #536]	@ (8001db0 <UART_SetConfig+0x2fc>)
 8001b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b98:	23c0      	movs	r3, #192	@ 0xc0
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	22c0      	movs	r2, #192	@ 0xc0
 8001ba0:	0292      	lsls	r2, r2, #10
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d017      	beq.n	8001bd6 <UART_SetConfig+0x122>
 8001ba6:	22c0      	movs	r2, #192	@ 0xc0
 8001ba8:	0292      	lsls	r2, r2, #10
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d822      	bhi.n	8001bf4 <UART_SetConfig+0x140>
 8001bae:	2280      	movs	r2, #128	@ 0x80
 8001bb0:	0292      	lsls	r2, r2, #10
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <UART_SetConfig+0x136>
 8001bb6:	2280      	movs	r2, #128	@ 0x80
 8001bb8:	0292      	lsls	r2, r2, #10
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d81a      	bhi.n	8001bf4 <UART_SetConfig+0x140>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <UART_SetConfig+0x118>
 8001bc2:	2280      	movs	r2, #128	@ 0x80
 8001bc4:	0252      	lsls	r2, r2, #9
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00a      	beq.n	8001be0 <UART_SetConfig+0x12c>
 8001bca:	e013      	b.n	8001bf4 <UART_SetConfig+0x140>
 8001bcc:	231f      	movs	r3, #31
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	e02b      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001bd6:	231f      	movs	r3, #31
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	e026      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001be0:	231f      	movs	r3, #31
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	2204      	movs	r2, #4
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e021      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001bea:	231f      	movs	r3, #31
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2208      	movs	r2, #8
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e01c      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001bf4:	231f      	movs	r3, #31
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	e017      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6d      	ldr	r2, [pc, #436]	@ (8001db8 <UART_SetConfig+0x304>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d104      	bne.n	8001c12 <UART_SetConfig+0x15e>
 8001c08:	231f      	movs	r3, #31
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	e00d      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a69      	ldr	r2, [pc, #420]	@ (8001dbc <UART_SetConfig+0x308>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d104      	bne.n	8001c26 <UART_SetConfig+0x172>
 8001c1c:	231f      	movs	r3, #31
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	e003      	b.n	8001c2e <UART_SetConfig+0x17a>
 8001c26:	231f      	movs	r3, #31
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d15c      	bne.n	8001cf4 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8001c3a:	231f      	movs	r3, #31
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d015      	beq.n	8001c70 <UART_SetConfig+0x1bc>
 8001c44:	dc18      	bgt.n	8001c78 <UART_SetConfig+0x1c4>
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d00d      	beq.n	8001c66 <UART_SetConfig+0x1b2>
 8001c4a:	dc15      	bgt.n	8001c78 <UART_SetConfig+0x1c4>
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <UART_SetConfig+0x1a2>
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d005      	beq.n	8001c60 <UART_SetConfig+0x1ac>
 8001c54:	e010      	b.n	8001c78 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c56:	f7ff fd0d 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	61bb      	str	r3, [r7, #24]
        break;
 8001c5e:	e012      	b.n	8001c86 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001c60:	4b57      	ldr	r3, [pc, #348]	@ (8001dc0 <UART_SetConfig+0x30c>)
 8001c62:	61bb      	str	r3, [r7, #24]
        break;
 8001c64:	e00f      	b.n	8001c86 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c66:	f7ff fc89 	bl	800157c <HAL_RCC_GetSysClockFreq>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	61bb      	str	r3, [r7, #24]
        break;
 8001c6e:	e00a      	b.n	8001c86 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	61bb      	str	r3, [r7, #24]
        break;
 8001c76:	e006      	b.n	8001c86 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001c7c:	231e      	movs	r3, #30
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
        break;
 8001c84:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d100      	bne.n	8001c8e <UART_SetConfig+0x1da>
 8001c8c:	e07a      	b.n	8001d84 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	005a      	lsls	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	18d2      	adds	r2, r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	0010      	movs	r0, r2
 8001ca2:	f7fe fa31 	bl	8000108 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d91c      	bls.n	8001cea <UART_SetConfig+0x236>
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	025b      	lsls	r3, r3, #9
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d217      	bcs.n	8001cea <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	200e      	movs	r0, #14
 8001cc0:	183b      	adds	r3, r7, r0
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2207      	movs	r2, #7
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	b299      	uxth	r1, r3
 8001cd4:	183b      	adds	r3, r7, r0
 8001cd6:	183a      	adds	r2, r7, r0
 8001cd8:	8812      	ldrh	r2, [r2, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	183a      	adds	r2, r7, r0
 8001ce4:	8812      	ldrh	r2, [r2, #0]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	e04c      	b.n	8001d84 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001cea:	231e      	movs	r3, #30
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e047      	b.n	8001d84 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001cf4:	231f      	movs	r3, #31
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d015      	beq.n	8001d2a <UART_SetConfig+0x276>
 8001cfe:	dc18      	bgt.n	8001d32 <UART_SetConfig+0x27e>
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d00d      	beq.n	8001d20 <UART_SetConfig+0x26c>
 8001d04:	dc15      	bgt.n	8001d32 <UART_SetConfig+0x27e>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <UART_SetConfig+0x25c>
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d005      	beq.n	8001d1a <UART_SetConfig+0x266>
 8001d0e:	e010      	b.n	8001d32 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d10:	f7ff fcb0 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8001d14:	0003      	movs	r3, r0
 8001d16:	61bb      	str	r3, [r7, #24]
        break;
 8001d18:	e012      	b.n	8001d40 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d1a:	4b29      	ldr	r3, [pc, #164]	@ (8001dc0 <UART_SetConfig+0x30c>)
 8001d1c:	61bb      	str	r3, [r7, #24]
        break;
 8001d1e:	e00f      	b.n	8001d40 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d20:	f7ff fc2c 	bl	800157c <HAL_RCC_GetSysClockFreq>
 8001d24:	0003      	movs	r3, r0
 8001d26:	61bb      	str	r3, [r7, #24]
        break;
 8001d28:	e00a      	b.n	8001d40 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	61bb      	str	r3, [r7, #24]
        break;
 8001d30:	e006      	b.n	8001d40 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d36:	231e      	movs	r3, #30
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
        break;
 8001d3e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01e      	beq.n	8001d84 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	085a      	lsrs	r2, r3, #1
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	18d2      	adds	r2, r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	0019      	movs	r1, r3
 8001d56:	0010      	movs	r0, r2
 8001d58:	f7fe f9d6 	bl	8000108 <__udivsi3>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	d90a      	bls.n	8001d7c <UART_SetConfig+0x2c8>
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	025b      	lsls	r3, r3, #9
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d205      	bcs.n	8001d7c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	e003      	b.n	8001d84 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8001d7c:	231e      	movs	r3, #30
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001d90:	231e      	movs	r3, #30
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	781b      	ldrb	r3, [r3, #0]
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b008      	add	sp, #32
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	efff69f3 	.word	0xefff69f3
 8001da4:	ffffcfff 	.word	0xffffcfff
 8001da8:	fffff4ff 	.word	0xfffff4ff
 8001dac:	40013800 	.word	0x40013800
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40004400 	.word	0x40004400
 8001db8:	40004800 	.word	0x40004800
 8001dbc:	40004c00 	.word	0x40004c00
 8001dc0:	007a1200 	.word	0x007a1200

08001dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d00b      	beq.n	8001dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8001f08 <UART_AdvFeatureConfig+0x144>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	d00b      	beq.n	8001e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4a43      	ldr	r2, [pc, #268]	@ (8001f0c <UART_AdvFeatureConfig+0x148>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	2202      	movs	r2, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d00b      	beq.n	8001e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a3b      	ldr	r2, [pc, #236]	@ (8001f10 <UART_AdvFeatureConfig+0x14c>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	2204      	movs	r2, #4
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d00b      	beq.n	8001e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a34      	ldr	r2, [pc, #208]	@ (8001f14 <UART_AdvFeatureConfig+0x150>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e58:	2210      	movs	r2, #16
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d00b      	beq.n	8001e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a2c      	ldr	r2, [pc, #176]	@ (8001f18 <UART_AdvFeatureConfig+0x154>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d00b      	beq.n	8001e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <UART_AdvFeatureConfig+0x158>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	2240      	movs	r2, #64	@ 0x40
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d01d      	beq.n	8001ede <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <UART_AdvFeatureConfig+0x15c>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	035b      	lsls	r3, r3, #13
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d10b      	bne.n	8001ede <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a15      	ldr	r2, [pc, #84]	@ (8001f24 <UART_AdvFeatureConfig+0x160>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d00b      	beq.n	8001f00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a0e      	ldr	r2, [pc, #56]	@ (8001f28 <UART_AdvFeatureConfig+0x164>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
  }
}
 8001f00:	46c0      	nop			@ (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	ffff7fff 	.word	0xffff7fff
 8001f0c:	fffdffff 	.word	0xfffdffff
 8001f10:	fffeffff 	.word	0xfffeffff
 8001f14:	fffbffff 	.word	0xfffbffff
 8001f18:	ffffefff 	.word	0xffffefff
 8001f1c:	ffffdfff 	.word	0xffffdfff
 8001f20:	ffefffff 	.word	0xffefffff
 8001f24:	ff9fffff 	.word	0xff9fffff
 8001f28:	fff7ffff 	.word	0xfff7ffff

08001f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b092      	sub	sp, #72	@ 0x48
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2284      	movs	r2, #132	@ 0x84
 8001f38:	2100      	movs	r1, #0
 8001f3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001f3c:	f7fe fc6a 	bl	8000814 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d12c      	bne.n	8001fac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	0391      	lsls	r1, r2, #14
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4a46      	ldr	r2, [pc, #280]	@ (8002074 <UART_CheckIdleState+0x148>)
 8001f5c:	9200      	str	r2, [sp, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f000 f88c 	bl	800207c <UART_WaitOnFlagUntilTimeout>
 8001f64:	1e03      	subs	r3, r0, #0
 8001f66:	d021      	beq.n	8001fac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f68:	f3ef 8310 	mrs	r3, PRIMASK
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001f70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f72:	2301      	movs	r3, #1
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f78:	f383 8810 	msr	PRIMASK, r3
}
 8001f7c:	46c0      	nop			@ (mov r8, r8)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2180      	movs	r1, #128	@ 0x80
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f94:	f383 8810 	msr	PRIMASK, r3
}
 8001f98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2278      	movs	r2, #120	@ 0x78
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e05f      	b.n	800206c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d146      	bne.n	8002048 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fbc:	2280      	movs	r2, #128	@ 0x80
 8001fbe:	03d1      	lsls	r1, r2, #15
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8002074 <UART_CheckIdleState+0x148>)
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f000 f858 	bl	800207c <UART_WaitOnFlagUntilTimeout>
 8001fcc:	1e03      	subs	r3, r0, #0
 8001fce:	d03b      	beq.n	8002048 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f383 8810 	msr	PRIMASK, r3
}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4921      	ldr	r1, [pc, #132]	@ (8002078 <UART_CheckIdleState+0x14c>)
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f383 8810 	msr	PRIMASK, r3
}
 8002000:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002002:	f3ef 8310 	mrs	r3, PRIMASK
 8002006:	61bb      	str	r3, [r7, #24]
  return(result);
 8002008:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
 800200c:	2301      	movs	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f383 8810 	msr	PRIMASK, r3
}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	438a      	bics	r2, r1
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	f383 8810 	msr	PRIMASK, r3
}
 8002032:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2280      	movs	r2, #128	@ 0x80
 8002038:	2120      	movs	r1, #32
 800203a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2278      	movs	r2, #120	@ 0x78
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e011      	b.n	800206c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2280      	movs	r2, #128	@ 0x80
 8002052:	2120      	movs	r1, #32
 8002054:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2278      	movs	r2, #120	@ 0x78
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b010      	add	sp, #64	@ 0x40
 8002072:	bd80      	pop	{r7, pc}
 8002074:	01ffffff 	.word	0x01ffffff
 8002078:	fffffedf 	.word	0xfffffedf

0800207c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	1dfb      	adds	r3, r7, #7
 800208a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800208c:	e051      	b.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	3301      	adds	r3, #1
 8002092:	d04e      	beq.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7fe fbbe 	bl	8000814 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d302      	bcc.n	80020aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e051      	b.n	8002152 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2204      	movs	r2, #4
 80020b6:	4013      	ands	r3, r2
 80020b8:	d03b      	beq.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb6>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b80      	cmp	r3, #128	@ 0x80
 80020be:	d038      	beq.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb6>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b40      	cmp	r3, #64	@ 0x40
 80020c4:	d035      	beq.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2208      	movs	r2, #8
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d111      	bne.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2208      	movs	r2, #8
 80020da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 f83c 	bl	800215c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2284      	movs	r2, #132	@ 0x84
 80020e8:	2108      	movs	r1, #8
 80020ea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2278      	movs	r2, #120	@ 0x78
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e02c      	b.n	8002152 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	401a      	ands	r2, r3
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	429a      	cmp	r2, r3
 800210a:	d112      	bne.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2280      	movs	r2, #128	@ 0x80
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0018      	movs	r0, r3
 800211a:	f000 f81f 	bl	800215c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2284      	movs	r2, #132	@ 0x84
 8002122:	2120      	movs	r1, #32
 8002124:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2278      	movs	r2, #120	@ 0x78
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e00f      	b.n	8002152 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	425a      	negs	r2, r3
 8002142:	4153      	adcs	r3, r2
 8002144:	b2db      	uxtb	r3, r3
 8002146:	001a      	movs	r2, r3
 8002148:	1dfb      	adds	r3, r7, #7
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d09e      	beq.n	800208e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b004      	add	sp, #16
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	@ 0x38
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002164:	f3ef 8310 	mrs	r3, PRIMASK
 8002168:	617b      	str	r3, [r7, #20]
  return(result);
 800216a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800216c:	637b      	str	r3, [r7, #52]	@ 0x34
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f383 8810 	msr	PRIMASK, r3
}
 8002178:	46c0      	nop			@ (mov r8, r8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4926      	ldr	r1, [pc, #152]	@ (8002220 <UART_EndRxTransfer+0xc4>)
 8002186:	400a      	ands	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f383 8810 	msr	PRIMASK, r3
}
 8002194:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002196:	f3ef 8310 	mrs	r3, PRIMASK
 800219a:	623b      	str	r3, [r7, #32]
  return(result);
 800219c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219e:	633b      	str	r3, [r7, #48]	@ 0x30
 80021a0:	2301      	movs	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	f383 8810 	msr	PRIMASK, r3
}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	438a      	bics	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c2:	f383 8810 	msr	PRIMASK, r3
}
 80021c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d118      	bne.n	8002202 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d0:	f3ef 8310 	mrs	r3, PRIMASK
 80021d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80021d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021da:	2301      	movs	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f383 8810 	msr	PRIMASK, r3
}
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2110      	movs	r1, #16
 80021f2:	438a      	bics	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f383 8810 	msr	PRIMASK, r3
}
 8002200:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2280      	movs	r2, #128	@ 0x80
 8002206:	2120      	movs	r1, #32
 8002208:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	b00e      	add	sp, #56	@ 0x38
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	fffffedf 	.word	0xfffffedf

08002224 <memset>:
 8002224:	0003      	movs	r3, r0
 8002226:	1882      	adds	r2, r0, r2
 8002228:	4293      	cmp	r3, r2
 800222a:	d100      	bne.n	800222e <memset+0xa>
 800222c:	4770      	bx	lr
 800222e:	7019      	strb	r1, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	e7f9      	b.n	8002228 <memset+0x4>

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	2600      	movs	r6, #0
 8002238:	4c0c      	ldr	r4, [pc, #48]	@ (800226c <__libc_init_array+0x38>)
 800223a:	4d0d      	ldr	r5, [pc, #52]	@ (8002270 <__libc_init_array+0x3c>)
 800223c:	1b64      	subs	r4, r4, r5
 800223e:	10a4      	asrs	r4, r4, #2
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	2600      	movs	r6, #0
 8002246:	f000 f819 	bl	800227c <_init>
 800224a:	4c0a      	ldr	r4, [pc, #40]	@ (8002274 <__libc_init_array+0x40>)
 800224c:	4d0a      	ldr	r5, [pc, #40]	@ (8002278 <__libc_init_array+0x44>)
 800224e:	1b64      	subs	r4, r4, r5
 8002250:	10a4      	asrs	r4, r4, #2
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	00b3      	lsls	r3, r6, #2
 800225a:	58eb      	ldr	r3, [r5, r3]
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	00b3      	lsls	r3, r6, #2
 8002264:	58eb      	ldr	r3, [r5, r3]
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	080022cc 	.word	0x080022cc
 8002270:	080022cc 	.word	0x080022cc
 8002274:	080022d0 	.word	0x080022d0
 8002278:	080022cc 	.word	0x080022cc

0800227c <_init>:
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002282:	bc08      	pop	{r3}
 8002284:	469e      	mov	lr, r3
 8002286:	4770      	bx	lr

08002288 <_fini>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228e:	bc08      	pop	{r3}
 8002290:	469e      	mov	lr, r3
 8002292:	4770      	bx	lr
